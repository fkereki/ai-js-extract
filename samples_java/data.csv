repo_path,content,repo_name
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/config/BeanTestConfiguration.java,"package com.globant.os.accounts.config;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.globant.os.accounts.external.shared.ClientConfiguration;
import com.globant.os.accounts.external.shared.RestClient;
import com.globant.os.accounts.external.shared.RestClientHistrixCommandHandler;
import com.netflix.hystrix.HystrixCommand;
import com.netflix.hystrix.HystrixCommandGroupKey;
import com.netflix.hystrix.HystrixCommandProperties;
import com.netflix.hystrix.HystrixThreadPoolProperties;
import lombok.Getter;
import okhttp3.OkHttpClient;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;

@TestConfiguration
@Getter
public class BeanTestConfiguration {

  private static final int MAXIMUM_CORE_SIZE = 10;
  private static final int CORE_SIZE = 10;
  private static final int TIMEOUT_MS = 3000;
  private static final String REMOTE_SERVICE_TEST = ""RemoteServiceTest"";
  private ClientConfiguration clientConfig = mock(ClientConfiguration.class);

  @Bean
  @Primary
  public RestClient restClientTest(RestClientHistrixCommandHandler hystrixCommandHandler) {
    OkHttpClient client = spy(new OkHttpClient.Builder().build());

    ObjectMapper mapper = spy(new ObjectMapper()
        .registerModule(new JavaTimeModule())
        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)
        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false));

    return new RestClient(clientConfig, client, mapper, hystrixCommandHandler);
  }

  @Bean
  public HystrixCommand.Setter histrixCommandSetter() {
    return HystrixCommand.Setter
        .withGroupKey(HystrixCommandGroupKey.Factory.asKey(REMOTE_SERVICE_TEST))
        .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()
            .withExecutionTimeoutEnabled(true).withExecutionTimeoutInMilliseconds(TIMEOUT_MS))
        .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()
            .withCoreSize(CORE_SIZE).withMaximumSize(MAXIMUM_CORE_SIZE));
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/config/EmbeddedRedisTestConfiguration.java,"package com.globant.os.accounts.config;

import java.io.IOException;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.TestConfiguration;
import redis.embedded.RedisServer;

@TestConfiguration
public class EmbeddedRedisTestConfiguration {

  private final RedisServer redisServer;

  public EmbeddedRedisTestConfiguration(@Value(""${spring.redis.port}"") final int redisPort) throws IOException {
    this.redisServer = RedisServer.builder().setting(""bind 127.0.0.1"")
                                            .setting(""daemonize no"")
                                            .setting(""appendonly no"")
                                            .setting(""maxmemory 128M"")
                                            .port(redisPort).build();
  }

  @PostConstruct
  public void startRedis() {
    try {
      if (!redisServer.isActive()) {
        this.redisServer.start();
      }
    } catch (RuntimeException e) {
      this.redisServer.stop();
    }
  }

  @PreDestroy
  public void stopRedis() {
    this.redisServer.stop();
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/AccountsApplicationTest.java,"package com.globant.os.accounts.component;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles(""test"")
public class AccountsApplicationTest {

  @Test
  public void contextLoads() {
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/group/io/web/v2/GroupResponseTest.java,"package com.globant.os.accounts.component.group.io.web.v2;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.doReturn;

import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupBasic;
import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupDetails;
import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.model.GroupChildGroup;
import com.globant.os.accounts.component.group.model.GroupMemberUser;
import com.globant.os.accounts.component.group.model.GroupOrigin;
import com.globant.os.accounts.component.group.model.GroupType;
import com.globant.os.accounts.component.group.model.GroupVisibility;
import java.util.Arrays;
import java.util.HashSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Spy;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class GroupResponseTest {

  @Spy
  private Group entity = new Group();

  @Before
  public void setUp() {
    entity.setCommunityId(1L);
    entity.setVisibility(GroupVisibility.PUBLIC);
    entity.setType(GroupType.NONE);
    entity.setOrigin(GroupOrigin.SMU);
    entity.setGroupMemberUsers(Arrays.asList(new GroupMemberUser(entity, 1, new HashSet<>(Arrays.asList(""LEADER""))),
        new GroupMemberUser(entity, 2, new HashSet<>(Arrays.asList(""MEMBER"")))));
    entity.setGroupChildGroups(Arrays.asList(new GroupChildGroup(entity, 2)));

    doReturn(1L).when(entity).getId();
  }

  @Test
  public void testBuildGroupDetailsFromEntityWithAmounts() {
    GroupDetails groupDetails = GroupResponse.GroupDetails.fromEntity(entity);

    assertThat(groupDetails).isNotNull();
    assertThat(groupDetails.getCommunityId()).isEqualTo(entity.getCommunityId());
    assertThat(groupDetails.getLeaders().size()).isEqualTo(1);
    assertThat(groupDetails.getLeaders().get(0).getUserId())
        .isEqualTo(entity.getGroupMemberUsers().get(0).getId().getUserId());
    assertThat(groupDetails.getAmountOfMembers()).isEqualTo(2);
    assertThat(groupDetails.getAmountOfSubgroups()).isEqualTo(1);
  }

  @Test
  public void testBuildGroupBasicFromEntityWithAmounts() {
    GroupBasic groupBasic = GroupResponse.GroupBasic.fromEntity(entity);

    assertThat(groupBasic).isNotNull();
    assertThat(groupBasic.getCommunityId()).isEqualTo(entity.getCommunityId());
    assertThat(groupBasic.getLeaders().size()).isEqualTo(1);
    assertThat(groupBasic.getLeaders().get(0).getUserId())
        .isEqualTo(entity.getGroupMemberUsers().get(0).getId().getUserId());
    assertThat(groupBasic.getAmountOfMembers()).isEqualTo(2);
    assertThat(groupBasic.getAmountOfSubgroups()).isEqualTo(1);
  }

  @Test
  public void testBuildGroupBasicFromEntityWithoutAmounts() {
    entity.setGroupMemberUsers(null);
    entity.setGroupChildGroups(null);
    GroupBasic groupBasic = GroupResponse.GroupBasic.fromEntity(entity);

    assertThat(groupBasic).isNotNull();
    assertThat(groupBasic.getCommunityId()).isEqualTo(entity.getCommunityId());
    assertThat(groupBasic.getLeaders()).isNullOrEmpty();
    assertThat(groupBasic.getAmountOfMembers()).isEqualTo(0);
    assertThat(groupBasic.getAmountOfSubgroups()).isEqualTo(0);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/group/io/web/v2/GroupQueryControllerTest.java,"package com.globant.os.accounts.component.group.io.web.v2;

import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.globant.os.accounts.component.group.model.GroupCreationResponse;
import com.globant.os.accounts.component.group.model.GroupOrigin;
import com.globant.os.accounts.component.group.model.GroupType;
import com.globant.os.accounts.component.group.model.GroupVisibility;
import com.globant.os.accounts.component.group.service.GroupService;
import com.globant.os.accounts.component.group.service.GroupService.GroupCreationRequest;
import com.globant.os.accounts.component.group.service.GroupService.GroupMemberAddingRequest;
import com.globant.os.accounts.component.shared.io.util.EventPublisherComponent;
import com.globant.os.accounts.component.shared.io.web.BaseControllerIt;
import com.globant.os.accounts.component.shared.model.Schema;
import com.globant.os.accounts.external.smu.io.gateway.SmuMemberClientGateway;
import com.globant.smu.os.events.publisher.service.EventPublisherService;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.flywaydb.test.annotation.FlywayTest;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.mock.mockito.SpyBean;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.util.MultiValueMap;

@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
public class GroupQueryControllerTest extends BaseControllerIt {

  private MultiValueMap<String, String> headers;

  @Autowired
  private MockMvc mvc;

  @Autowired
  private GroupService groupService;

  @SpyBean
  private EventPublisherComponent eventPublisherComponent;

  @MockBean(name = ""eventPublisherKinesis"")
  private EventPublisherService eventPublisherKinesis;

  @MockBean(name = ""smuMemberGateway"")
  public SmuMemberClientGateway smuMemberGateway;

  private long communityId;
  private List<String> roles;
  private GroupCreationResponse parent;
  private GroupCreationResponse child;
  private GroupCreationRequest groupParentCreationRequest;
  private GroupCreationRequest groupChildCreationRequest;

  public GroupQueryControllerTest() {
    super(GroupQueryController.class);

    headers = createHeaderInternalAppToken();
  }

  @Before
  @FlywayTest(invokeCleanDB = true)
  public void setUp() throws Exception {
    truncateGraphData();

    communityId = 1;
    roles = new ArrayList<String>();
    roles.add(Schema.ROLE_LEADER);
    roles.add(Schema.ROLE_MEMBER);

    smuMemberGateway = Mockito.mock(SmuMemberClientGateway.class);
    when(smuMemberGateway.getMembersDetail(Mockito.anyString())).thenReturn(new ArrayList<>());

    groupParentCreationRequest = getRequestForPublicGroupCreation(""Test Group Parent"", ""Test Group Parent"");
    parent = groupService.create(communityId, groupParentCreationRequest);
    groupChildCreationRequest = getRequestForPublicGroupCreation(""Test Group Child"", ""Test Group Child"");
    child = groupService.create(communityId, groupChildCreationRequest);
    groupService.addMemberChildGroup(parent.getGroup().getId(), child.getGroup().getId());
    groupService.addMemberUser(parent.getGroup().getId(), getRequestForAddMemberUsersToGroup(1, roles), true);
    groupService.addMemberUser(parent.getGroup().getId(), getRequestForAddMemberUsersToGroup(2, null), true);
    groupService.addMemberUser(child.getGroup().getId(), getRequestForAddMemberUsersToGroup(2, roles), true);
    groupService.addMemberUser(child.getGroup().getId(), getRequestForAddMemberUsersToGroup(4, null), true);
    groupService.addMemberUser(child.getGroup().getId(), getRequestForAddMemberUsersToGroup(3, null), true);
  }

  @FlywayTest(invokeCleanDB = true)
  public void addMembersInGroups() {

    communityId = 1;
    roles = new ArrayList<String>();
    roles.add(Schema.ROLE_MEMBER);

    smuMemberGateway = Mockito.mock(SmuMemberClientGateway.class);
    when(smuMemberGateway.getMembersDetail(Mockito.anyString())).thenReturn(new ArrayList<>());

    groupChildCreationRequest = getRequestForPublicGroupCreation(""Test Group Child 2"", ""Test Group Child 2"");
    child = groupService.create(communityId, groupChildCreationRequest);
    groupService.addMemberChildGroup(parent.getGroup().getId(), child.getGroup().getId());
    groupService.addMemberUser(child.getGroup().getId(), getRequestForAddMemberUsersToGroup(5, roles), true);
    groupService.addMemberUser(child.getGroup().getId(), getRequestForAddMemberUsersToGroup(6, roles), true);
  }

  @Test
  public void testGetMemberUsersByGroupId() throws Exception {

    final String uri = ""/api/v2/queries/communities/"" + communityId + ""/groups/"" + parent.getGroup().getId()
        + ""/members"";

    mvc.perform(get(uri).headers(new HttpHeaders(headers))).andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.result"", hasSize(4)))
        .andExpect(jsonPath(""$.result[*].userId"", containsInAnyOrder(1, 2, 3, 4)));
  }

  @Test
  public void testGetMemberUsersByGroupIdDepthException() throws Exception {

    final String uri = ""/api/v2/queries/communities/"" + communityId + ""/groups/"" + parent.getGroup().getId()
        + ""/members?depth=%s"";

    mvc.perform(get(String.format(uri, ""-1"")).headers(new HttpHeaders(headers)))
        .andExpect(status().is(400))
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.details"", is(""Depth should be greater than or equal to ""
            + ""0 and less than or equal to 1000"")));

    mvc.perform(get(String.format(uri, ""1001"")).headers(new HttpHeaders(headers)))
        .andExpect(status().is(400))
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.details"", is(""Depth should be greater than or equal to ""
            + ""0 and less than or equal to 1000"")));
  }

  @Test
  public void testGetGroupsByMember() throws Exception {

    groupService.addMemberUser(1, getRequestForAddMemberUsersToGroup(5, null), true);

    final String uri = ""/api/v2/queries/communities/"" + communityId + ""/users/5/groups"";

    mvc.perform(get(uri).headers(new HttpHeaders(headers))).andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.result"", hasSize(1)));
  }

  @Test
  public void testGetGroupsByMemberDepthException() throws Exception {

    final String uri = ""/api/v2/queries/communities/"" + communityId + ""/users/5/groups?depth=%s"";

    mvc.perform(get(String.format(uri, ""-1"")).headers(new HttpHeaders(headers)))
        .andExpect(status().is(400))
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.details"", is(""Depth should be greater than or equal to ""
            + ""0 and less than or equal to 1000"")));

    mvc.perform(get(String.format(uri, ""1001"")).headers(new HttpHeaders(headers)))
        .andExpect(status().is(400))
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.details"", is(""Depth should be greater than or equal to ""
            + ""0 and less than or equal to 1000"")));
  }

  @Test
  public void testGetLeadersByMember() throws Exception {

    final String uriUserId4 = ""/api/v2/queries/communities/"" + communityId
        + ""/users/4/groups/members?roles=LEADER&direction=up"";

    final String uriUserId2 = ""/api/v2/queries/communities/"" + communityId
        + ""/users/2/groups/members?roles=LEADER&direction=up"";

    mvc.perform(get(uriUserId4).headers(new HttpHeaders(headers))).andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.result"", hasSize(2)));

    mvc.perform(get(uriUserId2).headers(new HttpHeaders(headers))).andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.result"", hasSize(1)));
  }

  @Test
  public void testGetLeadersByMemberDepthException() throws Exception {
    final String url = ""/api/v2/queries/communities/"" + communityId
        + ""/users/1/groups/members?depth=%s"";

    mvc.perform(get(String.format(url, ""-1"")).headers(new HttpHeaders(headers)))
        .andExpect(status().is(400))
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.details"", is(""[Depth should be greater than or equal to ""
            + ""0 and less than or equal to 1000]"")));

    mvc.perform(get(String.format(url, ""1001"")).headers(new HttpHeaders(headers)))
        .andExpect(status().is(400))
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.details"", is(""[Depth should be greater than or equal to ""
            + ""0 and less than or equal to 1000]"")));
  }

  @Test
  public void testGetLeadersByMemberDirectionException() throws Exception {

    final String url = ""/api/v2/queries/communities/"" + communityId
        + ""/users/1/groups/members?direction=%s"";

    mvc.perform(get(String.format(url, ""any"")).headers(new HttpHeaders(headers))).andExpect(status().is(400))
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.details"", is(""Direction should be 'UP' or 'DOWN'"")));
  }

  @Test
  public void testGetLeadersByMemberGroupTypeException() throws Exception {

    final String url = ""/api/v2/queries/communities/"" + communityId
        + ""/users/1/groups/members?groupType=%s"";

    mvc.perform(get(String.format(url, ""any"")).headers(new HttpHeaders(headers))).andExpect(status().is(400))
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.details"", is(""[Group type should be 'ORG' or 'NONE']"")));
  }

  @Test
  public void testGetLeadersByMemberRoleExeption() throws Exception {

    final String url = ""/api/v2/queries/communities/"" + communityId
        + ""/users/1/groups/members?roles=%s"";

    mvc.perform(get(String.format(url, ""any"")).headers(new HttpHeaders(headers))).andExpect(status().is(400))
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.details"", is(""[Role should be 'LEADER']"")));
  }

  @Test
  public void testGetMembersLedByLeader() throws Exception {

    final String uriUserId1 = ""/api/v2/queries/communities/"" + communityId
        + ""/users/1/groups/members?roles=LEADER&direction=down"";

    mvc.perform(get(uriUserId1).headers(new HttpHeaders(headers))).andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.result"", hasSize(3)));
  }

  @Test
  public void testGetUsersBelongingToGroupsWithGroupTypeOrg() throws Exception {

    addMembersInGroups();

    final String uriUserId1 = ""/api/v2/queries/communities/"" + communityId
        + ""/users/4/groups/members?roles=LEADER&direction=down&groupType=org"";

    mvc.perform(get(uriUserId1).headers(new HttpHeaders(headers))).andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.result"", hasSize(0)));
  }

  @Test
  public void testGetUsersBelongingToGroupsWithGroupTypeDifferentToOrg() throws Exception {

    final String uriUserId1 = ""/api/v2/queries/communities/"" + communityId
        + ""/users/4/groups/members?roles=LEADER&direction=down"";

    mvc.perform(get(uriUserId1).headers(new HttpHeaders(headers))).andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.result"", hasSize(0)));
  }

  @Test
  public void testGeUsersThatAnUserLeadsWithGroupTypeOrg() throws Exception {

    addMembersInGroups();

    final String uriUserId1 = ""/api/v2/queries/communities/"" + communityId
        + ""/users/1/groups/members?roles=LEADER&direction=down"";

    mvc.perform(get(uriUserId1).headers(new HttpHeaders(headers))).andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.result"", hasSize(5)));
  }

  @Test
  public void testGeUsersThatAnUserLeadsWithGroupTypeDifferentToOrg() throws Exception {

    final String uriUserId1 = ""/api/v2/queries/communities/"" + communityId
        + ""/users/1/groups/members?roles=LEADER&direction=down"";

    mvc.perform(get(uriUserId1).headers(new HttpHeaders(headers))).andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.result"", hasSize(3)));
  }

  @Test
  public void testGeUsersThatOtherUserLeadsWithGroupTypeOrg() throws Exception {

    final String uriUserId1 = ""/api/v2/queries/communities/"" + communityId
        + ""/users/8/groups/members?roles=LEADER&direction=up&groupType=org"";

    mvc.perform(get(uriUserId1).headers(new HttpHeaders(headers))).andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
        .andExpect(jsonPath(""$.result"", hasSize(0)));
  }

  private GroupCreationRequest getRequestForPublicGroupCreation(String groupName, String description) {
    GroupCreationRequest request = new GroupCreationRequest();
    request.setName(groupName);
    request.setVisibility(GroupVisibility.PUBLIC.name());
    request.setDescription(description);
    request.setType(GroupType.NONE.name());
    request.setOrigin(GroupOrigin.SMU.name());
    return request;
  }

  private List<GroupMemberAddingRequest> getRequestForAddMemberUsersToGroup(long userId, List<String> roles) {
    GroupMemberAddingRequest groupMemberAddingRequest = new GroupMemberAddingRequest();
    groupMemberAddingRequest.setUserId(userId);
    groupMemberAddingRequest.setRoles(roles);
    return Arrays.asList(groupMemberAddingRequest);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/group/model/GroupRoleBaseTest.java,"package com.globant.os.accounts.component.group.model;

import com.globant.os.accounts.support.web.BadRequestException;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class GroupRoleBaseTest {

  @Rule
  public ExpectedException expectedException = ExpectedException.none();

  @Test
  public void testFromValueWhenOwner() throws Exception {

    Assert.assertEquals(""OWNER"", GroupRoleBase.fromValue(""owner"").toString());
    Assert.assertTrue(GroupRoleBase.isMandatory(""owner""));
  }

  @Test
  public void testFromValueWhenMaintainer() throws Exception {

    Assert.assertEquals(""MAINTAINER"", GroupRoleBase.fromValue(""maintainer"").toString());
    Assert.assertTrue(GroupRoleBase.isMandatory(""maintainer""));
  }

  @Test
  public void testFromValueWhenMember() throws Exception {

    Assert.assertEquals(""MEMBER"", GroupRoleBase.fromValue(""member"").toString());
    Assert.assertTrue(GroupRoleBase.isMandatory(""member""));
  }

  @Test
  public void testFromValueWhenLeader() throws Exception {

    Assert.assertEquals(""LEADER"", GroupRoleBase.fromValue(""leader"").toString());
    Assert.assertTrue(GroupRoleBase.isMandatory(""leader""));
  }

  @Test
  public void testFromValueThrowsBadRequestExceptionWhenInvalidRole() throws Exception {
    expectedException.expect(BadRequestException.class);
    expectedException.expectMessage(
        ""Invalid role value ['invalidRole'] - [Allowed values: 'OWNER', 'MAINTAINER', 'MEMBER', 'LEADER']"");

    GroupRoleBase.fromValue(""invalidRole"").toString();
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/group/model/GroupVisibilityTest.java,"package com.globant.os.accounts.component.group.model;

import com.globant.os.accounts.support.web.BadRequestException;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class GroupVisibilityTest {

  @Rule
  public ExpectedException expectedException = ExpectedException.none();

  @Test
  public void testFromValuePublic() throws Exception {
    GroupVisibility groupVisibilityPublic = GroupVisibility.fromValue(""public"");

    Assert.assertTrue(groupVisibilityPublic.toString().equals(""PUBLIC""));
  }

  @Test
  public void testFromValueClosed() throws Exception {
    GroupVisibility groupVisibilityPublic = GroupVisibility.fromValue(""closed"");

    Assert.assertTrue(groupVisibilityPublic.toString().equals(""CLOSED""));
  }

  @Test
  public void testFromValueSecret() throws Exception {
    GroupVisibility groupVisibilityPublic = GroupVisibility.fromValue(""secret"");

    Assert.assertTrue(groupVisibilityPublic.toString().equals(""SECRET""));
  }

  @Test
  public void testFromValueThrowsBadRequestExceptionWhenInvalidVisibility() throws Exception {
    expectedException.expect(BadRequestException.class);
    expectedException.expectMessage(
        ""Invalid visibility value ['InvalidVisibility'] - [Allowed values: 'PUBLIC', 'CLOSED', 'SECRET']"");

    GroupVisibility.fromValue(""InvalidVisibility"");
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/admin/service/AdminServiceImplTest.java,"package com.globant.os.accounts.component.admin.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.tuple;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.service.MemberService;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.service.UserService;
import java.util.ArrayList;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class AdminServiceImplTest {

  private static final Long COMMUNITY_ID = 1L;

  @InjectMocks
  private AdminService service = new AdminServiceImpl();

  @Mock
  private UserService userService;

  @Mock
  private MemberService memberService;

  /**
   * setUp method.
   */
  @Before
  public void setUp() {
    List<OsUser> users = new ArrayList<OsUser>();
    List<Member> members = new ArrayList<Member>();
    Community community = spy(new Community(""Globant""));

    users.add(spy(new OsUser(""Jhon"", ""Doe"")));
    users.add(spy(new OsUser(""Jhon2"", ""Doe2"")));

    members.add(new Member(community, users.get(0), ""1"", ""jhon.doe@globant.com""));
    members.add(new Member(community, users.get(1), ""2"", ""jhon.doe2@globant.com""));

    when(userService.create(anyList())).thenReturn(users);
    when(memberService.create(eq(COMMUNITY_ID), anyList())).thenReturn(members);
    // Fix to get id of Entities
    for (int i = 0; i < users.size(); i++) {
      when(users.get(i).getId()).thenReturn((long) i);
    }
    when(community.getId()).thenReturn(COMMUNITY_ID);
  }

  @Test
  public void createCommunity() {
    List<Member> membersResponse = service.usersCsvUpload(createCsvFile(), COMMUNITY_ID);

    verify(userService).create(ArgumentMatchers.anyList());
    verify(memberService).create(eq(COMMUNITY_ID), ArgumentMatchers.anyList());

    assertThat(membersResponse).isNotNull();
    assertThat(membersResponse)
        .extracting(""id.community.id"", ""id.user.firstName"", ""id.user.lastName"")
        .contains(
            tuple(1L, ""Jhon"", ""Doe""),
            tuple(1L, ""Jhon2"", ""Doe2"")
      );
  }

  private byte[] createCsvFile() {
    String csv = ""email,firstName,lastName,phoneNumber,birthDate,identification\n"";
    csv += ""hello@globant.com,Jhon,Doe,538-1231,2017-10-01,1\n"";
    csv += ""hello2@globant.com,Jhon2,Doe2,538-1232,2017-10-02,2"";
    return csv.getBytes();
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/user/service/UserServiceImplTest.java,"package com.globant.os.accounts.component.user.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

import com.globant.os.accounts.component.user.io.gateway.UserGateway;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.service.UserService.UserCreateCmd;
import com.globant.os.accounts.external.smu.io.gateway.SmuMemberClientGateway;
import java.time.LocalDate;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class UserServiceImplTest {

  @Mock
  private UserGateway gtwy;

  @Mock
  private UserService service;

  private UserCreateCmd userCreateCmd;

  @Mock
  private SmuMemberClientGateway smuMemberGtw;

  /**
   * setUp method.
   */
  @Before
  public void setUp() {
    userCreateCmd = new UserCreateCmd();
    userCreateCmd.setFirstName(""John"");
    userCreateCmd.setLastName(""Doe"");
    userCreateCmd.setImage(""50D840B674A5C868F9091EE8FE0F2267"");
    userCreateCmd.setBirthDate(LocalDate.of(1967, 07, 17).toString());
  }

  /**
   * Invoke {@link UserService#create(UserCreateCmd)}, validating gateway is called.
   *
   * <pre>
   * Scenario:
   *      1) Try to invoke {@link UserServiceImpl#create(UserCreateCmd)}.
   * Expectations:
   *      1) {@link UserGateway#save(OsUser)} is called.
   *      3) created {@link OsUser} is returned.
   * </pre>
   */
  @Test
  public void createUser() {
    OsUser user = getOsUser();
    when(service.create(userCreateCmd)).thenReturn(user);
    OsUser userCreated = service.create(userCreateCmd);

    assertThat(userCreated).isNotNull();
    assertThat(userCreated.getFirstName()).isEqualTo(userCreateCmd.getFirstName());
    assertThat(userCreated.getLastName()).isEqualTo(userCreateCmd.getLastName());
    assertThat(userCreated.getImage()).isEqualTo(userCreateCmd.getImage());
    assertThat(userCreated.getBirthDate()).isEqualTo(userCreateCmd.getBirthDate());
  }

  private OsUser getOsUser() {
    OsUser user = new OsUser(userCreateCmd.getFirstName(), userCreateCmd.getLastName());
    user.setImage(""50D840B674A5C868F9091EE8FE0F2267"");
    user.setBirthDate(LocalDate.of(1967, 07, 17));
    return user;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/shared/io/util/file/csv/CsvFileWriterTest.java,"package com.globant.os.accounts.component.shared.io.util.file.csv;

import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

import com.globant.os.accounts.component.admin.io.web.v2.UserCsvCmd;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.model.UserFactory;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.junit.BeforeClass;
import org.junit.Test;

public class CsvFileWriterTest {

  private static CsvFileWriter<UserCsvCmd> writer;

  @BeforeClass
  public static void setup() {
    writer = new CsvFileWriter<>(UserCsvCmd.class);
  }

  @Test
  public void testReadAllCsvRows() {
    byte[] content = writer.write(createUsers());
    String csv = new String(content);
    assertThat(content.length).isGreaterThan(1);
    assertThat(csv).contains(""Jhon"");
    assertThat(csv).contains(""Jhon2"");
  }

  private List<UserCsvCmd> createUsers() {
    List<OsUser> users = new ArrayList<>();
    users.add(spy(
        UserFactory.newUser(""Jhon"", ""Doe"", ""jhondoe@gmail.com"", LocalDate.of(1951, 07, 17), ""CODE1"", ""1-563-45"")));
    users.add(spy(
        UserFactory.newUser(""Jhon2"", ""Doe2"", ""j2@gmail.com"", LocalDate.of(1952, 07, 17), ""CODE2"", ""2-563-45"")));
    // Fix to get id of Entities
    for (int i = 0; i < users.size(); i++) {
      when(users.get(i).getId()).thenReturn((long) i);
    }
    return users.stream().map(UserCsvCmd::fromEntity).collect(toList());
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/shared/io/util/file/csv/CsvFileReaderTest.java,"package com.globant.os.accounts.component.shared.io.util.file.csv;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.tuple;

import com.globant.os.accounts.component.admin.io.web.v2.UserCsvCmd;
import java.util.Set;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class CsvFileReaderTest {
  @Rule
  public final ExpectedException thrown = ExpectedException.none();

  private static CsvFileReader<UserCsvCmd> reader;

  @BeforeClass
  public static void setup() {
    reader = new CsvFileReader<>(UserCsvCmd.class);
  }

  @Test
  public void testReadAllCsvRows() {
    Set<UserCsvCmd> users = (Set<UserCsvCmd>) reader.read(createCsvFile());
    assertThat(users.size()).isEqualTo(2);
    assertThat(users)
        .extracting(""email"", ""firstName"", ""lastName"", ""identification"")
        .contains(
            tuple(""hello@globant.com"", ""Jhon"", ""Doe"", ""1""),
            tuple(""hello2@globant.com"", ""Jhon2"", ""Doe2"", ""2"")
      );
  }

  @Test
  public void testDontReadDuplicateCsvRows() {
    Set<UserCsvCmd> users = (Set<UserCsvCmd>) reader.read(createCsvFileWithDuplicates());
    assertThat(users.size()).isEqualTo(1);
    assertThat(users)
        .extracting(""email"", ""firstName"", ""lastName"", ""identification"")
        .contains(
            tuple(""hello@globant.com"", ""Jhon"", ""Doe"", ""1"")
      );
  }

  @Test()
  public void shouldThrowExceptionWhenCorruptCsv() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(""Unexpected error while reading the csv"");
    reader.read(createCorruptCsvFile());
  }

  private byte[] createCsvFile() {
    String csv = ""email,firstName,lastName,phoneNumber,birthDate,identification\n"";
    csv += ""hello@globant.com,Jhon,Doe,538-1231,2017-10-01,1\n"";
    csv += ""hello2@globant.com,Jhon2,Doe2,538-1232,2017-10-02,2"";
    return csv.getBytes();
  }

  private byte[] createCsvFileWithDuplicates() {
    String csv = ""email,firstName,lastName,phoneNumber,birthDate,identification\n"";
    csv += ""hello@globant.com,Jhon,Doe,538-1231,2017-10-01,1\n"";
    csv += ""hello@globant.com,Jhon,Doe,538-1231,2017-10-01,1"";
    return csv.getBytes();
  }

  private byte[] createCorruptCsvFile() {
    String csv = ""email,firstName,lastName,phoneNumber,birthDate,identification\n"";
    csv += ""hello@globant.com,Jhon,Doe,538-12312017-10-01,1\n"";
    csv += ""hello2@globant.com,Jhon2,Doe2,538-12322017-10-02,2"";
    return csv.getBytes();
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/shared/io/gateway/SpringDataTest.java,"package com.globant.os.accounts.component.shared.io.gateway;

import static org.assertj.core.api.Java6Assertions.assertThat;

import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.Order;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.junit.Test;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;

public class SpringDataTest {

  @Test
  public void makePageRequest() {

    List<Order> orders = Arrays.asList(Order.fromString(""name"" + SpringData.SORT_SEPARATOR + ""ASC""),
        Order.fromString(""lastname"" + SpringData.SORT_SEPARATOR + ""DESC""));
    BaseFindCmd baseFindCmd = new BaseFindCmd();
    baseFindCmd.setPageNumber(7);
    baseFindCmd.setPageSize(5);
    baseFindCmd.setSort(orders);

    PageRequest page = SpringData.makePageRequest(baseFindCmd);
    assertThat(page.getPageNumber()).isEqualTo(6);
    assertThat(page.getPageSize()).isEqualTo(5);

    Sort.Order sortFirst = new Sort.Order(Sort.Direction.ASC, ""name"");
    Sort.Order sortSecond = new Sort.Order(Sort.Direction.DESC, ""lastname"");
    List<Sort.Order> listOrdersCreated = page.getSort().stream().collect(Collectors.toList());
    assertThat(listOrdersCreated.get(0)).isEqualTo(sortFirst);
    assertThat(listOrdersCreated.get(1)).isEqualTo(sortSecond);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/community/io/gateway/CommunityConfigGatewayImplTest.java,"package com.globant.os.accounts.component.community.io.gateway;

import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.globant.os.accounts.component.community.io.gateway.CommunityConfigGatewayImpl.JpaRepository;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityConfig;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigUpdateCmd;
import com.globant.os.accounts.external.smu.io.gateway.SmuCommunityClientGateway;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class CommunityConfigGatewayImplTest {

  private static final long COMMUNITY_ID = 1;

  private List<CommunityConfigUpdateCmd> cmds;
  private Community community;

  @InjectMocks
  private CommunityConfigGatewayImpl configGtwy;

  @Mock
  private JpaRepository repo;

  @Mock
  private CommunityGateway communityGtwy;

  @Mock
  private SmuCommunityClientGateway smuCommunityGtwy;

  @Before
  public void setUp() {
    cmds = new ArrayList<>();
    community = new Community();
    community.setId(COMMUNITY_ID);

    CommunityConfigUpdateCmd updateConfigCmd = new CommunityConfigUpdateCmd();
    updateConfigCmd.setConfKey(""config_name1"");
    updateConfigCmd.setConfValue(""config_value1"");
    cmds.add(updateConfigCmd);

    updateConfigCmd = new CommunityConfigUpdateCmd();
    updateConfigCmd.setConfKey(""config_name2"");
    updateConfigCmd.setConfValue(""config_value2"");
    cmds.add(updateConfigCmd);
  }

  @Test
  public void testUpdateCommunityConfigMigrated() {
    community.setMigrated(true);
    List<CommunityConfig> configs = Arrays.asList(new CommunityConfig(1L, ""config_name1"", ""config_value"", community),
        new CommunityConfig(2L, ""config_name2"", ""config_value"", community));
    when(communityGtwy.findCommunityById(COMMUNITY_ID)).thenReturn(Optional.of(community));
    when(repo.findByCommunity(eq(COMMUNITY_ID),
        eq(cmds.stream().map(CommunityConfigUpdateCmd::getConfKey).collect(toList())))).thenReturn(configs);
    when(repo.save(configs.get(0))).thenReturn(configs.get(0));
    when(repo.save(configs.get(1))).thenReturn(configs.get(1));
    when(smuCommunityGtwy.updateCommunityConfigs(anyLong(), anyList())).thenReturn(configs);

    List<CommunityConfig> communityCfgs = configGtwy.updateCommunityConfigs(COMMUNITY_ID, cmds);
    verify(repo, times(2)).save(any(CommunityConfig.class));
    verify(smuCommunityGtwy, times(1)).updateCommunityConfigs(anyLong(), anyList());
    assertThat(communityCfgs).isNotNull();
    assertThat(communityCfgs.get(0).getConfKey()).isEqualTo(configs.get(0).getConfKey());
    assertThat(communityCfgs.get(0).getConfValue()).isEqualTo(configs.get(0).getConfValue());
    assertThat(communityCfgs.get(1).getConfKey()).isEqualTo(configs.get(1).getConfKey());
    assertThat(communityCfgs.get(1).getConfValue()).isEqualTo(configs.get(1).getConfValue());
  }

  @Test
  public void testUpdateCommunityConfigNotMigrated() {
    community.setMigrated(false);
    List<CommunityConfig> configs = Arrays.asList(new CommunityConfig(1L, ""config_name1"", ""config_value"", community),
        new CommunityConfig(2L, ""config_name2"", ""config_value"", community));
    when(communityGtwy.findCommunityById(COMMUNITY_ID)).thenReturn(Optional.of(community));
    when(smuCommunityGtwy.updateCommunityConfigs(anyLong(), anyList())).thenReturn(configs);

    List<CommunityConfig> communityCfgs = configGtwy.updateCommunityConfigs(COMMUNITY_ID, cmds);
    verify(repo, times(0)).save(any(CommunityConfig.class));
    verify(smuCommunityGtwy, times(1)).updateCommunityConfigs(anyLong(), anyList());
    assertThat(communityCfgs).isNotNull();
    assertThat(communityCfgs.get(0).getConfKey()).isEqualTo(configs.get(0).getConfKey());
    assertThat(communityCfgs.get(0).getConfValue()).isEqualTo(configs.get(0).getConfValue());
    assertThat(communityCfgs.get(1).getConfKey()).isEqualTo(configs.get(1).getConfKey());
    assertThat(communityCfgs.get(1).getConfValue()).isEqualTo(configs.get(1).getConfValue());
  }

  @Test
  public void testFindByIdCommunityConfigNotFound() {
    when(configGtwy.findById(anyLong())).thenReturn(Optional.empty());

    Optional<CommunityConfig> communityConfig = configGtwy.findById(COMMUNITY_ID);

    assertThat(communityConfig.isPresent()).isFalse();
    verify(repo).findById(anyLong());
  }

  @Test
  public void testFindByIdCommunityConfigFound() {
    CommunityConfig cf = new CommunityConfig();

    when(configGtwy.findById(anyLong())).thenReturn(Optional.of(cf));

    Optional<CommunityConfig> communityConfig = configGtwy.findById(COMMUNITY_ID);

    assertThat(communityConfig.isPresent()).isTrue();
    assertThat(communityConfig.get()).isEqualTo(cf);
    verify(repo).findById(anyLong());
  }

  @Test
  public void testFindByCommunityListCommunityConfigEmpty() {
    when(configGtwy.findByCommunity(anyLong())).thenReturn(Collections.emptyList());

    List<CommunityConfig> communityConfigs = configGtwy.findByCommunity(COMMUNITY_ID);

    assertThat(communityConfigs.isEmpty()).isTrue();
    verify(repo).findByCommunity(anyLong());
  }

  @Test
  public void testFindByCommunityListCommunityConfigNoEmpty() {
    List<CommunityConfig> configs = Arrays.asList(new CommunityConfig(), new CommunityConfig());

    when(configGtwy.findByCommunity(anyLong())).thenReturn(configs);

    List<CommunityConfig> communityConfigs = configGtwy.findByCommunity(COMMUNITY_ID);

    assertThat(communityConfigs.isEmpty()).isFalse();
    assertThat(communityConfigs.size()).isEqualTo(configs.size());
    verify(repo).findByCommunity(anyLong());
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/community/model/CommunityTest.java,"package com.globant.os.accounts.component.community.model;

import static org.assertj.core.api.Java6Assertions.assertThat;

import java.time.ZoneId;
import java.util.stream.Stream;
import org.junit.Test;

public class CommunityTest {

  @Test
  public void testToString() {
    assertThat(new Community(""c1"").toString()).isEqualTo(""Community(id=null, name=c1)"");
  }

  @Test
  public void testTimeZonesFitInColumn() {
    assertFitInColumn(ZoneId.getAvailableZoneIds().stream(), Community.TIME_ZONE_MAX_LENGTH);
  }

  static void assertFitInColumn(Stream<String> values, int maxValue) {
    assertThat(values.mapToInt(String::length).reduce(Math::max).orElse(0)).isLessThanOrEqualTo(maxValue);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/community/service/MemberPropertyDefinitionServiceImplTest.java,"package com.globant.os.accounts.component.community.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.AdditionalAnswers.returnsFirstArg;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.globant.os.accounts.component.community.io.gateway.CommunityGatewayImpl;
import com.globant.os.accounts.component.community.io.gateway.MemberPropertyDefinitionGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition.Type;
import com.globant.os.accounts.component.community.service.MemberPropertyDefinitionService.PropertyUpdateCmd;
import com.globant.os.accounts.support.web.BusinessException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MemberPropertyDefinitionServiceImplTest {

  private static final long COMMUNITY_ID = 1;

  private PropertyUpdateCmd propertyUpdateCmd;
  private List<PropertyUpdateCmd> cmds;
  private Community community;

  @InjectMocks
  private MemberPropertyDefinitionServiceImpl service;

  @Mock
  private MemberPropertyDefinitionGateway gtwy;

  @Mock
  private CommunityGatewayImpl communityGtwy;

  @Before
  public void setUp() {
    cmds = new ArrayList<>();
    community = new Community();
    community.setId(COMMUNITY_ID);
    propertyUpdateCmd = new PropertyUpdateCmd();
    propertyUpdateCmd.setId(1L);
    propertyUpdateCmd.setDescription(""This is a test description"");
    propertyUpdateCmd.setName(""street"");
    propertyUpdateCmd.setType(Type.TEXT);
    cmds.add(propertyUpdateCmd);
  }

  @Test
  public void testUpdateComunityProperties() {
    when(gtwy.update(any(MemberPropertyDefinition.class))).thenAnswer(returnsFirstArg());
    when(communityGtwy.findById(COMMUNITY_ID)).thenReturn(Optional.of(community));
    when(gtwy.findById(1L))
        .thenReturn(new MemberPropertyDefinition(community, ""street"", Type.TEXT, ""This is a test description""));
    MemberPropertyDefinition memberPropertyUpdated = service.update(COMMUNITY_ID, cmds).stream().findFirst().get();
    verify(gtwy).update(memberPropertyUpdated);
    assertThat(memberPropertyUpdated).isNotNull();
    assertThat(memberPropertyUpdated.getDescription()).isEqualTo(propertyUpdateCmd.getDescription());
    assertThat(memberPropertyUpdated.getType()).isEqualTo(propertyUpdateCmd.getType());
    assertThat(memberPropertyUpdated.getName()).isEqualTo(propertyUpdateCmd.getName());
  }

  @Test(expected = BusinessException.class)
  public void testInvalidCommunity() {
    service.update(COMMUNITY_ID, cmds);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/community/service/CommunityConfigServiceImplTest.java,"package com.globant.os.accounts.component.community.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.globant.os.accounts.component.community.io.gateway.CommunityConfigGatewayImpl;
import com.globant.os.accounts.component.community.io.gateway.CommunityGatewayImpl;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityConfig;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigCreationCmd;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigUpdateCmd;
import com.globant.os.accounts.external.smu.io.gateway.SmuCommunityClientGatewayImpl;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.BusinessException;
import com.globant.os.accounts.support.web.FindResult;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class CommunityConfigServiceImplTest {

  private static final long COMMUNITY_ID = 1;

  private List<CommunityConfigUpdateCmd> cmds;
  private List<CommunityConfigCreationCmd> cmdsCreate;
  private Community community;

  @Rule
  public ExpectedException expectedException = ExpectedException.none();

  @InjectMocks
  private CommunityConfigServiceImpl service;

  @Mock
  private CommunityConfigGatewayImpl configGtwy;

  @Mock
  private CommunityGatewayImpl communityGtwy;

  @Mock
  private SmuCommunityClientGatewayImpl smuCommunityGateway;

  @Before
  public void setUp() {
    cmds = new ArrayList<>();
    cmdsCreate = new ArrayList<>();
    community = new Community();
    community.setId(COMMUNITY_ID);

    CommunityConfigUpdateCmd updateConfigCmd = new CommunityConfigUpdateCmd();
    updateConfigCmd.setConfKey(""config_name1"");
    updateConfigCmd.setConfValue(""config_value1"");
    cmds.add(updateConfigCmd);

    updateConfigCmd = new CommunityConfigUpdateCmd();
    updateConfigCmd.setConfKey(""config_name2"");
    updateConfigCmd.setConfValue(""config_value2"");
    cmds.add(updateConfigCmd);

    CommunityConfigCreationCmd creationConfigCmd = new CommunityConfigCreationCmd();
    creationConfigCmd.setConfKey(""config_name"");
    creationConfigCmd.setConfValue(""config_value"");
    cmdsCreate.add(creationConfigCmd);

    creationConfigCmd = new CommunityConfigCreationCmd();
    creationConfigCmd.setConfKey(""config_name2"");
    creationConfigCmd.setConfValue(""config_value2"");
    cmdsCreate.add(creationConfigCmd);
  }

  @Test
  public void testFindById() {
    CommunityConfig communityConfigExpected = new CommunityConfig(1L, ""config_name"", ""config_value"", community);
    when(configGtwy.findById(1L)).thenReturn(Optional.of(communityConfigExpected));
    CommunityConfig communityConfig = service.findById(COMMUNITY_ID).get();

    assertThat(communityConfig).isNotNull();
    assertThat(communityConfig.getConfKey()).isEqualTo(communityConfigExpected.getConfKey());
    assertThat(communityConfig.getConfValue()).isEqualTo(communityConfigExpected.getConfValue());
  }

  @Test
  public void testCreateComunityConfig() {
    List<CommunityConfig> configs = Arrays.asList(new CommunityConfig(1L, ""config_name"", ""config_value"", community),
        new CommunityConfig(2L, ""config_name2"", ""config_value"", community));
    when(configGtwy.save(anyList())).thenReturn(configs);
    when(communityGtwy.findById(COMMUNITY_ID)).thenReturn(Optional.of(community));
    List<CommunityConfig> communityCfgs = service.create(COMMUNITY_ID, cmdsCreate);
    verify(configGtwy).save(anyList());
    assertThat(communityCfgs).isNotNull();
    assertThat(communityCfgs.get(0).getConfKey()).isEqualTo(configs.get(0).getConfKey());
    assertThat(communityCfgs.get(0).getConfValue()).isEqualTo(configs.get(0).getConfValue());
    assertThat(communityCfgs.get(1).getConfKey()).isEqualTo(configs.get(1).getConfKey());
    assertThat(communityCfgs.get(1).getConfValue()).isEqualTo(configs.get(1).getConfValue());
  }

  @Test
  public void testCreateComunityConfigWithInvalidData() {
    when(communityGtwy.findById(COMMUNITY_ID)).thenReturn(Optional.of(community));
    when(configGtwy.save(anyList())).thenReturn(Arrays.asList());

    List<CommunityConfigCreationCmd> list = new ArrayList<>();
    CommunityConfigCreationCmd creationConfigCmd = new CommunityConfigCreationCmd();
    creationConfigCmd.setConfKey("""");
    creationConfigCmd.setConfValue("""");
    list.add(creationConfigCmd);

    creationConfigCmd = new CommunityConfigCreationCmd();
    creationConfigCmd.setConfKey(""config_name"");
    creationConfigCmd.setConfValue("""");
    list.add(creationConfigCmd);

    List<CommunityConfig> communityCfgs = service.create(COMMUNITY_ID, list);
    assertThat(communityCfgs).isNotNull();
    assertThat(communityCfgs.isEmpty()).isTrue();
  }

  @Test
  public void testInvalidCommunity() {
    expectedException.expect(BusinessException.class);
    expectedException.expectMessage(""Community not exist"");
    service.create(COMMUNITY_ID, cmdsCreate);
  }

  @Test
  public void testFindByCommunity() {
    FindResult<CommunityConfig> configs = new FindResult<>(
        Arrays.asList(new CommunityConfig(1L, ""config_name"", ""config_value"", community),
            new CommunityConfig(2L, ""config_name2"", ""config_value"", community)), 4);
    when(configGtwy.findByCommunity(anyLong(), any(BaseFindCmd.class))).thenReturn(configs);
    FindResult<CommunityConfig> communityCfgs = service.findByCommunity(COMMUNITY_ID, new BaseFindCmd());
    assertThat(communityCfgs).isNotNull();
    assertThat(communityCfgs.getValues().get(0).getConfKey()).isEqualTo(configs.getValues().get(0).getConfKey());
    assertThat(communityCfgs.getValues().get(0).getConfValue()).isEqualTo(configs.getValues().get(0).getConfValue());
    assertThat(communityCfgs.getValues().get(1).getConfKey()).isEqualTo(configs.getValues().get(1).getConfKey());
    assertThat(communityCfgs.getValues().get(1).getConfValue()).isEqualTo(configs.getValues().get(1).getConfValue());
    assertThat(communityCfgs.getTotalSize()).isEqualTo(4);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/component/community/service/MemberConfigServiceImplTest.java,"package com.globant.os.accounts.component.community.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.globant.os.accounts.component.community.io.gateway.MemberConfigGatewayImpl;
import com.globant.os.accounts.component.community.io.gateway.MemberGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.MemberId;
import com.globant.os.accounts.component.community.model.MemberConfig;
import com.globant.os.accounts.component.community.service.MemberConfigService.MemberConfigCreationCmd;
import com.globant.os.accounts.component.community.service.MemberConfigService.MemberConfigUpdateCmd;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.BusinessException;
import com.globant.os.accounts.support.web.FindResult;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MemberConfigServiceImplTest {

  private static final String LAST_NAME = ""Doe"";
  private static final String FIRST_NAME = ""Jhon"";
  private static final String LOGIN_ID = ""jhon.doe@gmail.com"";
  private static final String EXTERNAL_ID = ""1"";
  private static final int USER_ID = 1;
  private static final int COMMUNITY_ID = 1;

  @Rule
  public ExpectedException expectedException = ExpectedException.none();

  private List<MemberConfigUpdateCmd> cmds;
  private List<MemberConfigCreationCmd> cmdsCreate;
  private Member member;

  @InjectMocks
  private MemberConfigServiceImpl service;

  @Mock
  private MemberConfigService serviceMock;

  @Mock
  private MemberConfigGatewayImpl gtwy;

  @Mock
  private MemberGateway memberGtwy;

  @Spy
  private Community community = new Community(""Globant"");

  @Spy
  private OsUser user = new OsUser(FIRST_NAME, LAST_NAME);

  @Before
  public void setUp() {
    cmds = new ArrayList<>();
    cmdsCreate = new ArrayList<>();
    member = new Member(community, user, EXTERNAL_ID, LOGIN_ID);

    MemberConfigUpdateCmd updateConfigCmd = new MemberConfigUpdateCmd();
    updateConfigCmd.setId(1L);
    updateConfigCmd.setConfKey(""config_name1"");
    updateConfigCmd.setConfValue(""config_value1"");
    cmds.add(updateConfigCmd);

    updateConfigCmd = new MemberConfigUpdateCmd();
    updateConfigCmd.setId(2L);
    updateConfigCmd.setConfKey(""config_name2"");
    updateConfigCmd.setConfValue(""config_value2"");
    cmds.add(updateConfigCmd);

    MemberConfigCreationCmd creationConfigCmd = new MemberConfigCreationCmd();
    creationConfigCmd.setConfKey(""config_name"");
    creationConfigCmd.setConfValue(""config_value"");
    cmdsCreate.add(creationConfigCmd);

    creationConfigCmd = new MemberConfigCreationCmd();
    creationConfigCmd.setConfKey(""config_name2"");
    creationConfigCmd.setConfValue(""config_value2"");
    cmdsCreate.add(creationConfigCmd);
  }

  @Test
  public void testFindById() {
    MemberConfig memberConfigExpected = new MemberConfig(""config_name"", ""config_value"", member);
    when(gtwy.findById(1L)).thenReturn(Optional.of(memberConfigExpected));
    MemberConfig memberConfig = service.findById(1L).get();

    assertThat(memberConfig).isNotNull();
    assertThat(memberConfig.getConfKey()).isEqualTo(memberConfigExpected.getConfKey());
    assertThat(memberConfig.getConfValue()).isEqualTo(memberConfigExpected.getConfValue());
  }

  @Test
  public void testUpdateMemberConfig() {
    List<MemberConfig> configs = Arrays.asList(new MemberConfig(1L, ""config_name"", ""config_value"", member),
        new MemberConfig(2L, ""config_name2"", ""config_value"", member));
    when(gtwy.save(any(MemberConfig.class))).thenReturn(configs.get(0)).thenReturn(configs.get(1));
    when(gtwy.findByMember(any(MemberId.class), anyList())).thenReturn(configs);
    List<MemberConfig> memberCfgs = service.update(COMMUNITY_ID, USER_ID, cmds);
    verify(gtwy, times(2)).save(any(MemberConfig.class));
    assertThat(memberCfgs).isNotNull();
    assertThat(memberCfgs.get(0).getConfKey()).isEqualTo(configs.get(0).getConfKey());
    assertThat(memberCfgs.get(0).getConfValue()).isEqualTo(configs.get(0).getConfValue());
    assertThat(memberCfgs.get(1).getConfKey()).isEqualTo(configs.get(1).getConfKey());
    assertThat(memberCfgs.get(1).getConfValue()).isEqualTo(configs.get(1).getConfValue());
  }

  @Test
  public void testCreateMemberConfig() {
    List<MemberConfig> configs = Arrays.asList(new MemberConfig(1L, ""config_name"", ""config_value"", member),
        new MemberConfig(2L, ""config_name2"", ""config_value"", member));
    when(gtwy.save(anyList())).thenReturn(configs);
    when(memberGtwy.findMember(anyLong(), anyLong())).thenReturn(member);
    List<MemberConfig> communityCfgs = service.create(COMMUNITY_ID, USER_ID, cmdsCreate);
    verify(gtwy).save(anyList());
    assertThat(communityCfgs).isNotNull();
    assertThat(communityCfgs.get(0).getConfKey()).isEqualTo(configs.get(0).getConfKey());
    assertThat(communityCfgs.get(0).getConfValue()).isEqualTo(configs.get(0).getConfValue());
    assertThat(communityCfgs.get(1).getConfKey()).isEqualTo(configs.get(1).getConfKey());
    assertThat(communityCfgs.get(1).getConfValue()).isEqualTo(configs.get(1).getConfValue());
  }

  @Test
  public void testCreateMemberConfigWithInvalidData() {
    when(memberGtwy.findMember(anyLong(), anyLong())).thenReturn(member);
    when(gtwy.save(anyList())).thenReturn(Arrays.asList());

    List<MemberConfigCreationCmd> list = new ArrayList<>();
    MemberConfigCreationCmd creationConfigCmd = new MemberConfigCreationCmd();
    creationConfigCmd.setConfKey("""");
    creationConfigCmd.setConfValue("""");
    list.add(creationConfigCmd);

    creationConfigCmd = new MemberConfigCreationCmd();
    creationConfigCmd.setConfKey(""config_name"");
    creationConfigCmd.setConfValue("""");
    list.add(creationConfigCmd);

    List<MemberConfig> memberCfgs = service.create(COMMUNITY_ID, USER_ID, list);
    assertThat(memberCfgs).isNotNull();
    assertThat(memberCfgs.isEmpty()).isTrue();
  }

  @Test
  public void testInvalidMember() {
    when(serviceMock.create(COMMUNITY_ID, USER_ID, cmdsCreate)).thenThrow(BusinessException.class);
    expectedException.expect(BusinessException.class);
    serviceMock.create(COMMUNITY_ID, USER_ID, cmdsCreate);
  }

  @Test
  public void testFindByMember() {
    FindResult<MemberConfig> configs = new FindResult<>(
        Arrays.asList(new MemberConfig(1L, ""config_name"", ""config_value"", member),
            new MemberConfig(2L, ""config_name2"", ""config_value"", member)),
        4);
    when(gtwy.findByMember(any(MemberId.class), any(BaseFindCmd.class))).thenReturn(configs);
    FindResult<MemberConfig> memberCfgs = service.findByMember(COMMUNITY_ID, USER_ID, new BaseFindCmd());
    assertThat(memberCfgs).isNotNull();
    assertThat(memberCfgs.getValues().get(0).getConfKey()).isEqualTo(configs.getValues().get(0).getConfKey());
    assertThat(memberCfgs.getValues().get(0).getConfValue()).isEqualTo(configs.getValues().get(0).getConfValue());
    assertThat(memberCfgs.getValues().get(1).getConfKey()).isEqualTo(configs.getValues().get(1).getConfKey());
    assertThat(memberCfgs.getValues().get(1).getConfValue()).isEqualTo(configs.getValues().get(1).getConfValue());
    assertThat(memberCfgs.getTotalSize()).isEqualTo(4);
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/support/web/FindResultTest.java,"package com.globant.os.accounts.support.web;

import static org.assertj.core.api.Java6Assertions.assertThat;

import java.util.Arrays;
import java.util.List;
import org.junit.Test;

public class FindResultTest {

  @Test
  public void mapTest() {
    List<Integer> integerList = Arrays.asList(12, 4, 7, 9, 10);
    FindResult<Integer> findResult = new FindResult<Integer>(integerList, integerList.size());
    FindResult<String> findResultDouble = findResult.map(FindResultTest::toString);
    assertThat(findResultDouble.getTotalSize()).isEqualTo(5);

    List<String> resultList = findResultDouble.getValues();
    assertThat(resultList).asList().hasSize(5).contains(""12"", ""4"", ""7"", ""9"", ""10"");
  }

  public static String toString(Integer number) {
    return String.valueOf(number);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/support/web/OrderTest.java,"package com.globant.os.accounts.support.web;

import static org.assertj.core.api.Java6Assertions.assertThat;

import org.junit.Test;

public class OrderTest {

  @Test
  public void testFromString() {
    String text = ""fieldname:ASC"";
    Order order = Order.fromString(text);
    assertThat(order.getField()).isEqualTo(""fieldname"");
    assertThat(order.getDirection()).isEqualTo(Order.Direction.ASC);
  }

  @Test
  public void testToString() {
    assertThat(new Order(""fieldname"", Order.Direction.DESC).toString()).isEqualTo(""fieldname:DESC"");
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/support/aspect/TokenValidatorAspectTest.java,"package com.globant.os.accounts.support.aspect;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.globant.os.accounts.support.web.NotAuthorizedException;
import com.globant.smu.os.security.jwt.model.OsPermission;
import com.globant.smu.os.security.jwt.model.OsPrincipal;
import com.globant.smu.os.security.jwt.model.OsRole;
import com.globant.smu.os.security.jwt.model.Token;
import java.util.Arrays;
import java.util.List;
import org.aspectj.lang.ProceedingJoinPoint;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;

@RunWith(MockitoJUnitRunner.class)
public class TokenValidatorAspectTest {

  private long userId;
  private long communityId;
  private List<OsRole> roles;
  private List<OsPermission> permissions;
  private Token.Type tokenType;

  private ProceedingJoinPoint joinPoint = Mockito.mock(ProceedingJoinPoint.class);

  /**
   * setUp method.
   */
  @Before
  public void setupMock() {
    MockitoAnnotations.initMocks(this);
    userId = 1L;
    communityId = 1L;
    roles = Arrays.asList(new OsRole(""OS_APP""));
    permissions = Arrays.asList(new OsPermission(""example:read""));
    tokenType = Token.Type.APP;
    mockPrincipal();
  }

  @Test
  public void mockPrincipal() {
    OsPrincipal principal = new OsPrincipal(userId, communityId, roles, permissions, tokenType, null);
    Authentication authentication = mock(Authentication.class);
    SecurityContext securityContext = mock(SecurityContext.class);
    when(securityContext.getAuthentication()).thenReturn(authentication);
    SecurityContextHolder.setContext(securityContext);
    when(SecurityContextHolder.getContext().getAuthentication().getPrincipal()).thenReturn(principal);
  }

  @Test
  public void validateAppTokenIsWorking() {
    TokenValidatorAspect tokenValidatorAspect = new TokenValidatorAspect();
    tokenValidatorAspect.validateToken(joinPoint);
  }

  @Test
  public void validateUserTokenIsWorking() {
    userId = 1L;
    communityId = 1L;
    roles = Arrays.asList(new OsRole(""OS_ADMIN""));
    permissions = Arrays.asList(new OsPermission(""example:read""));
    tokenType = Token.Type.USER;
    mockPrincipal();
    when(joinPoint.getArgs()).thenReturn(new Object[] {1L});
    TokenValidatorAspect tokenValidatorAspect = new TokenValidatorAspect();
    tokenValidatorAspect.validateToken(joinPoint);
  }

  @Test
  public void validateUserTokenSuperAdminRoleIsWorking() {
    userId = 1L;
    communityId = 2L;
    roles = Arrays.asList(new OsRole(""OS_SUPER_ADMIN""));
    permissions = Arrays.asList(new OsPermission(""example:read""));
    tokenType = Token.Type.USER;
    mockPrincipal();
    ProceedingJoinPoint joinPoint = Mockito.mock(ProceedingJoinPoint.class);
    TokenValidatorAspect tokenValidatorAspect = new TokenValidatorAspect();
    tokenValidatorAspect.validateToken(joinPoint);
  }

  @Test
  public void validateUserTokenSuperAdminSameCommunityIdRoleIsWorking() {
    userId = 1L;
    communityId = 2L;
    roles = Arrays.asList(new OsRole(""OS_SUPER_ADMIN""));
    permissions = Arrays.asList(new OsPermission(""example:read""));
    tokenType = Token.Type.USER;
    mockPrincipal();
    TokenValidatorAspect tokenValidatorAspect = new TokenValidatorAspect();
    tokenValidatorAspect.validateToken(joinPoint);
  }

  @Test(expected = NotAuthorizedException.class)
  public void validateUserTokenIsNotWorking() {
    userId = 1L;
    communityId = 2L;
    roles = Arrays.asList(new OsRole(""OS_ADMIN""));
    permissions = Arrays.asList(new OsPermission(""example:read""));
    tokenType = Token.Type.USER;
    mockPrincipal();
    when(joinPoint.getArgs()).thenReturn(new Object[] {3L});
    TokenValidatorAspect tokenValidatorAspect = new TokenValidatorAspect();
    tokenValidatorAspect.validateToken(joinPoint);
  }

  @Test(expected = NotAuthorizedException.class)
  public void validateUserTokenWithoutCommunityIdInRequest() {
    userId = 1L;
    communityId = 2L;
    roles = Arrays.asList(new OsRole(""OS_ADMIN""));
    permissions = Arrays.asList(new OsPermission(""example:read""));
    tokenType = Token.Type.USER;
    mockPrincipal();
    when(joinPoint.getArgs()).thenReturn(new Object[] {});
    TokenValidatorAspect tokenValidatorAspect = new TokenValidatorAspect();
    tokenValidatorAspect.validateToken(joinPoint);
  }

  @Test(expected = NotAuthorizedException.class)
  public void validateUserTokenBadTypeCommunityId() {
    userId = 1L;
    communityId = 2L;
    roles = Arrays.asList(new OsRole(""OS_ADMIN""));
    permissions = Arrays.asList(new OsPermission(""example:read""));
    tokenType = Token.Type.USER;
    mockPrincipal();
    when(joinPoint.getArgs()).thenReturn(new Object[] {""String""});
    TokenValidatorAspect tokenValidatorAspect = new TokenValidatorAspect();
    tokenValidatorAspect.validateToken(joinPoint);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/external/smu/io/gateway/SmuMemberGatewayImplTest.java,"package com.globant.os.accounts.external.smu.io.gateway;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import com.globant.os.accounts.component.community.service.MemberService.MemberBaseFindCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberUpdatePropertyCmd;
import com.globant.os.accounts.config.BeanTestConfiguration;
import com.globant.os.accounts.external.shared.BaseClientTest;
import com.globant.os.accounts.external.smu.config.SmuMemberPropertiesConfig;
import com.globant.os.accounts.external.smu.model.SmuMemberDetailDto;
import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.Order;
import com.globant.smu.os.security.jwt.model.Token;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import okhttp3.HttpUrl;
import okhttp3.mockwebserver.RecordedRequest;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Spy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.SpyBean;
import org.springframework.context.annotation.Import;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@Import(BeanTestConfiguration.class)
public class SmuMemberGatewayImplTest extends BaseClientTest {

  private static final String PATH_JSON_FILE = ""smucommunity"" + File.separator;
  private static final String PATH_API_MEMBER = ""/v2/account/user/442?organizationId=1"";
  private static final String PATH_API_MEMBERS =
      ""/v2/account/users?organizationId=1&page=0&size=10&orderBy=identification&direction=ASC"";
  private static final String PATH_API_MEMBERS_WITH_ORDER =
      ""/v2/account/users?organizationId=1&page=1&size=11&orderBy=firstName&direction=ASC"";
  private static final String PATH_API_MEMBERS_EMPTY_RESULTS =
      ""/v2/account/users?organizationId=1&page=4&size=10&orderBy=identification&direction=ASC"";
  private static final String PATH_API_MEMBERS_BY_IDS = ""/v2/account/userByIds?organizationId=1&userIds=%5B1%2C442%5D"";
  private static final String PATH_API_MEMBER_CONFIG = ""/v2/account/user/1/metadata?organizationId=1"";
  private static final String PATH_API_MEMBER_DETAIL = ""/v2/admin/usersById?usersId=1,2,3"";
  private static final String PATH_API_MEMBER_BY_COMMUNITY =
      ""/v2/account/users?organizationId=1&page=1&size=10&orderBy=firstName&direction=ASC&searchString=admin"";
  private static final String PATH_API_UPDATE_MEMBER_STATUS = ""/v2/admin/updateUser/enabled"";
  private static final String PATH_API_UPDATE_MEMBER_PROPERTIES = ""/admin/updateUser/properties?o=ADMIN_WEB&v=1"";
  private static final List<String> LIST_APIS_LIST_MEMBERS = Arrays.asList(PATH_API_MEMBERS,
      PATH_API_MEMBERS_WITH_ORDER, PATH_API_MEMBERS_EMPTY_RESULTS, PATH_API_MEMBERS_BY_IDS,
      PATH_API_MEMBER_BY_COMMUNITY, PATH_API_MEMBER_DETAIL);

  @Autowired
  private SmuMemberClientGateway smuMemberGateway;

  @SpyBean
  private SmuMemberPropertiesConfig smuProperties;

  @Autowired
  private BeanTestConfiguration beanTestConfig;

  @Spy
  private Community community = new Community(""Globant"");

  @Override
  protected IMockResponseBuilder getIMockResponseBuilder() {
    return request -> {
      String json = getJsonOfApiMember(request);
      return buildMockResponseFromJson(json);
    };
  }

  @Before
  public void setUp() {
    community = new Community(""Globant"");
    community.setId(1L);

    Authentication authenticationMock = mock(Authentication.class);
    when(authenticationMock.getCredentials()).thenReturn(mock(Token.class));

    SecurityContext securityContextMock = mock(SecurityContext.class);
    when(securityContextMock.getAuthentication()).thenReturn(authenticationMock);
    SecurityContextHolder.setContext(securityContextMock);

    HttpUrl url = mockWebServer.url("""");
    when(beanTestConfig.getClientConfig().getServiceEndpoint())
        .thenReturn(url.toString().substring(0, url.toString().length() - 1));
  }

  @Test
  public void testGetMember() throws Exception {
    Optional<Member> member = smuMemberGateway.getMember(community, 442L);
    assertThat(member).isNotNull();
    assertThat(member.get().getId().getCommunity().getId()).isEqualTo(1);
    assertThat(member.get().getId().getUser().getId()).isEqualTo(442);
  }

  @Test
  public void testGetMembers() throws Exception {
    FindResult<Member> page = smuMemberGateway.getMembers(community, new MemberBaseFindCmd(""""));

    assertThat(page).isNotNull();
    assertThat(page.getValues().size()).isEqualTo(10);
    assertThat(page.getTotalSize()).isEqualTo(24);
    assertThat(page.getValues().get(0).getId().getUser().getId()).isEqualTo(423);
    assertThat(page.getValues().get(2).getId().getUser().getId()).isEqualTo(424);
  }

  @Test
  public void testGetMembersWithOrder() throws Exception {
    MemberBaseFindCmd baseFind = new MemberBaseFindCmd("""");
    baseFind.setPageNumber(2);
    baseFind.setPageSize(11);
    baseFind.setSort(Arrays.asList(Order.fromString(""firstName:ASC"")));
    FindResult<Member> page = smuMemberGateway.getMembers(community, baseFind);

    assertThat(page).isNotNull();
    assertThat(page.getValues().size()).isEqualTo(11);
    assertThat(page.getTotalSize()).isEqualTo(24);
    assertThat(page.getValues().get(0).getId().getUser().getId()).isEqualTo(432);
    assertThat(page.getValues().get(2).getId().getUser().getId()).isEqualTo(434);
  }

  @Test
  public void testGetMembersWithEmptyList() throws Exception {
    MemberBaseFindCmd baseFind = new MemberBaseFindCmd("""");
    baseFind.setPageNumber(5);
    FindResult<Member> page = smuMemberGateway.getMembers(community, baseFind);

    assertThat(page).isNotNull();
    assertThat(page.getValues().size()).isEqualTo(0);
    assertThat(page.getTotalSize()).isEqualTo(24);
    assertThat(page.getValues().isEmpty()).isTrue();
  }

  @Test
  public void testGetMembersByIds() {
    List<Member> listMembers = smuMemberGateway.getMembersByIds(community, 1, 442);

    assertThat(listMembers).isNotNull();
    assertThat(listMembers.get(0).getId().getUser().getId()).isEqualTo(442);
    assertThat(listMembers.get(1).getId().getUser().getId()).isEqualTo(1);
  }

  @Test
  public void testGetMemberConfig() {
    Map<String, String> mapConfigs = smuMemberGateway.getMemberConfig(1L, 1L);

    assertThat(mapConfigs).isNotNull();
    assertThat(mapConfigs.get(""tosRead"")).isEqualTo(""yes"");
    assertThat(mapConfigs.get(""customerMode"")).isEqualTo(""mode"");
    assertThat(mapConfigs.get(""key"")).isEqualTo(""value"");
  }

  @Test
  @Ignore
  public void testGetMemberDetails() {
    List<SmuMemberDetailDto> list = smuMemberGateway.getMembersDetail(""1,2,3"");

    assertThat(list).isNotNull();

    list.forEach(item -> {
      Assert.assertNotNull(item.getId());
    });
  }

  @Test
  public void testGetMembersByCommunitySortingByFirstNameAndFilteredByAdmin() throws Exception {
    MemberBaseFindCmd baseFind = new MemberBaseFindCmd(""admin"");
    baseFind.setPageNumber(2);
    baseFind.setPageSize(10);
    baseFind.setSort(Arrays.asList(Order.fromString(""firstName:ASC"")));

    FindResult<Member> page = smuMemberGateway.getMembers(community, baseFind);

    assertThat(page).isNotNull();
    assertThat(page.getValues().size()).isEqualTo(3);
    assertThat(page.getTotalSize()).isEqualTo(13);
    assertThat(page.getValues().get(0).getId().getUser().getId()).isEqualTo(347207);
    assertThat(page.getValues().get(1).getId().getUser().getId()).isEqualTo(33493);
    assertThat(page.getValues().get(2).getId().getUser().getId()).isEqualTo(363111);
  }

  @Test
  public void testUpdateMemberEnabled() {
    Member member = smuMemberGateway.enabledOrDisabled(community, 442L, true);
    assertThat(member.isEnabled()).isTrue();
  }

  @Test
  public void testUpdateMemberDisabled() {
    Member member = smuMemberGateway.enabledOrDisabled(community, 442L, false);
    assertThat(member.isEnabled()).isTrue();
  }

  @Test
  public void testUpdateMemberProperties() {
    when(smuProperties.getPathSaveMember()).thenReturn(PATH_API_UPDATE_MEMBER_PROPERTIES);
    MemberUpdatePropertyCmd cmd = new MemberUpdatePropertyCmd();
    cmd.setExternalId(""133351"");
    cmd.setLoginId(""LOGIN_ID"");
    cmd.setOfficeId(1020);
    cmd.setCustomField1(""CUSTOM_FIELD_1_PROPERTY"");

    List<PropertyValue> properties = smuMemberGateway.updateMemberProperties(community, 442, cmd);
    assertThat(properties).isNotNull();

    properties.stream().forEach(property -> {
      if (Community.LOGIN_ID_PROPERTY.equals(property.getProperty().getName())) {
        assertThat(property.getValue()).isEqualTo(""LOGIN_ID"");
      }

      if (Community.EXTERNAL_ID_PROPERTY.equals(property.getProperty().getName())) {
        assertThat(property.getValue()).isEqualTo(""133351"");
      }

      if (Community.OFFICE_ID_PROPERTY.equals(property.getProperty().getName())) {
        assertThat(property.getValue()).isEqualTo(""1020"");
      }

      if (Community.CUSTOM_FIELD_1_PROPERTY.equals(property.getProperty().getName())) {
        assertThat(property.getValue()).isEqualTo(""CUSTOM_FIELD_1_PROPERTY"");
      }
    });
  }

  private String getJsonOfApiMember(RecordedRequest request) {
    String json = null;
    if (LIST_APIS_LIST_MEMBERS.contains(request.getPath())) {
      json = getJsonOfListMembers(request);
    } else {
      json = getJsonOfMember(request);
    }
    return json;
  }

  private String getJsonOfListMembers(RecordedRequest request) {
    String json = null;
    switch (request.getPath()) {
      case PATH_API_MEMBERS:
        json = loadFile(PATH_JSON_FILE + ""smu-users-response.json"");
        break;
      case PATH_API_MEMBERS_WITH_ORDER:
        json = loadFile(PATH_JSON_FILE + ""smu-users-order-response.json"");
        break;
      case PATH_API_MEMBERS_EMPTY_RESULTS:
        json = loadFile(PATH_JSON_FILE + ""smu-users-empty-response.json"");
        break;
      case PATH_API_MEMBERS_BY_IDS:
        json = loadFile(PATH_JSON_FILE + ""smu-users-by-id-response.json"");
        break;
      case PATH_API_MEMBER_DETAIL:
        json = loadFile(PATH_JSON_FILE + ""smu-users-detail.json"");
        break;
      case PATH_API_MEMBER_BY_COMMUNITY:
        json = loadFile(PATH_JSON_FILE + ""smu-users-community.json"");
        break;
      default:
        throw new IllegalArgumentException(""Invalid path"");
    }
    return json;
  }

  private String getJsonOfMember(RecordedRequest request) {
    String json = null;
    switch (request.getPath()) {
      case PATH_API_MEMBER:
        json = loadFile(PATH_JSON_FILE + ""smu-user-response.json"");
        break;
      case PATH_API_MEMBER_CONFIG:
        json = loadFile(PATH_JSON_FILE + ""smu-user-metada.json"");
        break;
      case PATH_API_UPDATE_MEMBER_STATUS:
        json = loadFile(PATH_JSON_FILE + ""smu-users-update-status.json"");
        break;
      case PATH_API_UPDATE_MEMBER_PROPERTIES:
        json = loadFile(PATH_JSON_FILE + ""smu-users-update-properties.json"");
        break;
      default:
        throw new IllegalArgumentException(""Invalid path"");
    }
    return json;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/external/smu/io/gateway/pagination/PaginationTest.java,"package com.globant.os.accounts.external.smu.io.gateway.pagination;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class PaginationTest {

  @Mock
  private FunctionPaginator<String> mockFunctionPaginator;

  /**
   * Test method for get data of list
   * {@link com.globant.os.accounts.external.smu.io.gateway.pagination.Pagination#getData}
   */
  @Test
  public void testGetData() {
    Pagination.<String>getData(new Filter(1, 5), mockFunctionPaginator);
    verifyCallGetData(1, 5);
  }

  /**
   * Test method for get data of list with default sizePage
   * {@link com.globant.os.accounts.external.smu.io.gateway.pagination.Pagination#getData}
   */
  @Test
  public void testGetDataPageSizeDefault() {
    Pagination.<String>getData(new Filter(2), mockFunctionPaginator);
    verifyCallGetData(2, 10);
  }

  /**
   * Test method for get data of list with filter default
   * {@link com.globant.os.accounts.external.smu.io.gateway.pagination.Pagination#getData}
   */
  @Test
  public void testGetDataDefaultFilter() {
    Pagination.<String>getData(null, mockFunctionPaginator);
    verifyCallGetData(0, 10);
  }

  /**
   * Test method for get data of list with default sizePage and page
   * {@link com.globant.os.accounts.external.smu.io.gateway.pagination.Pagination#getData}
   */
  @Test
  public void testGetDataDefaultValues() {
    Pagination.<String>getData(new Filter(), mockFunctionPaginator);
    verifyCallGetData(0, 10);
  }

  /**
   * Verify the called method of interface
   * @param numberPage
   * @param sizePage
   */
  private void verifyCallGetData(int numberPage, int sizePage) {
    ArgumentCaptor<Filter> argument = ArgumentCaptor.forClass(Filter.class);
    verify(mockFunctionPaginator).execute(argument.capture());
    assertThat(argument.getValue().getNumberPage()).isEqualTo(numberPage);
    assertThat(argument.getValue().getSizePage()).isEqualTo(sizePage);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/external/smu/model/SmuMemberDtoTest.java,"package com.globant.os.accounts.external.smu.model;

import static java.util.Objects.nonNull;
import static org.assertj.core.api.Assertions.assertThat;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import java.util.Map;
import java.util.stream.Collectors;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class SmuMemberDtoTest {

  @Test
  public void smuMemberDtoPropertyNull() {
    Community community = SmuOrganizationDto.toModel(modelCommunity());
    SmuMemberDto dto = modelSmu();
    Member member = SmuMemberDto.toModel(dto, community);
    Map<Object, Object> properties = member.getProperties().stream()
        .collect(Collectors.toMap(e -> e.getProperty().getName(), PropertyValue::getValue));

    assertThat(nonNull(properties.get(""job""))).isEqualTo(false);

  }

  private SmuMemberDto modelSmu() {
    SmuMemberDto dto = new SmuMemberDto();
    dto.setId(1L);
    dto.setFirstName(""name"");
    dto.setLastName(""last"");
    dto.setEmail(""email"");
    dto.setProfileImageId(""profile"");
    dto.setProfileImageCode(""image"");
    dto.setEnabled(false);
    dto.setIdentification(""loginId"");
    dto.setJob(null);
    dto.setSeniority(null);
    dto.setArea(null);
    dto.setAccount(null);
    SmuLanguageDto smuLanguageDto = new SmuLanguageDto();
    smuLanguageDto.setCode(""1"");
    dto.setLanguage(smuLanguageDto);

    return dto;
  }

  private SmuOrganizationDto modelCommunity() {
    SmuOrganizationDto dto = new SmuOrganizationDto();
    dto.setCategory(1L);
    dto.setId(3);
    dto.setName(""Globant"");
    dto.setEnabled(true);
    dto.setImageId(""123"");
    dto.setNegativeImageCode(""123"");
    SmuLanguageDto smuLanguageDto = new SmuLanguageDto();
    smuLanguageDto.setCode(""es"");
    smuLanguageDto.setId(1L);
    smuLanguageDto.setName(""es"");
    dto.setLanguage(smuLanguageDto);

    return dto;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/external/smu/model/SmuOrganizationDtoTest.java,"package com.globant.os.accounts.external.smu.model;

import static org.assertj.core.api.Assertions.assertThat;

import com.globant.os.accounts.component.community.model.Community;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class SmuOrganizationDtoTest {

  @Test
  public void testToModelDefaultLocale() {
    Community community = SmuOrganizationDto.toModel(model());
    String locales = null;
    for (Locale local : community.getLocales()) {
      locales = local.getLanguage();
    }
    assertThat(locales).isEqualTo(""es"");
  }

  @Test
  public void testToModelAddNewLocaleToListLocales() {

    Community community = SmuOrganizationDto.toModel(listLocales());

    assertThat(community.getLocales().size()).isEqualTo(2);
  }

  private SmuOrganizationDto listLocales() {
    SmuOrganizationDto dto = new SmuOrganizationDto();
    dto.setCategory(1L);
    dto.setId(3);
    dto.setName(""Globant"");
    dto.setEnabled(true);
    dto.setImageId(""123"");
    dto.setNegativeImageCode(""123"");
    SmuLanguageDto smuLanguageDto = new SmuLanguageDto();
    smuLanguageDto.setCode(""es"");
    smuLanguageDto.setId(1L);
    smuLanguageDto.setName(""es"");
    dto.setLanguage(smuLanguageDto);

    SmuLanguageDto smuLanguageDto2 = new SmuLanguageDto();
    smuLanguageDto2.setCode(""en"");
    smuLanguageDto2.setId(1L);
    smuLanguageDto2.setName(""en"");

    List<SmuLanguageMetadataDto> listLocales = new ArrayList<>();

    SmuLanguageMetadataDto smuLanguageMetadataDto = new SmuLanguageMetadataDto();
    smuLanguageMetadataDto.setLanguage(smuLanguageDto2);
    listLocales.add(smuLanguageMetadataDto);
    dto.setLanguages(listLocales);

    return dto;
  }

  private SmuOrganizationDto model() {
    SmuOrganizationDto dto = new SmuOrganizationDto();
    dto.setCategory(1L);
    dto.setId(3);
    dto.setName(""Globant"");
    dto.setEnabled(true);
    dto.setImageId(""123"");
    dto.setNegativeImageCode(""123"");
    SmuLanguageDto smuLanguageDto = new SmuLanguageDto();
    smuLanguageDto.setCode(""es"");
    smuLanguageDto.setId(1L);
    smuLanguageDto.setName(""es"");
    dto.setLanguage(smuLanguageDto);

    return dto;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/external/shared/BaseClientTest.java,"package com.globant.os.accounts.external.shared;

import java.io.IOException;
import java.io.InputStream;
import okhttp3.mockwebserver.Dispatcher;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import org.apache.commons.io.IOUtils;
import org.junit.After;
import org.junit.Before;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class, MockitoTestExecutionListener.class})
@ActiveProfiles(""test"")
public abstract class BaseClientTest {

  protected MockWebServer mockWebServer;

  @Before
  public void setup() throws Exception {
    mockWebServer = new MockWebServer();

    final Dispatcher dispatcher = new Dispatcher() {

      @Override
      public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
        return getIMockResponseBuilder().buildMockResponse(request);
      }
    };

    mockWebServer.setDispatcher(dispatcher);
    mockWebServer.start();
  }

  @After
  public void tearDown() throws IOException {
    mockWebServer.shutdown();
  }

  protected String loadFile(String fileName) {
    ClassLoader classLoader = BaseClientTest.class.getClassLoader();
    InputStream is = classLoader.getResourceAsStream(fileName);
    try {
      return IOUtils.toString(is, ""UTF-8"");
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  protected MockResponse buildMockResponseFromJson(String json, int responseCode) {
    return buildMockResponseFromJson(json).setResponseCode(responseCode);
  }

  protected MockResponse buildMockResponseFromJson(String json) {
    return new MockResponse().addHeader(""Content-Type"", ""application/json; charset=utf-8"")
                    .addHeader(""Cache-Control"", ""no-cache"").setBody(json);
  }

  protected abstract IMockResponseBuilder getIMockResponseBuilder();

  public interface IMockResponseBuilder {
    MockResponse buildMockResponse(RecordedRequest request);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/external/shared/ClientConfigurationTest.java,"package com.globant.os.accounts.external.shared;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.Test;

public class ClientConfigurationTest {

  private static final String SERVICE_ENDPOINT = ""serviceEndpoint"";

  /**
   * Test method for build ClientConfiguration
   * {@link com.globant.os.accounts.component.shared.io.util.client
   * ClientConfiguration#ClientConfiguration(String, EndpointType, int, int)}
   */
  @Test
  public void  testBuildClientConfiguration() {
    ClientConfiguration clientConfiguration = new ClientConfiguration(SERVICE_ENDPOINT, 5, 10);

    assertThat(clientConfiguration.getServiceEndpoint()).isEqualTo(SERVICE_ENDPOINT);
    assertThat(clientConfiguration.getConnectionTimeout()).isEqualTo(5);
    assertThat(clientConfiguration.getSocketTimeout()).isEqualTo(10);
  }

  /**
   * Test method for build ClientConfiguration setting data
   * {@link com.globant.os.accounts.external.shared.ClientConfiguration#ClientConfiguration()}
   */
  @Test
  public void  testBuildClientConfigurationSettingData() {
    ClientConfiguration clientConfiguration = new ClientConfiguration();
    clientConfiguration.setServiceEndpoint(SERVICE_ENDPOINT);
    clientConfiguration.setConnectionTimeout(8);
    clientConfiguration.setSocketTimeout(20);

    assertThat(clientConfiguration.getServiceEndpoint()).isEqualTo(SERVICE_ENDPOINT);
    assertThat(clientConfiguration.getConnectionTimeout()).isEqualTo(8);
    assertThat(clientConfiguration.getSocketTimeout()).isEqualTo(20);
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/test/java/com/globant/os/accounts/external/shared/CredentialsTest.java,"package com.globant.os.accounts.external.shared;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import org.junit.Test;

public class CredentialsTest {

  private static final String SECRET_KEY = ""secretKey"";
  private static final String ACCES_KEY = ""accesKey"";

  /**
   * Test method for build Credentials
   * {@link com.globant.os.accounts.external.shared.Credentials#Credentials(String, String)}
   */
  @Test
  public void testBuildCredentials() {
    Credentials credentials = new Credentials(ACCES_KEY, SECRET_KEY);

    assertThat(credentials.getAccessKeyId()).isEqualTo(ACCES_KEY);
    assertThat(credentials.getSecretKey()).isEqualTo(SECRET_KEY);
    assertThat(credentials.getApiToken()).isNull();
  }

  /**
   * Test method for build Credentials, throw IllegalArgumentException on wrong parameters.
   * {@link com.globant.os.accounts.external.shared.Credentials#Credentials(String, String)}
   */
  @Test
  public void testBuildCredentialsInvalid() {
    assertThatThrownBy(() -> new Credentials(null, SECRET_KEY), ""Secret key is wrong"")
      .isInstanceOf(IllegalArgumentException.class);
    assertThatThrownBy(() -> new Credentials(ACCES_KEY, null), ""Acces key is wrong"")
      .isInstanceOf(IllegalArgumentException.class);
  }

  /**
   * Test method for build Credentials, throw IllegalArgumentException on wrong apiToken.
   * {@link com.globant.smu.os.accounts.external.shared.clients.Credentials#Credentials(String)}
   */
  @Test
  public void testBuildCredentialsApiTokenInvalid() {
    assertThatThrownBy(() -> new Credentials(null), ""Api token is wrong"")
      .isInstanceOf(IllegalArgumentException.class);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/constants/ConstantIt.java,"package com.globant.os.accounts.constants;

/**
 * Created by mayank.chaurasia on 24-10-2018.
 */
public class ConstantIt {

  public enum KeyName {
    COMMUNITY_ID(""communityId""),
    UPLOADER_ID(""uploaderId""),
    USER_ID(""userId""),
    GROUP_ID(""groupId""),
    LOGIN_ID(""loginId"");
    private final String name;

    KeyName(String name) {
      this.name = name;
    }

    public String getName() {
      return name;
    }

  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/ext/restdocs/RestDocs.java,"package com.globant.os.accounts.ext.restdocs;

import static java.util.Objects.requireNonNull;

import java.util.function.Predicate;
import org.springframework.restdocs.operation.OperationRequest;
import org.springframework.restdocs.operation.OperationResponse;
import org.springframework.restdocs.operation.preprocess.OperationPreprocessor;

/**
 * Utility methods for Spring REST Docs.
 *
 * @author osvaldo
 *
 */
public class RestDocs {

  private RestDocs() {
    throw new IllegalStateException(""Utility class"");
  }

  public static ConditionalOperationPreprocessorBuilder checkRequest(Predicate<OperationRequest> predicate) {
    return new ConditionalOperationPreprocessorBuilder(predicate, x -> false);
  }

  public static ConditionalOperationPreprocessorBuilder checkResponse(Predicate<OperationResponse> predicate) {
    return new ConditionalOperationPreprocessorBuilder(x -> false, predicate);
  }

  public static class ConditionalOperationPreprocessorBuilder {

    private final Predicate<OperationRequest> requestPred;
    private final Predicate<OperationResponse> responsePred;

    ConditionalOperationPreprocessorBuilder(Predicate<OperationRequest> requestPred,
        Predicate<OperationResponse> responsePred) {

      this.requestPred = requireNonNull(requestPred, ""requestPred"");
      this.responsePred = requireNonNull(responsePred, ""responsePred"");
    }

    public OperationPreprocessor then(OperationPreprocessor delegate) {

      return new OperationPreprocessor() {

        @Override
        public OperationRequest preprocess(OperationRequest request) {
          return requestPred.test(request) ? delegate.preprocess(request) : request;
        }

        @Override
        public OperationResponse preprocess(OperationResponse response) {
          return responsePred.test(response) ? delegate.preprocess(response) : response;
        }
      };
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/group/io/web/v2/GroupQueryControllerIt.java,"package com.globant.os.accounts.component.group.io.web.v2;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.restdocs.payload.JsonFieldType.ARRAY;
import static org.springframework.restdocs.payload.JsonFieldType.BOOLEAN;
import static org.springframework.restdocs.payload.JsonFieldType.NUMBER;
import static org.springframework.restdocs.payload.JsonFieldType.STRING;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.pathParameters;
import static org.springframework.restdocs.request.RequestDocumentation.requestParameters;
import static org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.document;

import com.fasterxml.jackson.core.type.TypeReference;
import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupMemberUserBasic;
import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupQueriesResponse;
import com.globant.os.accounts.component.group.model.GroupCreationResponse;
import com.globant.os.accounts.component.group.model.GroupOrigin;
import com.globant.os.accounts.component.group.model.GroupType;
import com.globant.os.accounts.component.group.model.GroupVisibility;
import com.globant.os.accounts.component.group.service.GroupService;
import com.globant.os.accounts.component.group.service.GroupService.GroupCreationRequest;
import com.globant.os.accounts.component.group.service.GroupService.GroupMemberAddingRequest;
import com.globant.os.accounts.component.shared.io.web.BaseControllerIt;
import com.globant.os.accounts.component.shared.model.Schema;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import com.globant.os.accounts.constants.ConstantIt;
import io.restassured.response.Response;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.apache.http.HttpStatus;
import org.flywaydb.test.annotation.FlywayTest;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.restdocs.payload.ResponseFieldsSnippet;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@Ignore
public class GroupQueryControllerIt extends BaseControllerIt {

  private static final TypeReference<ResponseBody<GroupMemberUserBasic[]>> GROUP_MEMBER_USER_REF =
      new TypeReference<ResponseBody<GroupMemberUserBasic[]>>() { };

  private static final TypeReference<ResponseBody<GroupQueriesResponse[]>> GROUP_REF =
      new TypeReference<ResponseBody<GroupQueriesResponse[]>>() { };

  @Autowired
  private GroupService groupService;

  private long communityId;
  private List<String> roles;
  private GroupCreationResponse parent;
  private GroupCreationResponse child;
  private GroupCreationRequest groupParentCreationRequest;
  private GroupCreationRequest groupChildCreationRequest;

  public GroupQueryControllerIt() {
    super(GroupQueryController.class);
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getMemberUsers() throws IOException {

    populateDataBases();
    Response getMembersResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), communityId)
        .pathParam(ConstantIt.KeyName.GROUP_ID.getName(), parent.getGroup().getId())
        .filter(document(""group-graph-queries-get-members-api"",
            pathParameters(param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id""),
                param(ConstantIt.KeyName.GROUP_ID.getName(), ""The group id"")),
            responseFieldsForMemberDetailsStatic()))
        .get(makeUrl(""/communities/{communityId}/groups/{groupId}/members""));

    assertThat(getMembersResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<GroupMemberUserBasic[]> response = readValue(getMembersResponse, GROUP_MEMBER_USER_REF);
    GroupMemberUserBasic[] groupMemberUserResponse = response.getResult();

    assertThat(groupMemberUserResponse.length).isEqualTo(4);
    assertThat(groupMemberUserResponse[0].getGroupId()).isEqualTo(1);

  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getGroupsByMember() throws IOException {

    populateDataBases();
    Response getGroupsResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), communityId).pathParam(""userId"", 4)
        .filter(document(""group-graph-queries-get-groups-by-member-api"",
            pathParameters(param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id""),
                param(""userId"", ""The user id"")),
            responseFieldsForGroupDetails()))
        .get(makeUrl(""/communities/{communityId}/users/{userId}/groups""));

    assertThat(getGroupsResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<GroupQueriesResponse[]> response = readValue(getGroupsResponse, GROUP_REF);
    GroupQueriesResponse[] groupResponse = response.getResult();

    assertThat(groupResponse.length).isEqualTo(2);
    assertThat(groupResponse[0].getId()).isEqualTo(2);

  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getLeadersByMember() throws IOException {

    populateDataBases();
    Response getMembersResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), communityId).pathParam(""userId"", 4)
        .filter(document(""group-graph-queries-get-leaders-api"",
            requestParameters(param(""roles"", ""For any case, it should be LEADER""),
                param(""direction"",
                    ""For find the leaders by user, it should be UP.""
                        + "" For find members led by leader, it should be DOWN."")),
            pathParameters(param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id""),
                param(""userId"",
                    ""The user led for the leaders list in result (direction : up).""
                        + "" The leader that leads the user list in the result (direction : down)."")),
            responseFieldsForMemberDetails()))
        .get(makeUrl(""/communities/{communityId}/users/{userId}/groups/members?roles=LEADER&direction=up""));

    assertThat(getMembersResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<GroupMemberUserBasic[]> response = readValue(getMembersResponse, GROUP_MEMBER_USER_REF);
    GroupMemberUserBasic[] groupMemberUserResponse = response.getResult();

    assertThat(groupMemberUserResponse.length).isEqualTo(2);
    assertThat(groupMemberUserResponse[0].getUserId()).isEqualTo(2);

  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getLeadersByMemberDepthException() throws IOException {

    populateDataBases();
    Response getMembersResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), communityId).pathParam(""userId"", 4)
        .filter(document(""group-graph-queries-get-leaders-api-depth-exception"",
            requestParameters(param(""depth"", ""For any case, it should be greater than 0 and less than 1001"")),
            pathParameters(param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id""),
                param(""userId"",
                    ""The user led for the leaders list in result (direction : up).""
                        + "" The leader that leads the user list in the result (direction : down)."")),
            responseFieldsForMemberDetailsException()))
        .get(makeUrl(""/communities/{communityId}/users/{userId}/groups/members?depth=-1""));

    assertThat(getMembersResponse.getStatusCode()).isEqualTo(HttpStatus.SC_BAD_REQUEST);
    Map<String, String> message = getMembersResponse.jsonPath().getMap(""$"");
    assertThat(message.get(""details"")).isEqualTo(""[Depth should be greater than or equal to 0 ""
        + ""and less than or equal to 1000]"");
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getLeadersByMemberDirectionException() throws IOException {

    populateDataBases();
    Response getMembersResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), communityId).pathParam(""userId"", 4)
        .filter(document(""group-graph-queries-get-leaders-api-direction-exception"",
            requestParameters(param(""direction"", ""For any case, it should be UP or DOWN"")),
            pathParameters(param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id""),
                param(""userId"",
                    ""The user led for the leaders list in result (direction : up).""
                        + "" The leader that leads the user list in the result (direction : down)."")),
            responseFieldsForMemberDetailsException()))
        .get(makeUrl(""/communities/{communityId}/users/{userId}/groups/members?direction=any""));

    assertThat(getMembersResponse.getStatusCode()).isEqualTo(HttpStatus.SC_BAD_REQUEST);
    Map<String, String> message = getMembersResponse.jsonPath().getMap(""$"");
    assertThat(message.get(""details"")).isEqualTo(""Direction should be 'UP' or 'DOWN'"");
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getLeadersByMemberGroupTypeException() throws IOException {

    populateDataBases();
    Response getMembersResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), communityId).pathParam(""userId"", 4)
        .filter(document(""group-graph-queries-get-leaders-api-group-type-exception"",
            requestParameters(param(""groupType"", ""For any case, it should be NONE or ORG"")),
            pathParameters(param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id""),
                param(""userId"",
                    ""The user led for the leaders list in result (direction : up).""
                        + "" The leader that leads the user list in the result (direction : down)."")),
            responseFieldsForMemberDetailsException()))
        .get(makeUrl(""/communities/{communityId}/users/{userId}/groups/members?groupType=any""));

    assertThat(getMembersResponse.getStatusCode()).isEqualTo(HttpStatus.SC_BAD_REQUEST);
    Map<String, String> message = getMembersResponse.jsonPath().getMap(""$"");
    assertThat(message.get(""details"")).isEqualTo(""[Group type should be 'ORG' or 'NONE']"");
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getLeadersByMemberRoleException() throws IOException {

    populateDataBases();
    Response getMembersResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), communityId).pathParam(""userId"", 4)
        .filter(document(""group-graph-queries-get-leaders-api-role-exception"",
            requestParameters(param(""roles"", ""For any case, it should be LEADER"")),
            pathParameters(param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id""),
                param(""userId"",
                    ""The user led for the leaders list in result (direction : up).""
                        + "" The leader that leads the user list in the result (direction : down)."")),
            responseFieldsForMemberDetailsException()))
        .get(makeUrl(""/communities/{communityId}/users/{userId}/groups/members?roles=any""));

    assertThat(getMembersResponse.getStatusCode()).isEqualTo(HttpStatus.SC_BAD_REQUEST);
    Map<String, String> message = getMembersResponse.jsonPath().getMap(""$"");
    assertThat(message.get(""details"")).isEqualTo(""[Role should be 'LEADER']"");
  }

  private void populateDataBases() {
    communityId = 1;
    roles = new ArrayList<String>();
    roles.add(Schema.ROLE_LEADER);
    roles.add(Schema.ROLE_MEMBER);

    groupParentCreationRequest = getRequestForPublicGroupCreation(""Test Group Parent"", ""Test Group Parent"");
    parent = groupService.create(communityId, groupParentCreationRequest);
    groupChildCreationRequest = getRequestForPublicGroupCreation(""Test Group Child"", ""Test Group Child"");
    child = groupService.create(communityId, groupChildCreationRequest);
    groupService.addMemberChildGroup(parent.getGroup().getId(), child.getGroup().getId());
    groupService.addMemberUser(parent.getGroup().getId(),
        Arrays.asList(getRequestForAddMemberUsersToGroup(1, roles), getRequestForAddMemberUsersToGroup(2, null)), true);
    groupService.addMemberUser(child.getGroup().getId(), Arrays.asList(getRequestForAddMemberUsersToGroup(2, roles),
        getRequestForAddMemberUsersToGroup(3, null), getRequestForAddMemberUsersToGroup(4, null)), true);
  }

  private GroupCreationRequest getRequestForPublicGroupCreation(String groupName, String description) {
    GroupCreationRequest request = new GroupCreationRequest();
    request.setName(groupName);
    request.setVisibility(GroupVisibility.PUBLIC.name());
    request.setDescription(description);
    request.setType(GroupType.NONE.name());
    request.setOrigin(GroupOrigin.SMU.name());
    return request;
  }

  private GroupMemberAddingRequest getRequestForAddMemberUsersToGroup(long userId, List<String> roles) {
    GroupMemberAddingRequest groupMemberAddingRequest = new GroupMemberAddingRequest();
    groupMemberAddingRequest.setUserId(userId);
    groupMemberAddingRequest.setRoles(roles);
    return groupMemberAddingRequest;
  }

  private static ResponseFieldsSnippet responseFieldsForMemberDetailsStatic() {
    return responseFields(field(""result.[].userId"", ""The user id""),
        field(""result.[].groupId"", ""The group id"").type(NUMBER).optional(),
        field(""result.[].roles"", ""The user roles"").type(ARRAY),
        field(""result.[].static"", ""It Indicates if a member was created dynamically or not"").type(BOOLEAN),
        field(""page.totalElements"", ""The number total of users""));
  }

  private static ResponseFieldsSnippet responseFieldsForMemberDetails() {
    return responseFields(field(""result.[].userId"", ""The user id""),
        field(""result.[].groupId"", ""The group id"").type(NUMBER).optional(),
        field(""result.[].roles"", ""The user roles"").type(ARRAY),
        field(""page.totalElements"", ""The number total of users""));
  }

  private static ResponseFieldsSnippet responseFieldsForMemberDetailsException() {
    return responseFields(field(""timestamp"", ""Error date""),
        field(""message"", ""Error message"").type(STRING).optional(),
        field(""details"", ""Error details"").type(STRING),
        field(""type"", ""Url""),
        field(""parameters"", ""Parameters""));
  }

  private static ResponseFieldsSnippet responseFieldsForGroupDetails() {
    return responseFields(field(""result.[].id"", ""The group id""), field(""result.[].name"", ""The group name""),
        field(""result.[].visibility"", ""The group visibility""), field(""result.[].description"", ""The group description""),
        field(""result.[].type"", ""The group type""), field(""page.totalElements"", ""The number total of groups""));
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/group/model/GroupFactory.java,"package com.globant.os.accounts.component.group.model;

import java.util.ArrayList;
import java.util.List;

public class GroupFactory {

  public static Group newGroup(String name) {
    Group group = new Group();
    group.setName(""Test group new name"");
    group.setDescription(""TestApp_group_new"");
    group.setMetadata(getMetadata(group));
    group.setVisibility(GroupVisibility.PUBLIC);
    return group;
  }

  private static List<GroupMetadata> getMetadata(Group group) {
    GroupMetadata metadata = new GroupMetadata();
    metadata.setAttributeValue(""description"");
    GroupMetadata.GroupMetadataId groupMetadataId = new GroupMetadata.GroupMetadataId();
    groupMetadataId.setGroup(group);
    groupMetadataId.setAttributeName(""attributeName"");
    metadata.setId(groupMetadataId);
    List<GroupMetadata> metadataList = new ArrayList<>();
    metadataList.add(metadata);
    return metadataList;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/user/model/UserFactory.java,"package com.globant.os.accounts.component.user.model;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class UserFactory {

  private UserFactory() {
    throw new IllegalStateException(""Utility class"");
  }

  public static OsUser newDefaultUser() {
    return newUser(""John"", ""Doe"", ""johndoe@gmail.com"", LocalDate.of(1967, 07, 17),
        ""30D840B674A5C868F9091EE8FE0F2268"", ""208-372-0110"");
  }

  public static List<OsUser> newUserList() {
    List<OsUser> users = new ArrayList<>();
    users.add(
        newUser(""Johny"", ""Deep"", ""johny.deep@gmail.com"", LocalDate.of(2000, 12, 11),
        ""5C900A2988ECC213956E6FCFDF4FA348"", ""734-842-1598""));
    users.add(
        newUser(""Johnatan"", ""Lopez"", ""johnatan.lopez@gmail.com"", LocalDate.of(1992, 02, 11),
        ""6B2529DBEC81269ED96098B4C6326060"", ""197-052-0230""));
    users.add(
        newUser(""John"", ""Doe"", ""johndoe@gmail.com"", LocalDate.of(1967, 07, 17),
        ""30D840B674A5C868F9091EE8FE0F2268"", ""208-372-0110""));
    users.add(
        newUser(""Johana"", ""Dante"", ""johana.dante@gmail.com"", LocalDate.of(1999, 01, 24),
        ""5C900A2988ECC213956E6FCFDF4FA348"", ""934-842-1598""));
    users.add(
        newUser(""Andrea"", ""Lahm"", ""andrea.lahm@gmail.com"", LocalDate.of(1970, 04, 27),
        ""A5A1558BF4957F3D56AA307E521AC8BE"", ""426-712-4627""));
    return users;
  }

  public static OsUser newUser(String firstName, String lastName, String email, LocalDate date,
      String image, String phone) {
    OsUser user = new OsUser(firstName, lastName);
    user.setId(new Random().nextLong());
    user.setBirthDate(date);
    user.setImage(image);
    return user;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/shared/io/web/BaseControllerIt.java,"package com.globant.os.accounts.component.shared.io.web;

import static com.globant.os.accounts.ext.restdocs.RestDocs.checkRequest;
import static com.globant.smu.os.security.jwt.util.TokenHelper.createInternalAppJwtToken;
import static io.restassured.RestAssured.given;
import static org.springframework.http.HttpMethod.GET;
import static org.springframework.http.HttpMethod.HEAD;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.modifyUris;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.prettyPrint;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.removeHeaders;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.request.RequestDocumentation.parameterWithName;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.restassured.http.Header;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Set;
import org.apache.tinkerpop.gremlin.orientdb.OrientGraph;
import org.apache.tinkerpop.gremlin.orientdb.OrientGraphFactory;
import org.flywaydb.test.FlywayTestExecutionListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.restdocs.RestDocsRestAssuredConfigurationCustomizer;
import org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.restdocs.payload.FieldDescriptor;
import org.springframework.restdocs.request.ParameterDescriptor;
import org.springframework.restdocs.restassured3.RestAssuredRestDocumentationConfigurer;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@AutoConfigureRestDocs
@TestExecutionListeners({ RestDocsTestExecutionListener.class, DependencyInjectionTestExecutionListener.class,
    FlywayTestExecutionListener.class, SqlScriptsTestExecutionListener.class })
@ActiveProfiles(""test"")
public abstract class BaseControllerIt {

  private static final String SCHEME = ""https"";
  private static final String HOST = ""api.starmeup.com"";
  private static final String AUTHORIZATION = ""Authorization"";
  private static final String SECRET_KEY = ""my-secret-token-to-change-in-production"";
  private static final String ISSUER = ""usa-aws"";
  private static final Set<String> ACLS_DEFAULT = new HashSet<>(
      Arrays.asList(""ROLE_SMU_USER"", ""ROLE_OS_ADMIN"", ""ROLE_OS_SUPER_ADMIN"", ""ROLE_OS_APP"", ""ROLE_SMU_ADMIN"",
          ""ROLE_SMU_SUPERADMIN"", ""PERMISSION_users:read""));
  private static final int MINS_EXP = 5;
  private static final String BEARER_FORMAT = ""Bearer %s"";

  @LocalServerPort
  protected int port;

  @Autowired
  protected RequestSpecification documentationSpec;

  @Autowired
  protected ObjectMapper mapper;

  @Value(""${server.servlet.context-path}"")
  private String contextPath;

  @Value(""${starmeup-api.token}"")
  private String smuApiToken;

  @Value(""${test.bad-token}"")
  private String exampleBadToken;

  @Autowired
  OrientGraphFactory graphFactory;

  private final Class<?> controllerClass;

  protected BaseControllerIt(Class<?> controllerClass) {
    this.controllerClass = controllerClass;
  }

  protected void truncateGraphData() {
    OrientGraph graph = graphFactory.getNoTx();
    graph.executeSql(""DELETE Edge E"");
    graph.executeSql(""DELETE Vertex V"");
  }

  protected String makeUrl() {
    return makeUrl("""");
  }

  protected String makeUrl(String methodPath) {
    return makeUrl(controllerClass, methodPath);
  }

  protected String makeUrl(Class<?> controllerClass, String methodPath) {
    StringBuilder pathBuilder = new StringBuilder();
    RequestMapping mapping = controllerClass.getAnnotation(RequestMapping.class);
    if (mapping != null) {
      String[] paths = mapping.path();
      if (paths.length > 0) {
        pathBuilder.append(paths[0]);
      }
    }
    return pathBuilder.append(methodPath).toString();
  }

  protected RequestSpecification givenDocSpecWithInternalAppToken() {
    Header header = new Header(AUTHORIZATION, ""Bearer "" + smuApiToken);
    return givenDocSpecWithHeader(header);
  }

  protected RequestSpecification givenDocSpecWithErrorInternalAppToken() {
    Header header = new Header(AUTHORIZATION, ""Bearer "" + exampleBadToken);
    return givenDocSpecWithHeader(header);
  }

  protected RequestSpecification givenDocSpecWithHeader(Header header) {
    return configure(given(documentationSpec)).header(header);
  }

  protected MultiValueMap<String, String> createHeaderInternalAppToken() {
    return createHeaderInternalAppToken(ACLS_DEFAULT, SECRET_KEY, ISSUER, LocalDateTime.now().plusMinutes(MINS_EXP));
  }

  protected MultiValueMap<String, String> createHeaderInternalAppToken(Set<String> acls, String secretKey,
      String issuer, LocalDateTime exp) {
    MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
    headers.put(AUTHORIZATION, Arrays.asList(createInternalAppToken(acls, secretKey, issuer, exp)));
    return headers;
  }

  private RequestSpecification configure(RequestSpecification spec) {
    return spec.port(port).contentType(MediaType.APPLICATION_JSON_VALUE).basePath(contextPath);
  }

  protected static ParameterDescriptor param(String name, String description) {
    return parameterWithName(name).description(description);
  }

  protected static FieldDescriptor field(String name, String description) {
    return fieldWithPath(name).description(description);
  }

  protected <T> T readValue(Response response,
          TypeReference<T> typeReference) throws IOException {
    return mapper.readValue(response.getBody().asString(), typeReference);
  }

  private String createInternalAppToken(Set<String> acls, String secretKey, String issuer, LocalDateTime exp) {
    return createBearerToken(createInternalAppJwtToken(acls, secretKey, issuer, exp));
  }

  private String createBearerToken(String token) {
    return String.format(BEARER_FORMAT, token);
  }

  @TestConfiguration
  static class CustomizationConfiguration implements RestDocsRestAssuredConfigurationCustomizer {

    private static final Set<HttpMethod> NO_CONTENT_REQUEST_METHODS = EnumSet.of(GET, HEAD);

    @Override
    public void customize(RestAssuredRestDocumentationConfigurer configurer) {
      configurer.operationPreprocessors()
          .withRequestDefaults(
              modifyUris().scheme(SCHEME).host(HOST).removePort(),
              checkRequest(req -> NO_CONTENT_REQUEST_METHODS.contains(req.getMethod()))
                .then(removeHeaders(""Content-Type"")),
              prettyPrint())
          .withResponseDefaults(
              prettyPrint());
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/community/io/web/v2/CommunityOperationControllerIt.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.restdocs.payload.JsonFieldType.NUMBER;
import static org.springframework.restdocs.payload.JsonFieldType.STRING;
import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.pathParameters;
import static org.springframework.restdocs.request.RequestDocumentation.requestParameters;
import static org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.document;

import com.globant.os.accounts.component.community.io.gateway.CommunityGateway;
import com.globant.os.accounts.component.community.io.gateway.MemberGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityFactory;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.component.community.service.CommunityOperationService.OperationCmd;
import com.globant.os.accounts.component.shared.io.web.BaseControllerIt;
import com.globant.os.accounts.component.user.io.gateway.UserGateway;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.model.UserFactory;
import com.globant.os.accounts.config.EmbeddedRedisTestConfiguration;
import com.globant.os.accounts.constants.ConstantIt;
import io.restassured.response.Response;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import org.apache.http.HttpStatus;
import org.flywaydb.test.annotation.FlywayTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener;
import org.springframework.context.annotation.Import;
import org.springframework.restdocs.payload.FieldDescriptor;
import org.springframework.restdocs.payload.RequestFieldsSnippet;
import org.springframework.restdocs.payload.ResponseFieldsSnippet;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;

@RunWith(SpringRunner.class)
@Import(EmbeddedRedisTestConfiguration.class)
@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class, MockitoTestExecutionListener.class })
public class CommunityOperationControllerIt extends BaseControllerIt {

  private static final long COMMUNITY_ID = 1;

  @Autowired
  CommunityGateway communityGateway;

  @Autowired
  UserGateway userGateway;

  @Autowired
  MemberGateway memberGateway;

  private static String resultField;

  public CommunityOperationControllerIt() {
    super(CommunityOperationController.class);
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void fullBulk() {
    Community community = communityGateway.save(getCommunity());
    List<OsUser> osUsers = userGateway.save(UserFactory.newUserList());
    IntStream.range(0, osUsers.size())
        .forEach(idx ->
            memberGateway.save(getMember(community, osUsers.get(idx), osUsers.get(idx).getFirstName() + idx)));

    Response bulkResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), COMMUNITY_ID)
        .body(getMemberBulkCmd())
        .filter(document(""partial-bulk"",
            pathParameters(
                param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id for the bulk"")),
            requestParameters(param(ConstantIt.KeyName.UPLOADER_ID.getName(), ""The uploader id for the bulk"")),
            requestFieldsForPartialBulk(),
            responseFieldForCommunityMemberDetails(true)))
        .post(makeUrl(""/{communityId}/operations/full?uploaderId=1""));

    assertThat(bulkResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void partialBulk() {
    Community community = communityGateway.save(getCommunity());
    List<OsUser> osUsers = userGateway.save(UserFactory.newUserList());
    IntStream.range(0, osUsers.size())
        .forEach(idx ->
            memberGateway.save(getMember(community, osUsers.get(idx), osUsers.get(idx).getFirstName() + idx)));

    Response bulkResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), COMMUNITY_ID)
        .body(getMemberBulkCmd())
        .filter(document(""partial-bulk"",
            pathParameters(
                param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id for the bulk"")),
            requestParameters(param(ConstantIt.KeyName.UPLOADER_ID.getName(), ""The uploader id for the bulk"")),
            requestFieldsForPartialBulk(),
            responseFieldForCommunityMemberDetails(true)))
        .post(makeUrl(""/{communityId}/operations/partial?uploaderId=1""));

    assertThat(bulkResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);
  }

  private static ResponseFieldsSnippet responseFieldForCommunityMemberDetails(boolean isList) {
    resultField = isList ? ""result.[]."" : ""result."";
    List<FieldDescriptor> fields =
        Stream.of(getResponseFieldsBulkProperties())
            .flatMap(Stream::of).collect(Collectors.toList());

    if (isList) {
      fields.add(field(""page.totalElements"", ""The number total of members""));
    }

    return responseFields(fields);
  }

  private static RequestFieldsSnippet requestFieldsForPartialBulk() {
    return requestFields(
        field(""[].loginId"", ""The login ID"").type(STRING).optional(),
        field(""[].firstName"", ""The first name"").optional(),
        field(""[].lastName"", ""The last name"").optional(),
        field(""[].command"", ""The bulk command"").optional(),
        field(""[].email"", ""The email member"").optional(),
        field(""[].birthDate"", ""The birthDate member"").optional(),
        field(""[].enabled"", ""The enabled member"").optional(),
        field(""[].properties"", ""The member properties"").optional(),
        field(""[].properties.area"", ""The area property"").optional(),
        field(""[].properties.account"", ""The account property"").optional());
  }

  private OperationCmd createOperationCmd(String command, String loginId,
                                          boolean enabled, String birthDate,
                                          String email, String firstName, String lastName) {
    OperationCmd cmd = new OperationCmd();
    cmd.setCommand(command);
    cmd.setLoginId(loginId);
    cmd.setEnabled(enabled);
    cmd.setBirthDate(birthDate);
    cmd.setEmail(email);
    cmd.setFirstName(firstName);
    cmd.setLastName(lastName);
    return cmd;
  }

  private Map<String, String> createProperties() {
    Map<String, String> properties = new HashMap<>();
    properties.put(""area"", ""development"");
    properties.put(""account"", ""Globant"");
    return properties;
  }

  private List<OperationCmd> getMemberBulkCmd() {

    OperationCmd cmd1 = createOperationCmd(""INSERT"", ""JohnyNew"",
        true, ""2000-02-02"", ""test1@globant.com"",
        ""firstNameTest1"", ""lastNameTest1"");

    cmd1.setProperties(createProperties());

    List<OperationCmd> members = new ArrayList<>();
    members.add(cmd1);

    OperationCmd cmd2 = createOperationCmd(""DISABLE"", ""Johnatan"" + 1,
        true, ""2000-03-02"", ""test2@globant.com"",
        ""firstNameTest2"", ""lastNameTest2"");

    cmd2.setProperties(createProperties());
    members.add(cmd2);

    OperationCmd cmd3 = createOperationCmd(""INSERT"", ""John"" + 2,
        true, ""2000-04-02"", ""test3@globant.com"",
        ""firstNameTest3"", ""lastNameTest3"");

    cmd3.setProperties(createProperties());
    members.add(cmd3);

    OperationCmd cmd4 = createOperationCmd(""UPDATE"", ""Johana"" + 3,
        true, ""2000-04-02"", ""test4@globant.com"",
        ""firstNameTest3"", ""lastNameTest3"");

    cmd4.setProperties(createProperties());
    members.add(cmd4);

    OperationCmd cmd5 = createOperationCmd(""DISABLE"", ""Andrea"" + 4,
        true, ""2000-04-02"", ""test4@globant.com"",
        ""firstNameTest3"", ""lastNameTest3"");

    cmd5.setProperties(createProperties());

    members.add(cmd5);
    return members;
  }

  private Community getCommunity() {
    Community community = CommunityFactory.newCommunity(""Globant"");

    List<MemberPropertyDefinition> properties = createMemberPropertyDefinitions(community, ""phone"", ""street"");
    community.getProperties().addAll(properties);

    return community;
  }

  private List<MemberPropertyDefinition> createMemberPropertyDefinitions(Community community, String... names) {
    List<MemberPropertyDefinition> properties = new ArrayList<>();
    for (String name : names) {
      properties.add(new MemberPropertyDefinition(community, name, MemberPropertyDefinition.Type.TEXT));
    }
    return properties;
  }

  private static FieldDescriptor[] getResponseFieldsBulkProperties() {
    return new FieldDescriptor[]{
        field(resultField.concat(""userId""), ""The user id"").type(NUMBER).optional(),
        field(resultField.concat(""loginId""), ""The login id"").type(STRING).optional(),
        field(resultField.concat(""email""), ""The email member"").type(STRING).optional(),
        field(resultField.concat(""operationStatus""), ""The operation status of bulk"").type(STRING).optional(),
        field(resultField.concat(""rejectedMessage""), ""The reject message"").type(STRING).optional(),
        field(resultField.concat(""recordRejectedType""), ""The reject message type"").type(STRING).optional(),
        field(resultField.concat(""page""), ""The reject message type"").type(STRING).optional(),
        field(resultField.concat(""recordRejectedType""), ""The reject message type"").type(STRING).optional()};
  }

  private Member getMember(Community community, OsUser osUser, String loginId) {
    Member member = CommunityFactory.newMember(community, osUser);
    member.setEmail(""test@globantc.com"");
    member.setFirstName(osUser.getFirstName());
    member.setLastName(osUser.getLastName());
    member.setImage(osUser.getImage());
    member.setLocale(Locale.US);
    member.setMigrated(true);


    MemberPropertyDefinition memberPropertyDefinition1 = createMemberPropertyDefinition(community, ""account"");
    MemberPropertyDefinition memberPropertyDefinition2 = createMemberPropertyDefinition(community, ""loginId"");

    for (MemberPropertyDefinition property : community.getProperties()) {
      if (property.getName().equals(""account"")) {
        memberPropertyDefinition1.setId(property.getId());
      }
      if (property.getName().equals(""loginId"")) {
        memberPropertyDefinition2.setId(property.getId());
      }
    }

    Member.PropertyValue property1 = new Member.PropertyValue();
    Member.PropertyValue property2 = new Member.PropertyValue();

    property1.setProperty(memberPropertyDefinition1);
    property1.setValue(""Globant"");
    property2.setProperty(memberPropertyDefinition2);
    property2.setValue(loginId);

    Set<Member.PropertyValue> properties = new HashSet<>();
    properties.add(property1);
    properties.add(property2);
    member.setProperties(properties);

    return member;
  }

  private MemberPropertyDefinition createMemberPropertyDefinition(Community community, String name) {
    MemberPropertyDefinition memberPropertyDefinition = new MemberPropertyDefinition();
    memberPropertyDefinition.setType(MemberPropertyDefinition.Type.TEXT);
    memberPropertyDefinition.setCommunity(community);
    memberPropertyDefinition.setName(name);
    memberPropertyDefinition.setEnabled(true);
    memberPropertyDefinition.setDescription(name);
    return memberPropertyDefinition;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/community/io/web/v2/MemberPropertyDefinitionControllerIt.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.pathParameters;
import static org.springframework.restdocs.request.RequestDocumentation.requestParameters;
import static org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.document;

import com.fasterxml.jackson.core.type.TypeReference;
import com.globant.os.accounts.component.community.io.gateway.CommunityGateway;
import com.globant.os.accounts.component.community.io.gateway.MemberPropertyDefinitionGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.component.community.model.MemberPropertyFactory;
import com.globant.os.accounts.component.community.service.MemberPropertyDefinitionService.PropertyCreationCmd;
import com.globant.os.accounts.component.community.service.MemberPropertyDefinitionService.PropertyUpdateCmd;
import com.globant.os.accounts.component.shared.io.web.BaseControllerIt;
import com.globant.os.accounts.component.shared.web.BooleanValue;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import io.restassured.response.Response;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import org.apache.http.HttpStatus;
import org.flywaydb.test.annotation.FlywayTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.restdocs.payload.ResponseFieldsSnippet;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
public class MemberPropertyDefinitionControllerIt extends BaseControllerIt {

  private static final String[] PROPERTIES_NAME = new String[] {""positions"", ""street""};

  private static final TypeReference<ResponseBody<Boolean>> BOOLEAN_TYPE_REF =
      new TypeReference<ResponseBody<Boolean>>() { };

  @Autowired
  MemberPropertyDefinitionGateway gateway;

  @Autowired
  CommunityGateway communityGateway;

  public MemberPropertyDefinitionControllerIt() {
    super(CommunityController.class);
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void createCommunityProperties() {
    Community community = createCommunity();
    List<PropertyCreationCmd> request = getPropertiesCreation(PROPERTIES_NAME);

    Response createResponse = givenDocSpecWithInternalAppToken()
        .pathParam(""id"", community.getId())
        .body(request)
        .filter(document(""member-property-definition-create-api"",
            pathParameters(
                param(""id"", ""The community id to create properties"")),
            requestFields(
                field(""[].name"", ""The community property name""),
                field(""[].description"", ""The description of property"").optional().type(JsonFieldType.STRING),
                field(""[].type"", ""The community property type"")),
            responseFieldsForCommunityDetails()))
        .post(makeUrl(""/{id}/properties""));

    assertThat(createResponse.getStatusCode()).isEqualTo(HttpStatus.SC_CREATED);

    ResponseBody<?> response = createResponse.getBody().as(ResponseBody.class);
    MemberPropertyDefinitionDetails[] memberPropertyDefinitionDetails =
            mapper.convertValue(response.getResult(), MemberPropertyDefinitionDetails[].class);
    assertThat(memberPropertyDefinitionDetails.length).isEqualTo(request.size());
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void updateCommunityProperties() {
    Community community = createCommunity();
    List<PropertyUpdateCmd> request = MemberPropertyFactory.newMemberPropertyList();

    Response updateResponse = givenDocSpecWithInternalAppToken()
        .pathParam(""id"", community.getId())
        .body(request)
        .filter(document(""member-property-definition-update-api"",
            pathParameters(
                param(""id"", ""The community id to create properties"")),
            requestFields(
                field(""[].id"", ""The property id to update""),
                field(""[].name"", ""The community property name""),
                field(""[].description"", ""The description of property"").optional().type(JsonFieldType.STRING),
                field(""[].type"", ""The community property type"")),
            responseFieldsForCommunityDetails()))
        .put(makeUrl(""/{id}/properties""));

    assertThat(updateResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<?> response = updateResponse.getBody().as(ResponseBody.class);
    MemberPropertyDefinitionDetails[] memberPropertyDefinitionDetails =
            mapper.convertValue(response.getResult(), MemberPropertyDefinitionDetails[].class);
    assertThat(memberPropertyDefinitionDetails.length).isEqualTo(request.size());
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void listMemberPropertyDefinitions() {
    String sortBy = ""name:DESC"";
    Community community = createCommunity();
    List<MemberPropertyDefinition> properties = createProperties(community, PROPERTIES_NAME);

    Response listCommunityPropertiesResponse = givenDocSpecWithInternalAppToken()
        .pathParam(""id"", community.getId())
        .filter(document(""member-property-definition-list-api"",
            pathParameters(
                param(""id"", ""The community id to get properties"")),
            requestParameters(
                param(""sort"",
                    ""To order properties by {'id', 'name'} follow of direction, for example"" + sortBy
                        + "". Default sort is name:ASC""),
                param(""pageNumber"",
                    ""Page Number to retrieve. It's optional, default value is 1 which is the first page""),
                param(""pageSize"", ""Data Size to retrieve per page, It's optional, default value is 10"")),
            responseFieldsForCommunityDetails()))
        .get(makeUrl(""/{id}/properties?sort="" + sortBy + ""&pageNumber=1&pageSize=10""));

    assertThat(listCommunityPropertiesResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<?> response = listCommunityPropertiesResponse
            .getBody().as(ResponseBody.class);
    MemberPropertyDefinitionDetails[] communityPropertiesResponse =
            mapper.convertValue(response.getResult(), MemberPropertyDefinitionDetails[].class);
    assertThat(communityPropertiesResponse.length).isEqualTo(properties.size() + 8);
    assertThat(communityPropertiesResponse).extracting(""name"").contains(""positions"", ""street"");
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void enabledOrDisabledMemberPropertyDefinitions() throws IOException {
    Community community = createCommunity();
    createProperties(community, PROPERTIES_NAME[0]);

    BooleanValue propertyEnableCmd = new BooleanValue(false);

    Response enablePropertiesResponse = givenDocSpecWithInternalAppToken()
        .pathParam(""id"", community.getId())
        .pathParam(""name"", PROPERTIES_NAME[0])
        .body(propertyEnableCmd)
        .filter(document(""member-property-definition-enable-disable-api"",
            pathParameters(
                param(""id"", ""The community id to get properties""),
                param(""name"", ""The property name to disabled or enabled"")),
            requestFields(field(""value"", ""Indicates if the property is enabled"")),
            responseFields(field(""result"", ""Flag that indicates if is enabled""))))
        .put(makeUrl(""/{id}/properties/{name}/enabled""));

    assertThat(enablePropertiesResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<Boolean> response = readValue(enablePropertiesResponse, BOOLEAN_TYPE_REF);
    assertThat(response.getResult()).isEqualTo(propertyEnableCmd.getValue());
  }

  private static ResponseFieldsSnippet responseFieldsForCommunityDetails() {
    return responseFields(
      field(""result.[].communityId"", ""The community id""),
      field(""result.[].name"", ""The name of property""),
      field(""result.[].description"", ""The description of property"").optional().type(JsonFieldType.STRING),
      field(""result.[].type"", ""The type of property""),
      field(""result.[].enabled"", ""Flag that indicates if the property is enabled""),
      field(""page.totalElements"", ""The total number of communities properties""));
  }

  private List<PropertyCreationCmd> getPropertiesCreation(String... names) {
    List<PropertyCreationCmd> properties = new ArrayList<>();
    for (String name : names) {
      PropertyCreationCmd property = new PropertyCreationCmd();
      property.setName(name);
      property.setType(MemberPropertyDefinition.Type.TEXT);
      properties.add(property);
    }
    return properties;
  }

  private Community createCommunity() {
    Community community = new Community(""StarMeUp"");
    community.setId(new Random().nextLong());
    return communityGateway.save(community);
  }

  private List<MemberPropertyDefinition> createProperties(Community community, String... names) {
    List<MemberPropertyDefinition> properties = new ArrayList<>();
    for (String name : names) {
      properties
          .add(gateway.save(new MemberPropertyDefinition(community, name, MemberPropertyDefinition.Type.TEXT)));
    }
    return properties;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/community/io/web/v2/CommunityConfigControllerIt.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.restdocs.payload.PayloadDocumentation.relaxedResponseFields;
import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;
import static org.springframework.restdocs.request.RequestDocumentation.pathParameters;
import static org.springframework.restdocs.request.RequestDocumentation.requestParameters;
import static org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.document;

import com.fasterxml.jackson.core.type.TypeReference;
import com.globant.os.accounts.component.community.io.gateway.CommunityGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityConfigFactory;
import com.globant.os.accounts.component.community.service.CommunityConfigService;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigCreationCmd;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigUpdateCmd;
import com.globant.os.accounts.component.shared.io.web.BaseControllerIt;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import io.restassured.response.Response;
import java.io.IOException;
import java.util.List;
import org.apache.http.HttpStatus;
import org.flywaydb.test.annotation.FlywayTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.restdocs.payload.ResponseFieldsSnippet;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
public class CommunityConfigControllerIt extends BaseControllerIt {

  private static final TypeReference<ResponseBody<CommunityConfigDetails[]>> COMMUNITY_CONFIG_DETAILS_ARRAY_TYPE_REF =
      new TypeReference<ResponseBody<CommunityConfigDetails[]>>() { };

  @Autowired
  private CommunityGateway communityGateway;

  @Autowired
  private CommunityConfigService communityConfigService;

  public CommunityConfigControllerIt() {
    super(CommunityController.class);
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void createCommunityConfig() {
    Community community = createCommunity();
    List<CommunityConfigCreationCmd> request = CommunityConfigFactory.newCommnunityConfigList();

    Response createResponse = givenDocSpecWithInternalAppToken()
        .pathParam(""id"", community.getId())
        .body(request)
        .filter(document(""community-config-create-api"",
            pathParameters(
                param(""id"", ""The community id to create config"")),
            requestFields(
                field(""[].confKey"", ""The community config key name""),
                field(""[].confValue"", ""The community config key value"")),
                responseFieldsForConfigDetails()))
        .post(makeUrl(""/{id}/config""));

    assertThat(createResponse.getStatusCode()).isEqualTo(HttpStatus.SC_CREATED);

    ResponseBody<?> response = createResponse.getBody().as(ResponseBody.class);
    CommunityConfigDetails[] configDetails =
            mapper.convertValue(response.getResult(), CommunityConfigDetails[].class);
    assertThat(configDetails.length).isEqualTo(request.size());
    assertThat(configDetails[0].getConfKey()).isEqualTo(request.stream().findFirst().get().getConfKey());
    assertThat(configDetails[0].getConfValue()).isEqualTo(request.stream().findFirst().get().getConfValue());
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void updateCommunityConfig() {
    Community community = createCommunityConfigForTests(CommunityConfigFactory.newCommnunityConfigList());
    List<CommunityConfigUpdateCmd> request = CommunityConfigFactory.newCommnunityConfigForUpdateList();

    Response updateResponse = givenDocSpecWithInternalAppToken()
        .pathParam(""id"", community.getId())
        .body(request)
        .filter(document(""community-config-update-api"",
            pathParameters(
                param(""id"", ""The community id to update config"")),
            requestFields(
                field(""[].confKey"", ""The community config key name""),
                field(""[].confValue"", ""The community config key value"")),
                responseFieldsForConfigDetails()))
        .put(makeUrl(""/{id}/config""));

    assertThat(updateResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<?> response = updateResponse.getBody().as(ResponseBody.class);
    CommunityConfigDetails[] configDetails =
            mapper.convertValue(response.getResult(), CommunityConfigDetails[].class);
    assertThat(configDetails.length).isEqualTo(request.size());
    assertThat(configDetails[0].getConfKey()).isEqualTo(request.stream().findFirst().get().getConfKey());
    assertThat(configDetails[0].getConfValue()).isEqualTo(request.stream().findFirst().get().getConfValue());
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getCommunityConfigByCommunity() throws IOException {
    List<CommunityConfigCreationCmd> request = CommunityConfigFactory.newCommnunityConfigList();
    Community community = createCommunityConfigForTests(request);

    Response getConfigByCommunityResponse = givenDocSpecWithInternalAppToken()
        .pathParam(""id"", community.getId())
        .filter(document(""community-config-get-community-api"",
            pathParameters(
                param(""id"", ""The community id to get config"")),
            requestParameters(
                param(""sort"",
                    ""To order configs by {'id'} follow of direction, for example id:ASC""),
                param(""pageNumber"",
                    ""Page Number to retrieve. It's optional, default value is 1 which is the first page""),
                param(""pageSize"", ""Data Size to retrieve per page, It's optional, default value is 10"")),
            responseFieldsForConfigDetails()))
        .get(makeUrl(""/{id}/config?sort=id:ASC&pageNumber=1&pageSize=10""));

    assertThat(getConfigByCommunityResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<CommunityConfigDetails[]> response  = readValue(
            getConfigByCommunityResponse, COMMUNITY_CONFIG_DETAILS_ARRAY_TYPE_REF);
    CommunityConfigDetails[] communityConfigsResponse = response.getResult();

    assertThat(communityConfigsResponse[0].getCommunityId()).isEqualTo(community.getId());
    assertThat(communityConfigsResponse[0].getConfKey()).isEqualTo(request.stream().findFirst().get().getConfKey());
    assertThat(communityConfigsResponse[0].getConfValue()).isEqualTo(request.stream().findFirst().get().getConfValue());
  }

  private Community createCommunity() {
    Community community = new Community(""StarMeUp"");
    community.setId(1L);
    return communityGateway.save(community);
  }

  private Community createCommunityConfigForTests(List<CommunityConfigCreationCmd> request) {
    Community community = createCommunity();

    communityConfigService.create(community.getId(), request);

    return community;
  }

  private static ResponseFieldsSnippet responseFieldsForConfigDetails() {
    return relaxedResponseFields(
      field(""result.[].id"", ""The community config id"").optional().type(Long.class),
      field(""result.[].confKey"", ""The community config key name"").optional().type(String.class),
      field(""result.[].confValue"", ""The community config key value"").optional().type(String.class),
      field(""result.[].lastUpdate"", ""The last update date for the record"").optional().type(String.class),
      field(""result.[].communityId"", ""The community id to create config values"").optional().type(Long.class),
      field(""page.totalElements"", ""The total number of communities config"").optional().type(Long.class),
      field(""timestamp"", ""Indicates a time when the response occurs"").optional().type(String.class),
      field(""message"", ""Indicates a general message for the response"").optional().type(String.class),
      field(""details"", ""Indicates a detailed message for the response"").optional().type(String.class),
      field(""type"", ""Indicates the type of the response"").optional().type(String.class),
      field(""parameters"", ""Indicates the request's parameters"").optional().type(Object.class)
    );
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/community/io/web/v2/MemberConfigControllerIt.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.pathParameters;
import static org.springframework.restdocs.request.RequestDocumentation.requestParameters;
import static org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.document;

import com.fasterxml.jackson.core.type.TypeReference;
import com.globant.os.accounts.component.community.io.gateway.CommunityGateway;
import com.globant.os.accounts.component.community.io.gateway.MemberGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityFactory;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.MemberConfigFactory;
import com.globant.os.accounts.component.community.service.MemberConfigService;
import com.globant.os.accounts.component.community.service.MemberConfigService.MemberConfigCreationCmd;
import com.globant.os.accounts.component.community.service.MemberConfigService.MemberConfigUpdateCmd;
import com.globant.os.accounts.component.shared.io.web.BaseControllerIt;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import com.globant.os.accounts.component.user.io.gateway.UserGateway;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.model.UserFactory;
import com.globant.os.accounts.constants.ConstantIt;
import io.restassured.response.Response;
import java.io.IOException;
import java.util.List;
import org.apache.http.HttpStatus;
import org.flywaydb.test.annotation.FlywayTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.restdocs.payload.ResponseFieldsSnippet;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
public class MemberConfigControllerIt extends BaseControllerIt {

  private static final TypeReference<ResponseBody<MemberConfigDetails[]>> MEMBER_CONFIG_DETAILS_ARRAY_TYPE_REF =
      new TypeReference<ResponseBody<MemberConfigDetails[]>>() { };

  @Autowired
  private UserGateway userGateway;

  @Autowired
  private CommunityGateway communityGateway;

  @Autowired
  private MemberGateway memberGateway;

  @Autowired
  private MemberConfigService memberConfigService;

  public MemberConfigControllerIt() {
    super(MemberController.class);
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void createMemberConfig() throws IOException {
    Member member = createMember();
    List<MemberConfigCreationCmd> request = MemberConfigFactory.newMemberConfigList();

    Response createResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), member.getId().getCommunity().getId())
        .pathParam(""userId"", member.getId().getUser().getId())
        .body(request)
        .filter(document(""member-config-create-api"",
            pathParameters(
                param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id to create config""),
                param(""userId"", ""The user id to create config"")),
            requestFields(
                field(""[].confKey"", ""The member config key name""),
                field(""[].confValue"", ""The member config key value"")),
                responseFieldsForConfigDetails()))
        .post(makeUrl(""/communities/{communityId}/user/{userId}/config""));

    assertThat(createResponse.getStatusCode()).isEqualTo(HttpStatus.SC_CREATED);

    ResponseBody<MemberConfigDetails[]> response  = readValue(createResponse, MEMBER_CONFIG_DETAILS_ARRAY_TYPE_REF);
    MemberConfigDetails[] memberConfigsResponse = response.getResult();

    assertThat(memberConfigsResponse.length).isEqualTo(request.size());
    assertThat(memberConfigsResponse[0].getConfKey()).isEqualTo(request.stream().findFirst().get().getConfKey());
    assertThat(memberConfigsResponse[0].getConfValue()).isEqualTo(request.stream().findFirst().get().getConfValue());
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void updateMemberConfig() throws IOException {
    Member member = createMemberConfigForTests(MemberConfigFactory.newMemberConfigList());
    List<MemberConfigUpdateCmd> request = MemberConfigFactory.newMemberConfigForUpdateList();

    memberConfigService.create(member.getId().getCommunity().getId(), member.getId().getUser().getId(),
        MemberConfigFactory.newMemberConfigList());

    Response updateResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), member.getId().getCommunity().getId())
        .pathParam(""userId"", member.getId().getUser().getId())
        .body(request)
        .filter(document(""member-config-update-api"",
            pathParameters(
                param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id to update config""),
                param(""userId"", ""The user id to update config"")),
            requestFields(
                field(""[].id"", ""The config id to update""),
                field(""[].confKey"", ""The member config key name""),
                field(""[].confValue"", ""The member config key value"")),
                responseFieldsForConfigDetails()))
        .put(makeUrl(""/communities/{communityId}/user/{userId}/config""));

    assertThat(updateResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<MemberConfigDetails[]> response  = readValue(updateResponse, MEMBER_CONFIG_DETAILS_ARRAY_TYPE_REF);
    MemberConfigDetails[] memberConfigsResponse = response.getResult();

    assertThat(memberConfigsResponse.length).isEqualTo(request.size());
    assertThat(memberConfigsResponse[0].getConfKey()).isEqualTo(request.stream().findFirst().get().getConfKey());
    assertThat(memberConfigsResponse[0].getConfValue()).isEqualTo(request.stream().findFirst().get().getConfValue());
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getMemberConfigByMember() throws IOException {
    List<MemberConfigCreationCmd> request = MemberConfigFactory.newMemberConfigList();
    Member member = createMemberConfigForTests(request);

    Response getConfigByMemberResponse = givenDocSpecWithInternalAppToken()
        .pathParam(ConstantIt.KeyName.COMMUNITY_ID.getName(), member.getId().getCommunity().getId())
        .pathParam(""userId"", member.getId().getUser().getId())
        .filter(document(""member-config-get-member-api"",
            pathParameters(
                param(ConstantIt.KeyName.COMMUNITY_ID.getName(), ""The community id to get config""),
                param(""userId"", ""The user id to get config"")),
            requestParameters(
                param(""sort"",
                    ""To order configs by {'id'} follow of direction, for example id:ASC""),
                param(""pageNumber"",
                    ""Page Number to retrieve. It's optional, default value is 1 which is the first page""),
                param(""pageSize"", ""Data Size to retrieve per page, It's optional, default value is 10"")),
            responseFieldsForConfigDetails()))
        .get(makeUrl(""/communities/{communityId}/user/{userId}/config?sort=id:ASC&pageNumber=1&pageSize=10""));

    assertThat(getConfigByMemberResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<MemberConfigDetails[]> response  = readValue(
            getConfigByMemberResponse, MEMBER_CONFIG_DETAILS_ARRAY_TYPE_REF);
    MemberConfigDetails[] memberConfigsResponse = response.getResult();

    assertThat(memberConfigsResponse[0].getCommunityId()).isEqualTo(member.getId().getCommunity().getId());
    assertThat(memberConfigsResponse[0].getUserId()).isEqualTo(member.getId().getUser().getId());
    assertThat(memberConfigsResponse[0].getConfKey()).isEqualTo(request.stream().findFirst().get().getConfKey());
    assertThat(memberConfigsResponse[0].getConfValue()).isEqualTo(request.stream().findFirst().get().getConfValue());
  }

  private Member createMember() {
    OsUser user = userGateway.save(UserFactory.newDefaultUser());
    Community community = communityGateway.save(CommunityFactory.newCommunity(""Globant""));

    Member member = new Member(community, user, ""1"", ""jhon.doe@gmail.com"");

    return memberGateway.save(member);
  }

  private Member createMemberConfigForTests(List<MemberConfigCreationCmd> request) {
    Member member = createMember();
    memberConfigService.create(member.getId().getCommunity().getId(), member.getId().getUser().getId(), request);

    return member;
  }

  private static ResponseFieldsSnippet responseFieldsForConfigDetails() {
    return responseFields(
      field(""result.[].id"", ""The member config id""),
      field(""result.[].confKey"", ""The member config key name""),
      field(""result.[].confValue"", ""The member config key value""),
      field(""result.[].lastUpdate"", ""The last update date for the record""),
      field(""result.[].communityId"", ""The community id to create config values""),
      field(""result.[].userId"", ""The user id to create config values""),
      field(""page.totalElements"", ""The total number of member configs""));
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/community/model/MemberPropertyFactory.java,"package com.globant.os.accounts.component.community.model;

import com.globant.os.accounts.component.community.model.MemberPropertyDefinition.Type;
import com.globant.os.accounts.component.community.service.MemberPropertyDefinitionService.PropertyUpdateCmd;
import java.util.ArrayList;
import java.util.List;

public class MemberPropertyFactory {

  private MemberPropertyFactory() {
    throw new IllegalStateException(""Utility class"");
  }

  public static List<PropertyUpdateCmd> newMemberPropertyList() {
    List<PropertyUpdateCmd> property = new ArrayList<>();
    property.add(newProperty(1L, ""street"", Type.TEXT, ""This is a test description""));
    property.add(newProperty(2L, ""phone"", Type.TEXT, ""This is a test description""));
    return property;
  }

  public static PropertyUpdateCmd newProperty(Long id, String name, Type type,
      String description) {
    PropertyUpdateCmd property = new PropertyUpdateCmd();
    property.setId(id);
    property.setName(name);
    property.setDescription(description);
    property.setType(type);
    return property;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/community/model/CommunityFactory.java,"package com.globant.os.accounts.component.community.model;

import com.globant.os.accounts.component.user.model.OsUser;
import com.google.common.collect.Sets;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.TimeZone;

public class CommunityFactory {

  private static final String COMMUNITY_TIME_ZONE = ""America/Los_Angeles"";

  private CommunityFactory() {
    throw new IllegalStateException(""Utility class"");
  }

  public static Community newCommunity(String name) {
    Community community = new Community(name);
    community.setId(new Random().nextLong());
    community.setLocale(Locale.US);
    community.setLocales(Sets.newHashSet(Locale.US));
    community.setTimeZone(TimeZone.getTimeZone(COMMUNITY_TIME_ZONE));
    community.setTotalMembers(10L);
    community.setPrimaryImage(""image"");
    community.setSecondaryImage(""imageNegative"");
    community.setMigrated(true);
    return community;
  }

  public static List<Community> newCommunityList(String... names) {
    List<Community> communities = new ArrayList<>();
    for (String name : names) {
      communities.add(newCommunity(name));
    }
    return communities;
  }

  public static Member newMember(Community community, OsUser user) {
    return new Member(community, user, String.valueOf(user.getId()), String.valueOf(user.getId()));
  }

  public static List<Member> newMemberList(Community community, List<OsUser> users) {
    List<Member> members = new ArrayList<>();
    for (OsUser user : users) {
      members.add(newMember(community, user));
    }
    return members;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/community/model/CommunityConfigFactory.java,"package com.globant.os.accounts.component.community.model;

import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigCreationCmd;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigUpdateCmd;
import java.util.ArrayList;
import java.util.List;

public class CommunityConfigFactory {

  public static List<CommunityConfigCreationCmd> newCommnunityConfigList() {
    List<CommunityConfigCreationCmd> configList = new ArrayList<>();
    configList.add(newConfig(""key1"", ""keyvalue1""));
    configList.add(newConfig(""key2"", ""keyvalue2""));
    return configList;
  }

  public static CommunityConfigCreationCmd newConfig(String confKey, String confValue) {
    CommunityConfigCreationCmd config = new CommunityConfigCreationCmd();
    config.setConfKey(confKey);
    config.setConfValue(confValue);
    return config;
  }

  public static List<CommunityConfigUpdateCmd> newCommnunityConfigForUpdateList() {
    List<CommunityConfigUpdateCmd> configList = new ArrayList<>();
    configList.add(newConfigForUpdate(""internalType"", ""0""));
    configList.add(newConfigForUpdate(""category"", ""1""));
    return configList;
  }

  public static CommunityConfigUpdateCmd newConfigForUpdate(String confKey, String confValue) {
    CommunityConfigUpdateCmd config = new CommunityConfigUpdateCmd();
    config.setConfKey(confKey);
    config.setConfValue(confValue);
    return config;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/community/model/MemberConfigFactory.java,"package com.globant.os.accounts.component.community.model;

import com.globant.os.accounts.component.community.service.MemberConfigService.MemberConfigCreationCmd;
import com.globant.os.accounts.component.community.service.MemberConfigService.MemberConfigUpdateCmd;
import java.util.ArrayList;
import java.util.List;

public class MemberConfigFactory {

  public static List<MemberConfigCreationCmd> newMemberConfigList() {
    List<MemberConfigCreationCmd> configList = new ArrayList<>();
    configList.add(newConfig(""key1"", ""keyvalue1""));
    configList.add(newConfig(""key2"", ""keyvalue2""));
    return configList;
  }

  public static MemberConfigCreationCmd newConfig(String confKey, String confValue) {
    MemberConfigCreationCmd config = new MemberConfigCreationCmd();
    config.setConfKey(confKey);
    config.setConfValue(confValue);
    return config;
  }

  public static List<MemberConfigUpdateCmd> newMemberConfigForUpdateList() {
    List<MemberConfigUpdateCmd> configList = new ArrayList<>();
    configList.add(newConfigForUpdate(1L, ""key3"", ""keyvalue3""));
    configList.add(newConfigForUpdate(2L, ""key4"", ""keyvalue4""));
    return configList;
  }

  public static MemberConfigUpdateCmd newConfigForUpdate(Long id, String confKey, String confValue) {
    MemberConfigUpdateCmd config = new MemberConfigUpdateCmd();
    config.setId(id);
    config.setConfKey(confKey);
    config.setConfValue(confValue);
    return config;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/it/java/com/globant/os/accounts/component/community/aspect/CommunityAspectIt.java,"
package com.globant.os.accounts.component.community.aspect;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.restdocs.payload.JsonFieldType.ARRAY;
import static org.springframework.restdocs.payload.JsonFieldType.BOOLEAN;
import static org.springframework.restdocs.payload.JsonFieldType.NUMBER;
import static org.springframework.restdocs.payload.JsonFieldType.OBJECT;
import static org.springframework.restdocs.payload.JsonFieldType.STRING;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.pathParameters;
import static org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.document;

import com.fasterxml.jackson.core.type.TypeReference;
import com.globant.os.accounts.component.community.io.gateway.CommunityGateway;
import com.globant.os.accounts.component.community.io.gateway.MemberPropertyDefinitionGateway;
import com.globant.os.accounts.component.community.io.web.v2.CommunityController;
import com.globant.os.accounts.component.community.io.web.v2.CommunityDetails;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityFactory;
import com.globant.os.accounts.component.community.service.CommunityService;
import com.globant.os.accounts.component.community.service.MemberPropertyDefinitionService;
import com.globant.os.accounts.component.shared.io.web.BaseControllerIt;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import com.globant.os.accounts.component.user.io.gateway.UserGateway;
import com.globant.os.accounts.config.EmbeddedRedisTestConfiguration;
import io.restassured.response.Response;
import java.io.IOException;
import org.apache.http.HttpStatus;
import org.flywaydb.test.annotation.FlywayTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.restdocs.payload.ResponseFieldsSnippet;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@Import(EmbeddedRedisTestConfiguration.class)
public class CommunityAspectIt extends BaseControllerIt {

  private static final TypeReference<ResponseBody<CommunityDetails>> COMMUNITY_DETAILS_TYPE_REF =
      new TypeReference<ResponseBody<CommunityDetails>>() {
      };

  @Autowired
  CommunityGateway communityGateway;

  @Autowired
  CommunityService communityService;

  @Autowired
  MemberPropertyDefinitionService memberPropertyDefinitionService;

  @Autowired
  MemberPropertyDefinitionGateway cpGateway;

  @Autowired
  UserGateway userGateway;

  public CommunityAspectIt() {
    super(CommunityController.class);
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getCommunityVerifyAspectWithAppTokenIsWorking() throws IOException {
    Community community = communityGateway.save(CommunityFactory.newCommunity(""SMU1""));
    Response getCommunityByIdResponse = givenDocSpecWithInternalAppToken()
        .pathParam(""id"", community.getId()).filter(document(""community-get-id-api"",
            pathParameters(param(""id"", ""The community id to be found"")), responseFieldsForCommunityDetails()))
        .get(makeUrl(""/{id}""));

    assertThat(getCommunityByIdResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<CommunityDetails> response = readValue(getCommunityByIdResponse, COMMUNITY_DETAILS_TYPE_REF);
    CommunityDetails communityResponse = response.getResult();

    assertThat(communityResponse.getId()).isEqualTo(community.getId());
  }

  @FlywayTest(invokeCleanDB = true)
  @Test
  public void getCommunityVerifyAspectWithUserTokenIsWorking() throws IOException {
    Response getCommunityByIdResponse = givenDocSpecWithInternalAppToken()
        .pathParam(""id"", 3).filter(document(""community-get-id-api"",
            pathParameters(param(""id"", ""The community id to be found"")), responseFieldsForCommunityDetails()))
        .get(makeUrl(""/{id}""));

    assertThat(getCommunityByIdResponse.getStatusCode()).isEqualTo(HttpStatus.SC_OK);

    ResponseBody<CommunityDetails> response = readValue(getCommunityByIdResponse, COMMUNITY_DETAILS_TYPE_REF);
    CommunityDetails communityResponse = response.getResult();

    assertThat(communityResponse.getId()).isEqualTo(3);
  }

  private static ResponseFieldsSnippet responseFieldsForCommunityDetails() {
    return responseFields(field(""result.id"", ""The community id""), field(""result.name"", ""The community name""),
        field(""result.locale"", ""The community default locale"").type(STRING).optional(),
        field(""result.locales"", ""The community available locales"").type(ARRAY).optional(),
        field(""result.timeZone"", ""The community default time zone"").type(STRING).optional(),
        field(""result.totalMembers"", ""The community total members"").type(NUMBER).optional(),
        field(""result.domains"", ""The community domain"").type(ARRAY).optional(),
        field(""result.images"", ""The community image object"").type(OBJECT).optional(),
        field(""result.images.primary"", ""The community primary image code"").type(STRING).optional(),
        field(""result.images.secondary"", ""The community negative image code"").type(STRING).optional(),
        field(""result.enabled"", ""Flag that indicates if is enabled""),
        field(""result.configs"", ""The community configs data"").type(ARRAY).optional(),
        field(""result.configs.[].confKey"", ""The community config key"").type(STRING).optional(),
        field(""result.configs.[].confValue"", ""The community config value"").type(STRING).optional(),
        field(""result.configs.[].communityId"", ""The community id of configs"").type(NUMBER).optional(),
        field(""result.properties"", ""The community properties data"").type(ARRAY).optional(),
        field(""result.properties.[].name"", ""The community properties name"").type(STRING).optional(),
        field(""result.properties.[].description"", ""The community properties description"").type(STRING).optional(),
        field(""result.properties.[].communityId"", ""The community id of properties"").type(NUMBER).optional(),
        field(""result.properties.[].type"", ""The community type of properties"").type(STRING).optional(),
        field(""result.properties.[].enabled"", ""Flag that indicates if is enabled of properties"").type(BOOLEAN)
            .optional());
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/AccountsApplication.java,"package com.globant.os.accounts;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@SpringBootApplication
@EnableCaching
@EnableJpaRepositories(considerNestedRepositories = true)
public class AccountsApplication {

  public static void main(final String[] args) {
    SpringApplication.run(AccountsApplication.class, args);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/io/web/v2/GroupQueryParams.java,"package com.globant.os.accounts.component.group.io.web.v2;

import java.util.stream.Collectors;
import java.util.stream.Stream;

public enum GroupQueryParams {

  USER_ID(""userId""),
  GROUP_NAME(""groupName""),
  VISIBILITY(""visibility""),
  DESCRIPTION(""description""),
  COMMUNITY(""communityId"");

  private static final String INVALID_QUERY_PARAMETER_MESSAGE = ""Query Parameter not supported [%s]"";

  private String queryParameter;

  private GroupQueryParams(String queryParameter) {
    this.queryParameter = queryParameter;
  }

  public String getQueryParameter() {
    return queryParameter;
  }

  public static GroupQueryParams fromValue(String queryParam) {
    for (GroupQueryParams validQueryParam : values()) {
      if (queryParam != null && validQueryParam.getQueryParameter().equals(queryParam)) {
        return validQueryParam;
      }
    }
    throw new IllegalArgumentException(String.format(INVALID_QUERY_PARAMETER_MESSAGE, queryParam));
  }

  public static boolean isValid(String queryParam) {
    for (GroupQueryParams validQueryParam : values()) {
      if (queryParam != null && validQueryParam.getQueryParameter().equals(queryParam)) {
        return true;
      }
    }
    return false;
  }

  public static String getListOfQueryParametersAsString() {
    return String.format(""'%s'"",
        String.join(""', '"", Stream.of(values()).map(GroupQueryParams::getQueryParameter).collect(Collectors.toList())));
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/io/web/v2/GroupAdminController.java,"package com.globant.os.accounts.component.group.io.web.v2;

import static java.util.Arrays.asList;

import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupBasic;
import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupDetails;
import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupDetailsCreation;
import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupMemberChildGroupBasic;
import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupMemberUserBasic;
import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.service.GroupService;
import com.globant.os.accounts.component.group.service.GroupService.GroupCreationRequest;
import com.globant.os.accounts.component.group.service.GroupService.GroupFindCmd;
import com.globant.os.accounts.component.group.service.GroupService.GroupMemberAddingRequest;
import com.globant.os.accounts.component.group.service.GroupService.GroupMemberChildGroupAddingRequest;
import com.globant.os.accounts.component.group.service.GroupService.GroupUpdateRequest;
import com.globant.os.accounts.component.group.service.GroupService.MemberGroupAddingRequest;
import com.globant.os.accounts.component.shared.io.web.v2.BaseController;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import com.globant.os.accounts.support.aspect.TokenValidator;
import com.globant.os.accounts.support.web.AddMemberGroupError;
import com.globant.os.accounts.support.web.AddMemberGroupException;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.ResourceNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(path = ""/api/v2"", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
public class GroupAdminController extends BaseController {

  private static final String MEMBERS_NOT_ADDED = ""Some members weren't added"";
  private static final String MEMBER_USER_ALREADY_EXISTS_MESSAGE =
      ""Member already exists in group"";

  @Autowired
  private GroupService groupService;

  @PostMapping(path = ""/communities/{communityId}/groups"", consumes = MediaType.APPLICATION_JSON_VALUE)
  @ResponseStatus(HttpStatus.CREATED)
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<GroupDetailsCreation> create(@PathVariable long communityId,
      @Valid @RequestBody GroupCreationRequest request) {
    return ResponseBody.fromObject(GroupDetailsCreation.fromEntity(groupService.create(communityId, request)));
  }

  @PutMapping(path = ""/communities/{communityId}/groups/{groupId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<GroupDetails> update(@PathVariable long communityId, @PathVariable long groupId,
      @RequestBody @Valid GroupUpdateRequest request) {
    validateGroupInCommunity(communityId, groupId);
    return ResponseBody.fromObject(GroupDetails.fromEntity(groupService.update(groupId, request)));
  }

  @PutMapping(path = ""/communities/{communityId}/groups/{groupId}/users"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<Boolean> updateGroupMember(@PathVariable long communityId, @PathVariable long groupId,
      @RequestBody @Valid List<GroupMemberAddingRequest> request) {
    validateGroupInCommunity(communityId, groupId);
    return ResponseBody.fromOptional(addOrUpdateMemberUser(groupId, request, false));
  }

  @PostMapping(path = ""/communities/{communityId}/groups/{groupId}/users"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<Boolean> addGroupMember(@PathVariable long communityId, @PathVariable long groupId,
      @RequestBody @Valid GroupMemberAddingRequest request) {
    validateGroupInCommunity(communityId, groupId);
    return ResponseBody.fromOptional(addMemberUser(groupId, asList(request), true));
  }

  @PostMapping(path = ""/communities/{communityId}/groups/users/{memberId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<Boolean> addMemberToGroups(@PathVariable long communityId, @PathVariable long memberId,
      @RequestBody @Valid List<MemberGroupAddingRequest> request) {
    request.forEach(memberGroupAddingRequest ->
        validateGroupInCommunity(communityId, memberGroupAddingRequest.getGroupId())
    );

    return ResponseBody.fromOptional(addMemberUserToGroups(memberId, request));
  }

  @DeleteMapping(path = ""/communities/{communityId}/groups/users/{memberId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public void deleteMemberToGroups(@PathVariable long communityId, @PathVariable long memberId,
      @RequestBody @Valid List<Long> groupIds) {
    groupIds.forEach(groupId -> validateGroupInCommunity(communityId, groupId));

    groupService.deleteMemberToGroups(communityId, memberId, groupIds);
  }

  @PutMapping(path = ""/communities/{communityId}/groups/{groupId}/groups"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public void addMembersChildGroups(@PathVariable long communityId, @PathVariable long groupId,
      @RequestBody @Valid GroupMemberChildGroupAddingRequest childGroupIdRequest) {
    validateGroupInCommunity(communityId, groupId);
    groupService.addMemberChildGroup(groupId, childGroupIdRequest.getGroupId());
  }

  @GetMapping(path = ""/communities/{communityId}/groups/{groupId}/users"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<List<GroupMemberUserBasic>> getMemberUsers(@PathVariable long communityId,
      @PathVariable long groupId, BaseFindCmd cmd) {
    validateGroupInCommunity(communityId, groupId);
    isPaginationDataValid(cmd);

    List<GroupMemberUserBasic> membersUsers = groupService.getGroupMemberUserBasic(groupId);

    return ResponseBody.fromFindResult(getPage(membersUsers, cmd.getPageNumber(), cmd.getPageSize()));
  }

  @GetMapping(path = ""/communities/{communityId}/groups/{groupId}/groups"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<List<GroupMemberChildGroupBasic>> getMemberchildGroups(@PathVariable long communityId,
      @PathVariable long groupId, BaseFindCmd cmd) {
    validateGroupInCommunity(communityId, groupId);
    isPaginationDataValid(cmd);

    Optional<Group> group = groupService.findById(groupId);
    List<GroupMemberChildGroupBasic> result = new ArrayList<>();

    if (group.isPresent()) {
      result = group.get().getGroupChildGroups().stream()
          .map(GroupMemberChildGroupBasic::fromEntity).collect(Collectors.toList());
    }

    return ResponseBody.fromFindResult(getPage(result, cmd.getPageNumber(), cmd.getPageSize()));
  }

  @DeleteMapping(path = ""/communities/{communityId}/groups/{groupId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public void delete(@PathVariable long communityId, @PathVariable long groupId) {
    validateGroupInCommunity(communityId, groupId);
    groupService.delete(groupId);
  }

  @DeleteMapping(path = ""/communities/{communityId}/groups/{groupId}/users/{memberId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public void deleteMember(@PathVariable long communityId, @PathVariable long groupId, @PathVariable long memberId) {
    validateGroupInCommunity(communityId, groupId);
    groupService.deleteMember(groupId, memberId);
  }

  @DeleteMapping(path = ""/communities/{communityId}/groups/{groupId}/groups/{childGroupId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public void deleteMemberChildGroup(@PathVariable long communityId, @PathVariable long groupId,
      @PathVariable long childGroupId) {
    validateGroupInCommunity(communityId, groupId);
    groupService.deleteMemberChildGroup(groupId, childGroupId);
  }

  @GetMapping(path = ""/communities/{communityId}/groups/{groupId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<GroupDetails> getById(@PathVariable long communityId, @PathVariable long groupId) {
    validateGroupInCommunity(communityId, groupId);
    Optional<GroupDetails> groupDetails = groupService.findById(groupId).map(GroupDetails::fromEntity);

    return ResponseBody.fromOptional(groupDetails);
  }

  @GetMapping(path = ""/communities/{communityId}/groups"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<List<GroupBasic>> get(@PathVariable long communityId, GroupFindCmd cmd) {
    cmd.setCommunityId(Optional.of(communityId));

    isPaginationDataValid(cmd);

    FindResult<GroupBasic> groupBasicDetails = groupService.find(cmd).map(GroupBasic::fromEntity);

    return ResponseBody.fromFindResult(groupBasicDetails);
  }

  private void validateGroupInCommunity(long communityId, long groupId) {
    Optional<Group> group = groupService.findById(groupId);

    if (!group.isPresent() || communityId != group.get().getCommunityId()) {
      throw new ResourceNotFoundException(""Access not authorized for this resource"");
    }
  }

  private Optional<Boolean> addOrUpdateMemberUser(long groupId, List<GroupMemberAddingRequest> request,
      boolean isCreateMember) {
    List<AddMemberGroupError> errors = groupService.addMemberUser(groupId, request, isCreateMember);
    if (!errors.isEmpty()) {
      throw new AddMemberGroupException(MEMBERS_NOT_ADDED, errors);
    }
    return Optional.of(true);
  }

  private Optional<Boolean> addMemberUser(long groupId, List<GroupMemberAddingRequest> request,
      boolean isCreateMember) {
    List<AddMemberGroupError> errors = groupService.addMemberUser(groupId, request, isCreateMember);

    if (errors.isEmpty()) {
      return Optional.of(true);
    }
    throw new AddMemberGroupException(MEMBER_USER_ALREADY_EXISTS_MESSAGE, errors);

  }

  private Optional<Boolean> addMemberUserToGroups(long userId, List<MemberGroupAddingRequest> request) {
    List<AddMemberGroupError> errors = groupService.addMemberUserToGroups(userId, request);
    if (!errors.isEmpty()) {
      throw new AddMemberGroupException(MEMBERS_NOT_ADDED, errors);
    }
    return Optional.of(true);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/io/web/v2/GroupQueryController.java,"package com.globant.os.accounts.component.group.io.web.v2;

import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupDynamicMemberUserBasic;
import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupMemberUserBasic;
import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupQueriesResponse;
import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.model.GroupFilters;
import com.globant.os.accounts.component.group.model.GroupMemberUser;
import com.globant.os.accounts.component.group.model.GroupMemberUser.Pk;
import com.globant.os.accounts.component.group.model.GroupType;
import com.globant.os.accounts.component.group.service.GroupQueryService;
import com.globant.os.accounts.component.group.service.GroupQueryService.GroupDynamicMemberUser;
import com.globant.os.accounts.component.group.service.GroupQueryService.GroupQueryFilterCmd;
import com.globant.os.accounts.component.group.service.GroupService;
import com.globant.os.accounts.component.shared.io.web.v2.BaseController;
import com.globant.os.accounts.component.shared.model.Schema;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import com.globant.os.accounts.support.aspect.TokenValidator;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.ResourceNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(path = ""/api/v2/queries"", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
public class GroupQueryController extends BaseController {

  private static final String DIRECTION_UP_OR_DOWN = ""Direction should be 'UP' or 'DOWN'"";
  private static final String NOT_AUTHORIZED_FOR_THIS_RESOURCE = ""Access not authorized for this resource"";

  @Autowired
  private GroupQueryService groupQueryService;

  @Autowired
  private GroupService groupService;

  @GetMapping(path = ""/communities/{communityId}/groups/{groupId}/members"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<List<GroupDynamicMemberUserBasic>> getMemberUsers(@PathVariable long communityId,
      @PathVariable long groupId, GroupQueryFilterCmd filter) {

    validateGroupInCommunity(communityId, groupId);

    Group group = groupService.findById(groupId).orElseThrow(() -> new ResourceNotFoundException(
        String.format(GroupService.INVALID_RESOURCE_MESSAGE, GroupService.GROUP_RESOURCE, groupId)));

    if (!group.getFilters().isEmpty()) {
      HashMap<String, String> dynamic = new HashMap<>();
      for (GroupFilters groupFilter : group.getFilters()) {
        dynamic.put(groupFilter.getName(), groupFilter.getValue());
      }
      filter.setDynamicFilter(Optional.of(dynamic));
    }

    List<GroupDynamicMemberUserBasic> memberUsers = new ArrayList<>();
    List<GroupDynamicMemberUser> userList = groupQueryService.findMembersByGroupId(communityId, groupId, filter);

    for (GroupDynamicMemberUser user : userList) {
      GroupMemberUser groupMemberUser = groupService.findMemberUserById(new Pk(group, user.getUserId()))
          .orElse(new GroupMemberUser(group, user.getUserId(), new HashSet<>(Arrays.asList(Schema.ROLE_MEMBER))));

      memberUsers.add(GroupDynamicMemberUserBasic.fromEntity(groupMemberUser, user.isStatic()));
    }

    return ResponseBody.fromFindResult(getPage(memberUsers, filter.getPageNumber(), filter.getPageSize()));
  }

  @GetMapping(path = ""/communities/{communityId}/users/{userId}/groups"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<List<GroupQueriesResponse>> getGroupsByMember(@PathVariable long communityId,
      @PathVariable long userId, GroupQueryFilterCmd filter) {

    List<GroupQueriesResponse> groups = new ArrayList<GroupQueriesResponse>();

    List<Long> groupIds = groupQueryService.findGroupsByMember(communityId, userId, filter);
    for (Long groupId : groupIds) {
      Group group = groupService.findById(groupId).orElseThrow(() -> new ResourceNotFoundException(
          String.format(GroupService.INVALID_RESOURCE_MESSAGE, GroupService.GROUP_RESOURCE, groupId)));
      groups.add(GroupQueriesResponse.fromEntity(group));
    }
    return ResponseBody.fromFindResult(getPage(groups, filter.getPageNumber(), filter.getPageSize()));
  }

  @GetMapping(path = ""/communities/{communityId}/users/{userId}/groups/members"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('groups:read')"")
  @TokenValidator
  public ResponseBody<List<GroupMemberUserBasic>> getLeadersByMember(@PathVariable long communityId,
      @PathVariable long userId, GroupQueryFilterCmd filter) {

    List<GroupMemberUserBasic> memberUsers = new ArrayList<>();

    List<Long> userList;

    String entry = filter.getDirection().get();
    String entryGroupType = filter.getGroupType().get();

    if (!Arrays.asList(Schema.DIRECTION_UP, Schema.DIRECTION_DOWN).contains(entry.toUpperCase())) {
      throw new BadRequestException(DIRECTION_UP_OR_DOWN);
    }

    if (entry.toUpperCase().equals(Schema.DIRECTION_UP)) {
      userList = groupQueryService.findLeadersByMember(communityId, userId, filter);
      for (Long uId : userList) {
        GroupMemberUser groupMemberUser;
        if (entryGroupType.toUpperCase().equals(Schema.GROUP_TYPE_ORG)) {
          groupMemberUser = groupService.memberUserByUserId(uId, GroupType.ORG);
        } else {
          groupMemberUser = new GroupMemberUser(null, uId, new HashSet<>(Arrays.asList(Schema.ROLE_LEADER)));
        }
        memberUsers.add(GroupMemberUserBasic.fromEntity(groupMemberUser));
      }
    } else if (entry.toUpperCase().equals(Schema.DIRECTION_DOWN)) {
      userList = groupQueryService.findMembersLedByLeader(communityId, userId, filter);
      for (Long uId : userList) {
        GroupMemberUser groupMemberUser = new GroupMemberUser(null, uId,
            new HashSet<>(Arrays.asList(Schema.ROLE_MEMBER)));
        memberUsers.add(GroupMemberUserBasic.fromEntity(groupMemberUser));
      }
    }

    return ResponseBody.fromFindResult(getPage(memberUsers, filter.getPageNumber(), filter.getPageSize()));
  }

  private void validateGroupInCommunity(long communityId, long groupId) {
    Optional<Group> group = groupService.findById(groupId);
    if (group.isPresent()) {
      long communityIdGroup = group.get().getCommunityId();
      if (communityId != communityIdGroup) {
        throw new ResourceNotFoundException(NOT_AUTHORIZED_FOR_THIS_RESOURCE);
      }
    }
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/io/web/v2/GroupResponse.java,"package com.globant.os.accounts.component.group.io.web.v2;

import static java.util.Objects.nonNull;
import static java.util.Optional.ofNullable;
import static java.util.stream.Collectors.toList;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.model.GroupChildGroup;
import com.globant.os.accounts.component.group.model.GroupCreationResponse;
import com.globant.os.accounts.component.group.model.GroupFilters;
import com.globant.os.accounts.component.group.model.GroupMemberUser;
import com.globant.os.accounts.component.group.model.GroupMetadata;
import com.globant.os.accounts.component.group.model.GroupRole;
import com.globant.os.accounts.component.group.model.GroupRoleBase;
import com.globant.os.accounts.support.web.AddMemberGroupError;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

public interface GroupResponse {

  @Getter
  @Setter
  @JsonInclude(Include.NON_NULL)
  @NoArgsConstructor
  class GroupDetails {

    private long id;
    private String name;
    private String visibility;
    private Long communityId;
    private String description;
    private List<String> customRoles;
    private List<GroupMetadataDetails> metadata;
    private List<GroupFilterDetails> filters;
    private String type;
    private List<GroupMemberDetails> leaders;
    private long amountOfMembers;
    private long amountOfSubgroups;
    private String origin;

    public static GroupDetails fromEntity(Group entity) {
      GroupDetails groupDetails = new GroupDetails();
      groupDetails.setId(entity.getId());
      groupDetails.setName(entity.getName());
      groupDetails.setVisibility(entity.getVisibility().name());
      groupDetails.setCommunityId(entity.getCommunityId());
      groupDetails.setDescription(entity.getDescription());
      groupDetails.setType(entity.getType().name());
      if (entity.getOrigin() != null) {
        groupDetails.setOrigin(entity.getOrigin().name());
      }
      List<GroupRole> groupRoles = entity.getRoles();
      setCustomRoles(groupRoles, groupDetails);
      setMetadata(entity, groupDetails);
      setAmounts(entity, groupDetails);
      setFilters(entity, groupDetails);
      return groupDetails;
    }

    private static void setCustomRoles(List<GroupRole> groupRoles, GroupDetails groupDetails) {
      boolean customRolesFound = false;
      if (groupRoles != null) {
        for (GroupRole groupRole : groupRoles) {
          if (!customRolesFound && groupRole.isCustom()) {
            groupDetails.customRoles = new ArrayList<>();
            customRolesFound = true;
          }
          if (groupRole.isCustom()) {
            groupDetails.customRoles.add(groupRole.getName());
          }
        }
      }
    }

    private static void setFilters(Group entity, GroupDetails groupDetails) {
      if (Optional.ofNullable(entity.getFilters()).isPresent()) {
        groupDetails.setFilters(new ArrayList<>());
        for (GroupFilters filter : entity.getFilters()) {
          GroupFilterDetails filterDetails = new GroupFilterDetails();
          filterDetails.setName(filter.getName());
          filterDetails.setValue(filter.getValue());
          groupDetails.getFilters().add(filterDetails);
        }
      }
    }

    private static void setMetadata(Group entity, GroupDetails groupDetails) {
      boolean metadataFound = false;
      if (ofNullable(entity.getMetadata()).isPresent()) {
        for (GroupMetadata groupMetadata : entity.getMetadata()) {
          if (!metadataFound) {
            groupDetails.metadata = new ArrayList<>();
            metadataFound = true;
          }
          GroupMetadataDetails metadata = new GroupMetadataDetails();
          metadata.setAttribute(groupMetadata.getId().getAttributeName());
          metadata.setValue(groupMetadata.getAttributeValue());
          groupDetails.metadata.add(metadata);
        }
      }
    }

    private static void setAmounts(Group entity, GroupDetails groupDetails) {
      Optional<List<GroupMemberUser>> optionalMemberUsers = ofNullable(entity.getGroupMemberUsers());

      if (optionalMemberUsers.isPresent()) {
        groupDetails.setAmountOfMembers(optionalMemberUsers.get().size());

        groupDetails.setLeaders(optionalMemberUsers.get().stream()
            .filter(mu -> mu.getRole().contains(GroupRoleBase.LEADER.name()))
            .map(mu -> new GroupMemberDetails(mu.getId().getUserId())).collect(toList()));
      }

      Optional<List<GroupChildGroup>> optionalMemberChildGroups = ofNullable(entity.getGroupChildGroups());

      if (optionalMemberChildGroups.isPresent()) {
        groupDetails.setAmountOfSubgroups(optionalMemberChildGroups.get().size());
      }
    }
  }

  @Getter
  @Setter
  @JsonInclude(Include.NON_NULL)
  class GroupDetailsCreation extends GroupDetails {

    private List<GroupMemberDetails> members;
    private List<AddMemberGroupError> errors;
    private String details;

    public static GroupDetailsCreation fromEntity(GroupCreationResponse groupCreationResponse) {
      GroupDetails groupDetails = GroupDetails.fromEntity(groupCreationResponse.getGroup());
      GroupDetailsCreation groupDetailsCreation = fromGroupDetails(groupDetails);
      setMembers(groupCreationResponse.getGroup(), groupDetailsCreation);
      if (groupCreationResponse.getErrors() != null && !groupCreationResponse.getErrors().isEmpty()) {
        groupDetailsCreation.setDetails(""The group was created but some members weren't added"");
        groupDetailsCreation.setErrors(groupCreationResponse.getErrors());
      }
      return groupDetailsCreation;
    }

    private static GroupDetailsCreation fromGroupDetails(GroupDetails groupDetails) {
      GroupDetailsCreation groupDetailsCreation = new GroupDetailsCreation();
      groupDetailsCreation.setId(groupDetails.getId());
      groupDetailsCreation.setName(groupDetails.getName());
      groupDetailsCreation.setVisibility(groupDetails.getVisibility());
      groupDetailsCreation.setCommunityId(groupDetails.getCommunityId());
      groupDetailsCreation.setDescription(groupDetails.getDescription());
      groupDetailsCreation.setCustomRoles(groupDetails.getCustomRoles());
      groupDetailsCreation.setMetadata(groupDetails.getMetadata());
      groupDetailsCreation.setFilters(groupDetails.getFilters());
      groupDetailsCreation.setType(groupDetails.getType());
      groupDetailsCreation.setOrigin(groupDetails.getOrigin());
      return groupDetailsCreation;
    }

    private static void setMembers(Group entity, GroupDetailsCreation groupDetails) {
      if (Optional.ofNullable(entity.getGroupMemberUsers()).isPresent()) {
        groupDetails.members = new ArrayList<>();
        for (GroupMemberUser groupMemberUser : entity.getGroupMemberUsers()) {
          groupDetails.members.add(new GroupMemberDetails(groupMemberUser.getId().getUserId(),
              new ArrayList<>(groupMemberUser.getRole())));
        }
      }
    }
  }

  @Getter
  @Setter
  @JsonInclude(Include.NON_NULL)
  class GroupBasic {

    private long id;
    private String name;
    private long communityId;
    private String visibility;
    private String description;
    private String type;
    private String origin;
    private List<GroupMetadataDetails> metadata;
    private List<GroupMemberDetails> leaders;
    private long amountOfMembers;
    private long amountOfSubgroups;

    public static GroupBasic fromEntity(Group entity) {
      GroupBasic groupBasic = new GroupBasic();
      groupBasic.setId(entity.getId());
      groupBasic.setName(entity.getName());
      groupBasic.setCommunityId(entity.getCommunityId());
      groupBasic.setVisibility(entity.getVisibility().name());
      groupBasic.setDescription(entity.getDescription());
      groupBasic.setType(entity.getType().name());
      if (nonNull(entity.getOrigin())) {
        groupBasic.setOrigin(entity.getOrigin().name());
      }
      setMetadata(entity, groupBasic);
      setAmounts(entity, groupBasic);
      return groupBasic;
    }

    private static void setAmounts(Group entity, GroupBasic groupBasic) {
      Optional<List<GroupMemberUser>> optionalMemberUsers = ofNullable(entity.getGroupMemberUsers());

      if (optionalMemberUsers.isPresent()) {
        groupBasic.setAmountOfMembers(optionalMemberUsers.get().size());

        groupBasic.setLeaders(optionalMemberUsers.get().stream()
            .filter(mu -> mu.getRole().contains(GroupRoleBase.LEADER.name()))
            .map(mu -> new GroupMemberDetails(mu.getId().getUserId())).collect(toList()));
      }

      Optional<List<GroupChildGroup>> optionalMemberChildGroups = ofNullable(entity.getGroupChildGroups());

      if (optionalMemberChildGroups.isPresent()) {
        groupBasic.setAmountOfSubgroups(optionalMemberChildGroups.get().size());
      }
    }

    private static void setMetadata(Group entity, GroupBasic groupBasic) {
      boolean metadataFound = false;
      if (ofNullable(entity.getMetadata()).isPresent()) {
        for (GroupMetadata groupMetadata : entity.getMetadata()) {
          if (!metadataFound) {
            groupBasic.metadata = new ArrayList<>();
            metadataFound = true;
          }
          GroupMetadataDetails metadata = new GroupMetadataDetails();
          metadata.setAttribute(groupMetadata.getId().getAttributeName());
          metadata.setValue(groupMetadata.getAttributeValue());
          groupBasic.metadata.add(metadata);
        }
      }
    }
  }

  @Getter
  @Setter
  @JsonInclude(Include.NON_NULL)
  class GroupMetadataDetails {
    private String attribute;
    private String value;
  }

  @Getter
  @Setter
  @NoArgsConstructor
  @JsonInclude(Include.NON_NULL)
  class GroupFilterDetails {
    private String name;
    private String value;
  }

  @Getter
  @Setter
  @JsonInclude(Include.NON_NULL)
  class GroupMemberDetails {

    private Long userId;
    private List<String> roles;

    private GroupMemberDetails(long userId) {
      this.userId = userId;
    }

    public GroupMemberDetails(Long userId, List<String> roles) {
      this(userId);
      this.roles = roles;
    }
  }

  @Getter
  @Setter
  @JsonInclude(Include.NON_NULL)
  class GroupMemberUserBasic {
    private long userId;
    private Long groupId;
    private Set<String> roles;

    public static GroupMemberUserBasic fromEntity(GroupMemberUser entity) {
      GroupMemberUserBasic groupMemberUserBasic = new GroupMemberUserBasic();
      if (nonNull(entity)) {
        groupMemberUserBasic.setUserId(entity.getId().getUserId());
        groupMemberUserBasic.setRoles(entity.getRole());
        if (nonNull(entity.getId().getGroup())) {
          groupMemberUserBasic.setGroupId(entity.getId().getGroup().getId());
        }
      }
      return groupMemberUserBasic;
    }
  }

  @Getter
  @Setter
  @JsonInclude(Include.NON_NULL)
  class GroupDynamicMemberUserBasic extends GroupMemberUserBasic {
    private boolean isStatic;

    public static GroupDynamicMemberUserBasic fromEntity(GroupMemberUser entity, boolean isStatic) {
      GroupDynamicMemberUserBasic groupDynamicMemberUserBasic = new GroupDynamicMemberUserBasic();
      groupDynamicMemberUserBasic.setUserId(entity.getId().getUserId());
      groupDynamicMemberUserBasic.setRoles(entity.getRole());
      groupDynamicMemberUserBasic.setStatic(isStatic);
      if (entity.getId().getGroup() != null) {
        groupDynamicMemberUserBasic.setGroupId(entity.getId().getGroup().getId());
      }
      return groupDynamicMemberUserBasic;
    }
  }

  @Getter
  @Setter
  @JsonInclude(Include.NON_NULL)
  class GroupMemberChildGroupBasic {
    private long groupId;
    private String name;

    public static GroupMemberChildGroupBasic fromEntity(GroupChildGroup entity) {
      GroupMemberChildGroupBasic groupMemberChildGroupBasic = new GroupMemberChildGroupBasic();
      groupMemberChildGroupBasic.setGroupId(entity.getId().getChildGroup().getId());
      groupMemberChildGroupBasic.setName(entity.getId().getChildGroup().getName());
      return groupMemberChildGroupBasic;
    }
  }

  @Getter
  @Setter
  @NoArgsConstructor
  @JsonInclude(Include.NON_NULL)
  class GroupQueriesResponse {

    private long id;
    private String name;
    private String visibility;
    private String description;
    private String type;

    public static GroupQueriesResponse fromEntity(Group entity) {
      GroupQueriesResponse groupQueriesResponse = new GroupQueriesResponse();
      groupQueriesResponse.setId(entity.getId());
      groupQueriesResponse.setName(entity.getName());
      groupQueriesResponse.setVisibility(entity.getVisibility().name());
      groupQueriesResponse.setDescription(entity.getDescription());
      groupQueriesResponse.setType(entity.getType().name());

      return groupQueriesResponse;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/io/gateway/GroupGraphGateway.java,"package com.globant.os.accounts.component.group.io.gateway;

import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.model.GroupChildGroup;
import com.globant.os.accounts.component.group.model.GroupMemberUser;
import com.globant.os.accounts.component.group.service.GroupQueryService.GroupDynamicMemberUser;
import com.globant.os.accounts.component.group.service.GroupQueryService.GroupQueryFilterCmd;
import java.util.List;

public interface GroupGraphGateway {

  void createGroup(Group group);

  void deleteGroup(Group group);

  void addMemberUser(GroupMemberUser groupMemberUser);

  void removeMemberUser(GroupMemberUser groupMemberUser);

  void addMemberChildGroup(GroupChildGroup groupChildGroup);

  void removeMemberChildGroup(GroupChildGroup groupChildGroup);

  List<GroupDynamicMemberUser> getMembersOfGroup(long communityId, long groupId, GroupQueryFilterCmd filter);

  List<Long> getGroupsOfMember(long communityId, long userId, GroupQueryFilterCmd filter);

  List<Long> getMembersLedByLeader(long communityId, long userId, GroupQueryFilterCmd filter);

  List<Long> getLeadersByMember(long communityId, long userId, GroupQueryFilterCmd filter);
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/io/gateway/GroupSpecificationFactory.java,"package com.globant.os.accounts.component.group.io.gateway;

import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.model.GroupMemberUser;
import com.globant.os.accounts.component.group.model.GroupOrigin;
import com.globant.os.accounts.component.group.model.GroupType;
import com.globant.os.accounts.component.group.model.GroupVisibility;
import com.globant.os.accounts.component.shared.model.Schema;
import javax.persistence.criteria.Join;
import org.springframework.data.jpa.domain.Specification;

public class GroupSpecificationFactory {

  public static Specification<Group> withId(final long id) {
    return (root, query, cb) -> cb.equal(root.get(""id""), id);
  }

  public static Specification<Group> withIsEnabled(final boolean isEnable) {
    return (root, query, cb) -> cb.equal(root.get(""enabled""), isEnable);
  }

  public static Specification<Group> withNameLikeIgnoreCase(final String name) {
    return (root, query, cb) -> cb.like(cb.upper(root.get(""name"")), ""%"" + name.toUpperCase() + ""%"");
  }

  public static Specification<Group> withCodeLikeIgnoreCase(final String referenceTye) {
    return (root, query, cb) -> cb.like(cb.upper(root.get(""description"")), ""%"" + referenceTye.toUpperCase() + ""%"");
  }

  public static Specification<Group> withVisibility(final GroupVisibility visibility) {
    return (root, query, cb) -> cb.equal(root.get(""visibility""), visibility);
  }

  public static Specification<Group> withCommunityId(final long communityId) {
    return (root, query, cb) -> cb.equal(root.get(""communityId""), communityId);
  }

  public static Specification<Group> withType(String type) {
    return (root, query, cb) -> cb.equal(root.get(""type""), GroupType.fromValue(type));
  }

  public static Specification<Group> withOrigin(String origin) {
    return (root, query, cb) -> cb.equal(root.get(""origin""), GroupOrigin.fromValue(origin));
  }

  public static Specification<Group> withAssignedMemberIdOrRole(final long userId, final String role) {
    return (root, query, cb) -> {
      Join<Group, GroupMemberUser> members = root.join(""groupMemberUsers"");
      query.groupBy(root.get(""id""));
      if (role == null) {
        return cb.and(cb.equal(members.get(""id"").get(""group""), root),
            cb.equal(members.get(""id"").get(""userId""), userId));
      } else if (role.equals(Schema.ROLE_LEADER)) {
        return cb.and(cb.equal(members.get(""id"").get(""group""), root),
            cb.equal(members.get(""id"").get(""userId""), userId), cb.and(cb.equal(members.join(""role""), role)));
      } else {
        query.having(cb.equal(cb.countDistinct(members.join(""role"")), 1));
        return cb.and(cb.equal(members.get(""id"").get(""group""), root),
            cb.equal(members.get(""id"").get(""userId""), userId),  cb.and(cb.equal(members.join(""role""), role)));
      }
    };
  }

  public static Specification<Group> withRole(final String role) {
    return (root, query, cb) -> {
      Join<Group, GroupMemberUser> members = root.join(""groupMemberUsers"");
      return cb.and(members.join(""role"").in(role));
    };
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/io/gateway/GroupGraphRepository.java,"package com.globant.os.accounts.component.group.io.gateway;

import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.model.GroupChildGroup;
import com.globant.os.accounts.component.group.model.GroupMemberUser;
import com.globant.os.accounts.component.group.service.GroupQueryService.GroupDynamicMemberUser;
import com.globant.os.accounts.component.group.service.GroupQueryService.GroupQueryFilterCmd;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Getter;

public interface GroupGraphRepository {

  void createGroup(Group group);

  void deleteGroup(Group group);

  void addMemberUser(GroupMemberUser groupMemberUser);

  void removeMemberUser(GroupMemberUser groupMemberUser);

  void removeMemberUserToGroups(GraphDeleteMemberGroupParam graphParams);

  void addMemberChildGroup(GroupChildGroup groupChildGroup);

  void removeMemberChildGroup(GroupChildGroup groupChildGroup);

  List<GroupDynamicMemberUser> getMembersOfGroup(long communityId, long groupId, GroupQueryFilterCmd filter);

  List<Long> getGroupsOfMember(long communityId, long userId, GroupQueryFilterCmd filter);

  List<Long> getMembersLedByLeader(long communityId, long userId, GroupQueryFilterCmd filter);

  List<Long> getLeadersByMember(long communityId, long userId, GroupQueryFilterCmd filter);

  @Getter
  @AllArgsConstructor
  public class GraphDeleteMemberGroupParam {

    private long communityId;
    private long userId;
    private List<Long> groupsIds;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/io/gateway/GroupGateway.java,"package com.globant.os.accounts.component.group.io.gateway;

import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.model.GroupChildGroup;
import com.globant.os.accounts.component.group.model.GroupChildGroup.ChildGroupPk;
import com.globant.os.accounts.component.group.model.GroupMemberUser;
import com.globant.os.accounts.component.group.model.GroupMemberUser.Pk;
import com.globant.os.accounts.component.group.model.GroupType;
import com.globant.os.accounts.component.group.service.GroupService.GroupFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;

public interface GroupGateway {

  Optional<Group> findById(long id);

  List<Group> findAll();

  FindResult<Group> findAll(GroupFindCmd cmd);

  Group save(Group entity);

  void delete(Group entity);

  List<GroupMemberUser> saveMemberUser(List<GroupMemberUser> entities);

  void deleteMemberUser(GroupMemberUser entity);

  void deleteMemberUserToGroups(long communityId, long userId, List<Long> groupIds);

  Optional<GroupMemberUser> findMemberUserById(Pk id);

  GroupMemberUser memberUserByUserId(long userId, GroupType groupType);

  GroupChildGroup saveMemberChildGroup(GroupChildGroup entity);

  void deleteMemberChildGroup(GroupChildGroup entity);

  GroupChildGroup findMemberChildGroupById(ChildGroupPk id);

  List<GroupChildGroup> findMemberChildGroupByChildGroupId(long childGroupId);

  List<GroupMemberUser> deleteMemberUserFromInterestGroup(List<GroupMemberUser> entities);

  boolean existsGroupWithName(Long communityId, Long groupId, String name);
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/io/gateway/GroupGatewayImpl.java,"package com.globant.os.accounts.component.group.io.gateway;

import static java.util.stream.Collectors.toList;

import com.globant.os.accounts.component.group.io.gateway.GroupGraphRepository.GraphDeleteMemberGroupParam;
import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.model.GroupChildGroup;
import com.globant.os.accounts.component.group.model.GroupChildGroup.ChildGroupPk;
import com.globant.os.accounts.component.group.model.GroupMemberUser;
import com.globant.os.accounts.component.group.model.GroupMemberUser.Pk;
import com.globant.os.accounts.component.group.model.GroupRoleBase;
import com.globant.os.accounts.component.group.model.GroupType;
import com.globant.os.accounts.component.group.model.GroupVisibility;
import com.globant.os.accounts.component.group.service.GroupService.GroupFindCmd;
import com.globant.os.accounts.component.shared.io.gateway.SpringData;
import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.Order;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.RepositoryDefinition;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;

@Repository
public class GroupGatewayImpl implements GroupGateway {

  @Autowired
  private JpaGroupRepository groupRepository;

  @Autowired
  private JpaMemberUserRepository memberUserRepository;

  @Autowired
  private JpaMemberChildGroupRepository memberChildGroupRepository;

  @Autowired
  private GroupGraphRepository groupGraphRepository;

  @Override
  @Transactional
  public Group save(final Group entity) {
    Group group = groupRepository.save(entity);
    groupGraphRepository.createGroup(group);
    return group;
  }

  @Override
  @Transactional(readOnly = true)
  public Optional<Group> findById(final long id) {
    return groupRepository.findById(id);
  }

  @Override
  @Transactional(readOnly = true)
  public List<Group> findAll() {
    return groupRepository.findAll();
  }

  @Override
  @Transactional(readOnly = true)
  public FindResult<Group> findAll(final GroupFindCmd request) {
    if (request.getSort() == null || request.getSort().isEmpty()) {
      request.setSort(Arrays.asList(Order.fromString(""name:ASC"")));
    }
    PageRequest page = SpringData.makePageRequest(request);
    Page<Group> resultPage = groupRepository.findAll(buildGroupSpecification(request), page);
    return SpringData.makeFindResult(resultPage);
  }

  private Specification<Group> buildGroupSpecification(final GroupFindCmd request) {
    Specification<Group> spec = Specification.where(GroupSpecificationFactory.withIsEnabled(true));
    if (request.getDescription().isPresent()) {
      spec = spec.and(GroupSpecificationFactory.withCodeLikeIgnoreCase(request.getDescription().get()));
    }
    if (request.getVisibility().isPresent()) {
      spec = spec
              .and(GroupSpecificationFactory.withVisibility(GroupVisibility.fromValue(request.getVisibility().get())));
    }
    if (request.getGroupName().isPresent()) {
      spec = spec
              .and(GroupSpecificationFactory.withNameLikeIgnoreCase(request.getGroupName().get()));
    }
    if (request.getCommunityId().isPresent()) {
      spec = spec.and(GroupSpecificationFactory.withCommunityId(request.getCommunityId().get()));
    }
    if (request.getMemberId().isPresent()) {
      spec = spec.and(GroupSpecificationFactory.withAssignedMemberIdOrRole(request.getMemberId().get(),
              getRol(request)));
    }
    if (request.getType().isPresent()) {
      spec = spec.and(buildTypeSpecification(request.getType()));
    }
    if (request.getOrigin().isPresent()) {
      spec = spec.and(buildOriginSpecification(request.getOrigin()));
    }
    return spec;
  }

  private String getRol(final GroupFindCmd request) {
    String role = null;
    if (request.getRole().isPresent()) {
      role = GroupRoleBase.fromValue(request.getRole().get()).toString();
    }
    return role;
  }

  private Specification<Group> buildTypeSpecification(Optional<String> type) {
    String[] typeValues = type.get().split("","");
    Specification<Group> specType = Specification.where(GroupSpecificationFactory.withType(typeValues[0]));
    for (int i = 1; i < typeValues.length; i++) {
      specType  = specType.or(GroupSpecificationFactory.withType(typeValues[i]));
    }
    return specType;
  }

  private Specification<Group> buildOriginSpecification(Optional<String> type) {
    String[] originValues = type.get().split("","");
    Specification<Group> specType = Specification.where(GroupSpecificationFactory.withOrigin(originValues[0]));
    for (int i = 1; i < originValues.length; i++) {
      specType  = specType.or(GroupSpecificationFactory.withOrigin(originValues[i]));
    }
    return specType;
  }

  @Override
  @Transactional
  public void delete(Group entity) {
    groupRepository.delete(entity);
    groupGraphRepository.deleteGroup(entity);
  }

  @Override
  @Transactional(isolation = Isolation.READ_COMMITTED)
  public List<GroupMemberUser> saveMemberUser(List<GroupMemberUser> entities) {
    List<GroupMemberUser> groupMemberUsers = new LinkedList<>();
    memberUserRepository.saveAll(entities).forEach(groupMemberUsers::add);
    groupMemberUsers.forEach(memberUser -> groupGraphRepository.addMemberUser(memberUser));
    return groupMemberUsers;
  }

  @Override
  @Transactional(isolation = Isolation.READ_COMMITTED)
  public List<GroupMemberUser> deleteMemberUserFromInterestGroup(List<GroupMemberUser> entities) {
    List<GroupMemberUser> groupMemberUsers = new LinkedList<>();
    memberUserRepository.saveAll(entities).forEach(groupMemberUsers::add);
    groupMemberUsers.forEach(memberUser -> groupGraphRepository.removeMemberUser(memberUser));
    return groupMemberUsers;
  }

  @Override
  @Transactional
  public void deleteMemberUser(GroupMemberUser entity) {
    memberUserRepository.delete(entity);
    groupGraphRepository.removeMemberUser(entity);
  }

  @Override
  @Transactional
  public void deleteMemberUserToGroups(long communityId, long userId, List<Long> groupsIds) {
    List<GroupMemberUser> entities = new LinkedList<>();
    memberUserRepository.findAllById(groupsIds.stream().map(groupId -> {
      Group group = new Group();
      group.setId(groupId);
      return new Pk(group, userId);
    }).collect(toList())).forEach(entities::add);

    memberUserRepository.deleteAll(entities);
    groupGraphRepository.removeMemberUserToGroups(new GraphDeleteMemberGroupParam(communityId, userId, groupsIds));
  }

  @Override
  @Transactional(readOnly = true)
  public Optional<GroupMemberUser> findMemberUserById(Pk id) {
    return memberUserRepository.findById(id);
  }

  @Override
  @Transactional(readOnly = true)
  public GroupMemberUser memberUserByUserId(long userId, GroupType groupType) {
    return memberUserRepository.memberUserByUserId(userId, groupType);
  }

  @Override
  @Transactional
  public GroupChildGroup saveMemberChildGroup(GroupChildGroup entity) {
    GroupChildGroup groupChildGroup = memberChildGroupRepository.save(entity);
    groupGraphRepository.addMemberChildGroup(groupChildGroup);
    return groupChildGroup;
  }

  @Override
  @Transactional
  public void deleteMemberChildGroup(GroupChildGroup entity) {
    memberChildGroupRepository.delete(entity);
    groupGraphRepository.removeMemberChildGroup(entity);
  }

  @Override
  @Transactional(readOnly = true)
  public List<GroupChildGroup> findMemberChildGroupByChildGroupId(long childGroupId) {
    return memberChildGroupRepository.memberChildGroupsBychildGroupId(childGroupId);
  }

  @Override
  @Transactional(readOnly = true)
  public GroupChildGroup findMemberChildGroupById(ChildGroupPk id) {
    return memberChildGroupRepository.findById(id);
  }

  @Override
  @Transactional(readOnly = true)
  public boolean existsGroupWithName(Long communityId, Long groupId, String name) {
    String nameFound = null;
    if (groupId != null) {
      nameFound = groupRepository.existsGroupWithName(communityId, groupId, name);
    } else {
      nameFound = groupRepository.existsGroupWithName(communityId, name);
    }
    return nameFound != null && !nameFound.isEmpty();
  }

  @RepositoryDefinition(domainClass = Group.class, idClass = Long.class)
  interface JpaGroupRepository extends JpaSpecificationExecutor<Group> {

    Optional<Group> findById(Long id);

    List<Group> findAll();

    Group save(Group entity);

    void delete(Group entity);

    @Query(""SELECT g.name FROM Group as g WHERE g.id != :groupId and g.communityId = :communityId and g.name = :name"")
    String existsGroupWithName(@Param(""communityId"") Long communityId, @Param(""groupId"") Long groupId,
        @Param(""name"") String name);

    @Query(""SELECT g.name FROM Group as g WHERE g.communityId = :communityId and g.name = :name"")
    String existsGroupWithName(@Param(""communityId"") Long communityId, @Param(""name"") String name);
  }

  @RepositoryDefinition(domainClass = GroupMemberUser.class, idClass = Long.class)
  interface JpaMemberUserRepository extends CrudRepository<GroupMemberUser, Pk> {
    @Query(""SELECT mu FROM GroupMemberUser as mu join mu.role r WHERE mu.id.group.type =:groupType and ""
        + ""mu.id.userId =:userId and r='LEADER'"")
    GroupMemberUser memberUserByUserId(@Param(""userId"") long userId, @Param(""groupType"") GroupType groupType);
  }

  @RepositoryDefinition(domainClass = GroupChildGroup.class, idClass = Long.class)
  interface JpaMemberChildGroupRepository extends JpaSpecificationExecutor<GroupChildGroup> {
    GroupChildGroup save(GroupChildGroup entity);

    GroupChildGroup findById(ChildGroupPk id);

    void delete(GroupChildGroup entity);

    @Query(""SELECT mcg FROM GroupChildGroup as mcg WHERE mcg.id.childGroup.id =:childGroupId"")
    List<GroupChildGroup> memberChildGroupsBychildGroupId(@Param(""childGroupId"") long childGroupId);
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/io/gateway/GroupGraphGatewayImpl.java,"package com.globant.os.accounts.component.group.io.gateway;

import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.model.GroupChildGroup;
import com.globant.os.accounts.component.group.model.GroupMemberUser;
import com.globant.os.accounts.component.group.service.GroupQueryService.GroupDynamicMemberUser;
import com.globant.os.accounts.component.group.service.GroupQueryService.GroupQueryFilterCmd;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class GroupGraphGatewayImpl implements GroupGraphGateway {

  @Autowired
  GroupGraphRepository repository;

  @Override
  public void createGroup(Group group) {
    repository.createGroup(group);
  }

  @Override
  public void deleteGroup(Group group) {
    repository.deleteGroup(group);
  }

  @Override
  public void addMemberUser(GroupMemberUser groupMemberUser) {
    repository.addMemberUser(groupMemberUser);
  }

  @Override
  public void removeMemberUser(GroupMemberUser groupMemberUser) {
    repository.removeMemberUser(groupMemberUser);
  }

  @Override
  public void addMemberChildGroup(GroupChildGroup groupChildGroup) {
    repository.addMemberChildGroup(groupChildGroup);
  }

  @Override
  public void removeMemberChildGroup(GroupChildGroup groupChildGroup) {
    repository.removeMemberChildGroup(groupChildGroup);
  }

  @Override
  public List<GroupDynamicMemberUser> getMembersOfGroup(long communityId, long groupId, GroupQueryFilterCmd filter) {
    return repository.getMembersOfGroup(communityId, groupId, filter);
  }

  @Override
  public List<Long> getGroupsOfMember(long communityId, long userId, GroupQueryFilterCmd filter) {
    return repository.getGroupsOfMember(communityId, userId, filter);
  }

  @Override
  public List<Long> getMembersLedByLeader(long communityId, long userId, GroupQueryFilterCmd filter) {
    return repository.getMembersLedByLeader(communityId, userId, filter);
  }

  @Override
  public List<Long> getLeadersByMember(long communityId, long userId, GroupQueryFilterCmd filter) {
    return repository.getLeadersByMember(communityId, userId, filter);
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/RoleMemberUpdatedEvent.java,"package com.globant.os.accounts.component.group.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.HashMap;

public class RoleMemberUpdatedEvent extends BaseGroupEvent {

  private static final String USER_ID = ""userId"";
  private static final String ROLE = ""role"";

  @JsonIgnore
  private Long userId;

  @JsonIgnore
  private String role;

  public RoleMemberUpdatedEvent(String type, String source, long timestamp, Long groupId, Long communityId) {
    super(type, source, timestamp, groupId, communityId);
  }

  public static Builder builder(String type, String source, long timestamp, Long groupId, Long communityId) {
    return new Builder(type, source, timestamp, groupId, communityId);
  }

  @Override
  public Serializable getPayload() {
    HashMap<String, Object> payload = createPayload();
    payload.put(USER_ID, userId);
    payload.put(ROLE, role);
    return payload;
  }

  @Override
  public String toString() {
    return ""MemberDeletedEvent [userId="" + userId + "", role="" + role + "", baseGroupEvent="" + super.toString() + ""]"";
  }

  public static class Builder {

    private RoleMemberUpdatedEvent event;

    private Builder(String type, String source, long timestamp, Long groupId, Long communityId) {
      this.event = new RoleMemberUpdatedEvent(type, source, timestamp, groupId, communityId);
    }

    public Builder userId(Long userId) {
      this.event.userId = userId;
      return this;
    }

    public Builder role(String role) {
      this.event.role = role;
      return this;
    }

    public RoleMemberUpdatedEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupRole.java,"package com.globant.os.accounts.component.group.model;

import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@NoArgsConstructor
@ToString(of = { ""name"", ""isCustom"" })
@Entity
@Table(uniqueConstraints = { @UniqueConstraint(columnNames = { ""group_id"", ""name"" }) })
public class GroupRole {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Setter(AccessLevel.PACKAGE)
  private Long id;

  @ManyToOne(fetch = FetchType.LAZY)
  private Group group;

  @Basic(optional = false)
  private String name;

  @Basic(optional = false)
  private Boolean isCustom;

  @Version
  private short version;

  public GroupRole(Group group, String name, boolean isCustom) {
    this.group = group;
    this.name = name;
    this.isCustom = isCustom;
  }

  public boolean isCustom() {
    return isCustom;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupChildGroup.java,"package com.globant.os.accounts.component.group.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import javax.persistence.Embeddable;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@NoArgsConstructor
@ToString(of = { ""id"" })
@Entity
public class GroupChildGroup {

  @EmbeddedId
  private ChildGroupPk id;

  public GroupChildGroup(Group group, long childGroupId) {
    ChildGroupPk id = new ChildGroupPk(group, childGroupId);
    this.id = id;
  }

  @Embeddable
  @Getter
  @Setter
  @NoArgsConstructor
  @AllArgsConstructor
  @EqualsAndHashCode(of = { ""group"", ""childGroup"" })
  @ToString(of = { ""group"", ""childGroup"" })
  public static class ChildGroupPk implements Serializable {

    private static final long serialVersionUID = 1L;

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY)
    private Group group;

    @JsonIgnore
    @OneToOne(fetch = FetchType.LAZY)
    private Group childGroup;

    public ChildGroupPk(Group group, long childGroupId) {
      this.group = group;
      Group childGroup = new Group();
      childGroup.setId(childGroupId);
      this.childGroup = childGroup;
    }

    public long getChildGroupId() {
      return childGroup.getId();
    }
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/MemberDeletedEvent.java,"package com.globant.os.accounts.component.group.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.HashMap;

public class MemberDeletedEvent extends BaseGroupEvent {

  private static final String USER_ID = ""userId"";

  @JsonIgnore
  private Long userId;

  public MemberDeletedEvent(String type, String source, long timestamp, Long groupId, Long communityId) {
    super(type, source, timestamp, groupId, communityId);
  }

  public static Builder builder(String source, long timestamp, Long groupId, Long communityId) {
    return new Builder(GroupTypeEvent.GROUP_MEMBER_DELETED.getType(), source, timestamp, groupId, communityId);
  }

  @Override
  public Serializable getPayload() {
    HashMap<String, Object> payload = createPayload();
    payload.put(USER_ID, userId);
    return payload;
  }

  @Override
  public String toString() {
    return ""MemberDeletedEvent [userId="" + userId + "", baseGroupEvent="" + super.toString() + ""]"";
  }

  public static class Builder {

    private MemberDeletedEvent event;

    private Builder(String type, String source, long timestamp, Long groupId, Long communityId) {
      this.event = new MemberDeletedEvent(type, source, timestamp, groupId, communityId);
    }

    public Builder userId(Long userId) {
      this.event.userId = userId;
      return this;
    }

    public MemberDeletedEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupVisibility.java,"package com.globant.os.accounts.component.group.model;

import com.globant.os.accounts.component.group.service.GroupPermissionsValidator;
import com.globant.os.accounts.component.group.service.GroupPermissionsValidatorClosedPublicStrategy;
import com.globant.os.accounts.component.group.service.GroupPermissionsValidatorClosedSecretStrategy;
import com.globant.os.accounts.component.group.service.GroupPermissionsValidatorPublicStrategy;
import com.globant.os.accounts.support.web.BadRequestException;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public enum GroupVisibility {

  PUBLIC {
    @Override
    public GroupPermissionsValidator getPermissionsValidator() {
      return new GroupPermissionsValidatorPublicStrategy();
    }
  },
  CLOSED {
    @Override
    public GroupPermissionsValidator getPermissionsValidator() {
      return new GroupPermissionsValidatorClosedPublicStrategy();
    }
  },
  SECRET {
    @Override
    public GroupPermissionsValidator getPermissionsValidator() {
      return new GroupPermissionsValidatorClosedSecretStrategy();
    }
  };

  private static final String INVALID_VISIBILITY_MESSAGE = ""Invalid visibility value ['%s'] - [Allowed values: '%s']"";

  public static GroupVisibility fromValue(String value) {
    try {
      return valueOf(value.toUpperCase());
    } catch (IllegalArgumentException exception) {
      throw new BadRequestException(String.format(INVALID_VISIBILITY_MESSAGE, value, String.join(""', '"",
          Stream.of(GroupVisibility.values()).map(GroupVisibility::name).collect(Collectors.toList()))));
    }
  }

  public static String getListOfVisibilitiesAsString() {
    return String.format(""'%s'"",
        String.join(""', '"", Stream.of(values()).map(GroupVisibility::name).collect(Collectors.toList())));
  }

  public abstract GroupPermissionsValidator getPermissionsValidator();
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/Group.java,"package com.globant.os.accounts.component.group.model;

import com.globant.os.accounts.component.shared.model.BaseEntity;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@NoArgsConstructor
@EqualsAndHashCode(callSuper = false, of = { ""name"", ""description"", ""visibility"", ""communityId"", ""type"" })
@ToString(of = { ""id"", ""name"", ""description"", ""visibility"", ""communityId"", ""type"" })
@Entity
@Table(name = ""groups"")
public class Group extends BaseEntity<Long> {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Basic(optional = false)
  private String name;

  @Basic(optional = false)
  private String description;

  @Basic(optional = false)
  @Enumerated(EnumType.STRING)
  private GroupVisibility visibility;

  @Basic(optional = false)
  @Enumerated(EnumType.STRING)
  private GroupType type;

  @Basic(optional = false)
  @Enumerated(EnumType.STRING)
  private GroupOrigin origin;

  //@ManyToOne(fetch = FetchType.LAZY)
  @Basic(optional = false)
  private Long communityId;

  @OneToMany(fetch = FetchType.LAZY, orphanRemoval = true, cascade = CascadeType.ALL, mappedBy = ""id.group"")
  private List<GroupMetadata> metadata;

  @OneToMany(fetch = FetchType.LAZY, orphanRemoval = true, cascade = CascadeType.ALL, mappedBy = ""id.group"")
  private List<GroupMemberUser> groupMemberUsers;

  @OneToMany(fetch = FetchType.LAZY, orphanRemoval = true, cascade = CascadeType.ALL, mappedBy = ""id.group"")
  private List<GroupChildGroup> groupChildGroups;

  @OneToMany(fetch = FetchType.LAZY, orphanRemoval = true, cascade = CascadeType.ALL, mappedBy = ""group"")
  private List<GroupRole> roles;

  @OneToMany(fetch = FetchType.LAZY, orphanRemoval = true, cascade = CascadeType.ALL, mappedBy = ""group"")
  private List<GroupFilters> filters;

  public void updateRoles(final List<GroupRole> groupRoles) {
    getRoles().clear();
    getRoles().addAll(groupRoles);
  }

  public void updateMetadata(final List<GroupMetadata> metadata) {
    getMetadata().clear();
    getMetadata().addAll(metadata);
  }

  public void updatFilters(final List<GroupFilters> filters) {
    getFilters().clear();
    getFilters().addAll(filters);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupMetadata.java,"package com.globant.os.accounts.component.group.model;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Embeddable;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.Version;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Entity
@Getter
@Setter
@NoArgsConstructor
@ToString(of = { ""id"", ""attributeValue"" })
public class GroupMetadata {

  @EmbeddedId
  private GroupMetadataId id;

  @Basic(optional = false)
  private String attributeValue;

  @Version
  private short version;

  @Embeddable
  @Getter
  @Setter
  @EqualsAndHashCode(of = { ""attributeName"", ""group"" })
  @ToString(of = { ""attributeName"", ""group"" })
  public static class GroupMetadataId implements Serializable {

    private static final long serialVersionUID = 1L;

    @Basic(optional = false)
    private String attributeName;

    @ManyToOne(fetch = FetchType.LAZY)
    private Group group;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupCreatedEvent.java,"package com.globant.os.accounts.component.group.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.HashMap;
import lombok.Getter;

@Getter
public class GroupCreatedEvent extends BaseGroupEvent {

  private static final String NAME = ""name"";
  private static final String TYPE = ""type"";
  private static final String ORIGIN = ""origin"";

  @JsonIgnore
  private String name;
  @JsonIgnore
  private String groupType;
  @JsonIgnore
  private String origin;

  private GroupCreatedEvent(String type, String source, long timestamp, Long groupId, Long communityId) {
    super(type, source, timestamp, groupId, communityId);
  }

  public static Builder builder(String source, long timestamp, Long groupId, Long communityId) {
    return new Builder(GroupTypeEvent.GROUP_CREATED.getType(), source, timestamp, groupId, communityId);
  }

  @Override
  public Serializable getPayload() {
    HashMap<String, Object> payload = createPayload();
    payload.put(NAME, name);
    payload.put(TYPE, groupType);
    payload.put(ORIGIN, origin);
    return payload;
  }

  @Override
  public String toString() {
    return ""CommunityCreatedEvent [origin= "" + origin + "", name="" + name + "", groupType="" + groupType + "", ""
        + ""baseGroupEvent="" + super.toString() + ""]"";
  }

  public static class Builder {

    private GroupCreatedEvent event;

    private Builder(String type, String source, long timestamp, Long groupId, Long communityId) {
      this.event = new GroupCreatedEvent(type, source, timestamp, groupId, communityId);
    }

    public Builder name(String name) {
      this.event.name = name;
      return this;
    }

    public Builder groupType(String groupType) {
      this.event.groupType = groupType;
      return this;
    }

    public Builder origin(String origin) {
      this.event.origin = origin;
      return this;
    }

    public GroupCreatedEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupDeletedEvent.java,"package com.globant.os.accounts.component.group.model;

import java.io.Serializable;

public class GroupDeletedEvent extends BaseGroupEvent {

  public GroupDeletedEvent(String source, long timestamp, Long groupId, Long communityId) {
    super(GroupTypeEvent.GROUP_DELETED.getType(), source, timestamp, groupId, communityId);
  }

  @Override
  public Serializable getPayload() {
    return createPayload();
  }

  @Override
  public String toString() {
    return ""GroupDeletedEvent [baseGroupEvent="" + super.toString() + ""]"";
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupCreationResponse.java,"package com.globant.os.accounts.component.group.model;

import com.globant.os.accounts.support.web.AddMemberGroupError;
import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class GroupCreationResponse {
  private Group group;
  private List<AddMemberGroupError> errors;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/BaseGroupEvent.java,"package com.globant.os.accounts.component.group.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.globant.smu.os.events.shared.model.BaseEvent;
import java.util.HashMap;

public class BaseGroupEvent extends BaseEvent {

  private static final String COMMUNITY_ID = ""communityId"";
  private static final String GROUP_ID = ""groupId"";

  @JsonIgnore
  protected Long groupId;
  @JsonIgnore
  protected Long communityId;

  public BaseGroupEvent(String type, String source, long timestamp, Long groupId, Long communityId) {
    super(type, source, timestamp);
    this.groupId = groupId;
    this.communityId = communityId;
  }

  protected HashMap<String, Object> createPayload() {
    HashMap<String, Object> payload = new HashMap<>();
    payload.put(COMMUNITY_ID, communityId);
    payload.put(GROUP_ID, groupId);

    return payload;
  }

  @Override
  public String toString() {
    return ""BaseCommunityEvent [groupId="" + groupId + "", communityId="" + communityId + "", timestamp="" + getTimestamp()
        + "", source="" + getSource() + "", type="" + getType() + ""]"";
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupUpdatedEvent.java,"package com.globant.os.accounts.component.group.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.HashMap;
import lombok.Getter;

@Getter
public class GroupUpdatedEvent extends BaseGroupEvent {

  private static final String NAME = ""name"";
  private static final String TYPE = ""type"";
  private static final String ORIGIN = ""origin"";
  private static final String MEMBERS = ""members"";
  private static final String CHILDGROUPS = ""chidGroups"";
  private static final String FILTERS = ""filters"";

  @JsonIgnore
  private String name;
  @JsonIgnore
  private String groupType;
  @JsonIgnore
  private String origin;
  @JsonIgnore
  private String members;
  @JsonIgnore
  private String childGroups;
  @JsonIgnore
  private String filters;

  private GroupUpdatedEvent(String type, String source, long timestamp, Long groupId, Long communityId) {
    super(type, source, timestamp, groupId, communityId);
  }

  public static Builder builder(String source, long timestamp, Long groupId, Long communityId) {
    return new Builder(GroupTypeEvent.GROUP_UPDATED.getType(), source, timestamp, groupId, communityId);
  }

  @Override
  public Serializable getPayload() {
    HashMap<String, Object> payload = createPayload();
    payload.put(NAME, name);
    payload.put(TYPE, groupType);
    payload.put(ORIGIN, origin);
    payload.put(MEMBERS, members);
    payload.put(CHILDGROUPS, childGroups);
    payload.put(FILTERS, filters);
    return payload;
  }

  @Override
  public String toString() {
    return ""CommunityCreatedEvent [origin= "" + origin + "", name="" + name +  "", groupType="" + groupType + "", members=""
        + members + "", childGroups="" + childGroups + "", filters="" + filters + "", baseGroupEvent="" + super.toString()
        + ""]"";
  }

  public static class Builder {

    private GroupUpdatedEvent event;

    private Builder(String type, String source, long timestamp, Long groupId, Long communityId) {
      this.event = new GroupUpdatedEvent(type, source, timestamp, groupId, communityId);
    }

    public Builder name(String name) {
      this.event.name = name;
      return this;
    }

    public Builder groupType(String groupType) {
      this.event.groupType = groupType;
      return this;
    }

    public Builder members(String members) {
      this.event.members = members;
      return this;
    }

    public Builder childGroups(String childGroups) {
      this.event.childGroups = childGroups;
      return this;
    }

    public Builder filters(String filters) {
      this.event.filters = filters;
      return this;
    }

    public Builder origin(String origin) {
      this.event.origin = origin;
      return this;
    }

    public GroupUpdatedEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupMemberUser.java,"package com.globant.os.accounts.component.group.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.Date;
import java.util.Set;
import javax.persistence.CollectionTable;
import javax.persistence.ElementCollection;
import javax.persistence.Embeddable;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.Version;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@NoArgsConstructor
@ToString(of = { ""id"" })
@Entity
public class GroupMemberUser {

  @EmbeddedId
  private Pk id;

  private boolean enabled = true;

  @Version
  private short version;

  @ElementCollection
  @CollectionTable(name = ""group_member_user_role"")
  private Set<String> role;

  private Date dateFrom;

  private Date dateTo;

  public GroupMemberUser(Group group, long userId, Set<String> role) {
    Pk id = new Pk(group, userId);
    this.id = id;
    this.role = role;
  }

  @Embeddable
  @Getter
  @Setter
  @NoArgsConstructor
  @AllArgsConstructor
  @EqualsAndHashCode(of = { ""group"", ""userId"" })
  @ToString(of = { ""group"", ""userId"" })
  public static class Pk implements Serializable {

    private static final long serialVersionUID = 1L;

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY)
    private Group group;

    private long userId;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupTypeEvent.java,"package com.globant.os.accounts.component.group.model;

public enum GroupTypeEvent {

  GROUP_CREATED(""os.group.created""),
  GROUP_UPDATED(""os.group.updated""),
  GROUP_DELETED(""os.group.deleted""),
  GROUP_MEMBERS_ADDED(""os.group.members.added""),
  GROUP_MEMBERS_UPDATED(""os.group.members.updated""),
  GROUP_MEMBER_DELETED(""os.group.member.deleted""),
  GROUP_ROLE_MEMBER_DELETED(""os.group.member.role.deleted""),
  GROUP_ROLE_MEMBER_ADDED(""os.group.member.role.added"");

  private String type;

  private GroupTypeEvent(String type) {
    this.type = type;
  }

  public String getType() {
    return type;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupFilters.java,"package com.globant.os.accounts.component.group.model;

import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@Entity
public class GroupFilters {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Setter(AccessLevel.PACKAGE)
  private Long id;

  @ManyToOne(fetch = FetchType.LAZY)
  private Group group;

  @Basic(optional = false)
  private String name;

  @Basic(optional = false)
  private String value;

  @Override public String toString() {
    return ""{name:"" + this.getName() + "", value:"" + this.value + ""}"";
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupRoleBase.java,"package com.globant.os.accounts.component.group.model;

import com.globant.os.accounts.support.web.BadRequestException;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public enum GroupRoleBase {

  OWNER,
  MAINTAINER,
  MEMBER,
  LEADER;

  private static final String INVALID_ROLE_MESSAGE = ""Invalid role value ['%s'] - [Allowed values: %s]"";

  public static GroupRoleBase fromValue(String value) {
    try {
      return valueOf(value.toUpperCase());
    } catch (IllegalArgumentException exception) {
      throw new BadRequestException(String.format(INVALID_ROLE_MESSAGE, value, GroupRoleBase.getListOfRolesAsString()));
    }
  }

  public static String getListOfRolesAsString() {
    return String.format(""'%s'"",
        String.join(""', '"", Stream.of(values()).map(GroupRoleBase::name).collect(Collectors.toList())));
  }

  public static boolean isMandatory(String roleName) {
    try {
      valueOf(roleName.toUpperCase());
      return true;
    } catch (IllegalArgumentException exception) {
      return false;
    }
  }

  public static List<String> getStringValues() {
    return Stream.of(GroupRoleBase.values()).map(GroupRoleBase::name).collect(Collectors.toList());
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupType.java,"package com.globant.os.accounts.component.group.model;

import com.globant.os.accounts.support.web.BadRequestException;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public enum GroupType {
  ORG, KUDOS, NONE, INTEREST;
  private static final String INVALID_TYPE_MESSAGE = ""Invalid type value ['%s'] - [Allowed values: %s]"";

  public static GroupType fromValue(String value) {
    try {
      return valueOf(value.toUpperCase());
    } catch (IllegalArgumentException exception) {
      throw new BadRequestException(String.format(INVALID_TYPE_MESSAGE, value, GroupType.getListOfTypesAsString()));
    }
  }

  public static String getListOfTypesAsString() {
    return String.format(""'%s'"",
        String.join(""', '"", Stream.of(values()).map(GroupType::name).collect(Collectors.toList())));
  }

  public static boolean isMandatory(String typeName) {
    try {
      valueOf(typeName.toUpperCase());
      return true;
    } catch (IllegalArgumentException exception) {
      return false;
    }
  }

  public static List<String> getStringValues() {
    return Stream.of(GroupType.values()).map(GroupType::name).collect(Collectors.toList());
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/GroupOrigin.java,"package com.globant.os.accounts.component.group.model;

import com.globant.os.accounts.support.web.BadRequestException;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public enum GroupOrigin {
  SMU, BM, TP, BT, OS;

  private static final String INVALID_TYPE_MESSAGE = ""Invalid origin value ['%s'] - [Allowed values: %s]"";

  public static GroupOrigin fromValue(String value) {
    try {
      return valueOf(value.toUpperCase());
    } catch (IllegalArgumentException exception) {
      throw new BadRequestException(String.format(INVALID_TYPE_MESSAGE, value, GroupOrigin.getListOfTypesAsString()));
    }
  }

  public static String getListOfTypesAsString() {
    return String.format(""'%s'"",
        String.join(""', '"", Stream.of(values()).map(GroupOrigin::name).collect(Collectors.toList())));
  }

  public static List<String> getStringValues() {
    return Stream.of(GroupOrigin.values()).map(GroupOrigin::name).collect(Collectors.toList());
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/model/FilterType.java,"package com.globant.os.accounts.component.group.model;

import com.globant.os.accounts.support.web.BadRequestException;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public enum FilterType {

  role, studio;
  private static final String INVALID_TYPE_MESSAGE = ""Invalid filter name value ['%s'] - [Allowed values: %s]"";

  public static FilterType fromValue(String value) {
    try {
      return valueOf(value.toLowerCase());
    } catch (IllegalArgumentException exception) {
      throw new BadRequestException(String.format(INVALID_TYPE_MESSAGE, value, FilterType.getListOfTypesAsString()));
    }
  }

  public static String getListOfTypesAsString() {
    return String.format(""'%s'"",
        String.join(""', '"", Stream.of(values()).map(FilterType::name).collect(Collectors.toList())));
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/service/GroupPermissionsValidator.java,"package com.globant.os.accounts.component.group.service;

public interface GroupPermissionsValidator {

  void validateForCreation();

  void validateForUpdate();

  void validateForMemberAdding();

  void validateForMemberRolesUpdate();

  void validateForMemberDeletion();

  void validateForDeletion();

  void validateForQuery();

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/service/GroupPermissionsValidatorClosedSecretStrategy.java,"package com.globant.os.accounts.component.group.service;

public class GroupPermissionsValidatorClosedSecretStrategy implements GroupPermissionsValidator {

  @Override
  public void validateForCreation() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForUpdate() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForMemberAdding() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForDeletion() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForMemberDeletion() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForQuery() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForMemberRolesUpdate() {
    // TODO Auto-generated method stub

  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/service/GroupQueryService.java,"package com.globant.os.accounts.component.group.service;

import com.globant.os.accounts.support.web.BaseFindCmd;
import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import lombok.Getter;
import lombok.Setter;

public interface GroupQueryService {

  List<Long> findGroupsByMember(long communityId, long userId, GroupQueryFilterCmd filter);

  List<GroupDynamicMemberUser> findMembersByGroupId(long communityId, long groupId, GroupQueryFilterCmd filter);

  List<Long> findLeadersByMember(long communityId, long userId, GroupQueryFilterCmd filter);

  List<Long> findMembersLedByLeader(long communityId, long userId, GroupQueryFilterCmd filter);

  @Getter
  @Setter
  final class GroupQueryFilterCmd extends BaseFindCmd implements Serializable {
    /**
     * Serial UUID.
     */
    private static final long serialVersionUID = 4295385945233681104L;

    private Optional<String> direction = Optional.of(""down"");
    private Optional<String> groupType = Optional.of(""none"");
    private Optional<String> roles = Optional.empty();
    private Optional<Integer> depth = Optional.empty();
    private Optional<HashMap<String, String>> dynamicFilter = Optional.empty();
  }

  @Getter
  @Setter
  final class GroupDynamicMemberUser {
    private long userId;
    private boolean isStatic;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/service/GroupService.java,"package com.globant.os.accounts.component.group.service;

import com.globant.os.accounts.component.group.io.web.v2.GroupResponse.GroupMemberUserBasic;
import com.globant.os.accounts.component.group.model.Group;
import com.globant.os.accounts.component.group.model.GroupCreationResponse;
import com.globant.os.accounts.component.group.model.GroupMemberUser;
import com.globant.os.accounts.component.group.model.GroupMemberUser.Pk;
import com.globant.os.accounts.component.group.model.GroupType;
import com.globant.os.accounts.support.web.AddMemberGroupError;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.io.Serializable;
import java.util.List;
import java.util.Optional;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

public interface GroupService {

  public static final String INVALID_RESOURCE_MESSAGE = ""%s cannot be found [id: %d]"";
  public static final String GROUP_RESOURCE = ""Group"";

  GroupCreationResponse create(long communityId, GroupCreationRequest request);

  Group update(long groupId, GroupUpdateRequest request);

  List<AddMemberGroupError> addMemberUser(long groupId, List<GroupMemberAddingRequest> request, boolean isCreateMember);

  void addMemberChildGroup(long groupId, long childGroupId);

  void delete(long groupId);

  void deleteMember(long groupId, long memberId);

  void deleteMemberChildGroup(long groupId, long childGroupId);

  Optional<Group> findById(long groupId);

  List<Group> findAll();

  FindResult<Group> find(GroupFindCmd cmd);

  List<GroupMemberUserBasic> getGroupMemberUserBasic(long groupId);

  Optional<GroupMemberUser> findMemberUserById(Pk id);

  GroupMemberUser memberUserByUserId(long userId, GroupType groupType);

  List<AddMemberGroupError> addMemberUserToGroups(long userId, List<MemberGroupAddingRequest> request);

  void deleteMemberToGroups(long communityId, long userId, List<Long> groupIds);

  @Getter
  @Setter
  @ToString
  class GroupCreationRequest {
    @NotBlank
    private String name;
    @NotBlank
    private String visibility;
    private String description;
    private List<String> customRoles;
    private List<GroupMetadataRequest> metadata;
    private List<GroupFilterRequest> filters;
    @NotBlank
    private String type;
    private List<GroupMemberAddingRequest> members;
    private String origin;
  }

  @Getter
  @Setter
  @ToString
  class GroupMetadataRequest {
    @NotBlank
    private String attribute;
    @NotBlank
    private String value;
  }

  @Getter
  @Setter
  @ToString
  class GroupFilterRequest {
    @NotBlank
    private String name;
    @NotBlank
    private String value;
  }

  @Getter
  @Setter
  @ToString
  class GroupUpdateRequest {
    private String name;
    private String description;
    private List<String> customRoles;
    private List<GroupMetadataRequest> metadata;
    private List<GroupFilterRequest> filters;
    private String visibility;
    private String type;
    private String origin;
  }

  @Getter
  @Setter
  @ToString
  class GroupMemberAddingRequest {
    @NotNull
    private Long userId;
    private List<String> roles;
  }

  @Getter
  @Setter
  @ToString
  class GroupMemberChildGroupAddingRequest {
    @NotNull
    private Long groupId;
  }

  @Getter
  @Setter
  class GroupFindCmd extends BaseFindCmd implements Serializable {
    /**
     * Serial UUID.
     */
    private static final long serialVersionUID = 8189361127600878143L;

    private Optional<Long> memberId = Optional.empty();
    private Optional<String> groupName = Optional.empty();
    private Optional<String> visibility = Optional.empty();
    private Optional<String> description = Optional.empty();
    private Optional<Long> communityId = Optional.empty();
    private Optional<String> type = Optional.empty();
    private Optional<String> role = Optional.empty();
    private Optional<String> origin = Optional.empty();
  }

  @Getter
  @Setter
  class FindMemberRequest {
    private Long memberId;

    public Optional<Long> getMemberId() {
      return Optional.ofNullable(memberId);
    }
  }

  @Getter
  @Setter
  @ToString
  class MemberGroupAddingRequest {
    @NotNull
    private Long groupId;
    private List<String> roles;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/service/GroupPermissionsValidatorPublicStrategy.java,"package com.globant.os.accounts.component.group.service;

public class GroupPermissionsValidatorPublicStrategy implements GroupPermissionsValidator {

  @Override
  public void validateForCreation() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForUpdate() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForMemberAdding() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForDeletion() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForMemberDeletion() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForQuery() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForMemberRolesUpdate() {
    // TODO Auto-generated method stub

  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/service/GroupQueryServiceImpl.java,"package com.globant.os.accounts.component.group.service;

import static java.util.Objects.nonNull;

import com.globant.os.accounts.component.group.io.gateway.GroupGraphGateway;
import com.globant.os.accounts.component.shared.model.Schema;
import com.globant.os.accounts.support.web.BadRequestException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class GroupQueryServiceImpl implements GroupQueryService {

  private static final String DEPTH_LIMIT = ""Depth should be greater than or equal to 0 ""
      + ""and less than or equal to 1000"";
  private static final String DIRECTION_UP_OR_DOWN = ""Direction should be 'UP' or 'DOWN'"";
  private static final String GROUP_TYPE_ORG_OR_NONE = ""Group type should be 'ORG' or 'NONE'"";
  private static final String ROLE_LEADER = ""Role should be 'LEADER'"";

  @Autowired
  private GroupGraphGateway groupGraphGateway;

  @Override
  public List<Long> findGroupsByMember(long communityId, long userId, GroupQueryFilterCmd filter) {
    validateDepth(filter);
    return groupGraphGateway.getGroupsOfMember(communityId, userId, filter);
  }

  @Override
  public List<GroupDynamicMemberUser> findMembersByGroupId(long communityId, long groupId, GroupQueryFilterCmd filter) {
    validateDepth(filter);
    return groupGraphGateway.getMembersOfGroup(communityId, groupId, filter);
  }

  @Override
  public List<Long> findLeadersByMember(long communityId, long userId, GroupQueryFilterCmd filter) {
    validateParameters(filter);
    return groupGraphGateway.getLeadersByMember(communityId, userId, filter);
  }

  @Override
  public List<Long> findMembersLedByLeader(long communityId, long userId, GroupQueryFilterCmd filter) {
    validateParameters(filter);
    return groupGraphGateway.getMembersLedByLeader(communityId, userId, filter);
  }

  private void validateDepth(GroupQueryFilterCmd filter) {
    if (filter.getDepth().isPresent()
        && (filter.getDepth().get() < 0 || filter.getDepth().get() > 1000)) {
      throw new BadRequestException(DEPTH_LIMIT);
    }
  }

  private void validateParameters(GroupQueryFilterCmd filter) {
    List<String> validations = new ArrayList<>();
    if (nonNull(filter)) {
      if (filter.getDepth().isPresent()
          && (filter.getDepth().get() < 0 || filter.getDepth().get() > 1000)) {
        validations.add(DEPTH_LIMIT);
      }
      if (filter.getDirection().isPresent()
          && !Arrays.asList(Schema.DIRECTION_DOWN, Schema.DIRECTION_UP)
          .contains(filter.getDirection().get().toUpperCase())) {
        validations.add(DIRECTION_UP_OR_DOWN);
      }
      if (filter.getGroupType().isPresent()
          && !Arrays.asList(Schema.GROUP_TYPE_ORG, Schema.GROUP_TYPE_NONE)
          .contains(filter.getGroupType().get().toUpperCase())) {
        validations.add(GROUP_TYPE_ORG_OR_NONE);
      }
      if (filter.getRoles().isPresent()
          && !filter.getRoles().get().toUpperCase().equals(Schema.ROLE_LEADER)) {
        validations.add(ROLE_LEADER);
      }
      if (!validations.isEmpty()) {
        throw new BadRequestException(validations.toString());
      }
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/group/service/GroupPermissionsValidatorClosedPublicStrategy.java,"package com.globant.os.accounts.component.group.service;

public class GroupPermissionsValidatorClosedPublicStrategy implements GroupPermissionsValidator {

  @Override
  public void validateForCreation() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForUpdate() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForMemberAdding() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForDeletion() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForMemberDeletion() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForQuery() {
    // TODO Auto-generated method stub

  }

  @Override
  public void validateForMemberRolesUpdate() {
    // TODO Auto-generated method stub

  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/admin/io/web/v2/AdminController.java,"package com.globant.os.accounts.component.admin.io.web.v2;

import com.globant.os.accounts.component.admin.service.AdminService;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.shared.io.web.v2.BaseController;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import java.io.IOException;
import java.util.List;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping(path = ""/v2/admin"", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
public class AdminController extends BaseController {

  @Autowired
  private AdminService adminService;

  @PostMapping(path = ""/files/users/upload"")
  @ResponseStatus(HttpStatus.CREATED)
  public ResponseBody<List<Member>> usersUpload(@RequestParam(""fileName"") String fileName,
      @RequestParam(""file"") MultipartFile file) throws IOException {
    List<Member> members = adminService.usersCsvUpload(file.getBytes(), 1);
    return ResponseBody.fromObject(members);
  }

  @GetMapping(path = ""/files/users/backup"")
  @ResponseStatus(HttpStatus.OK)
  public void usersBakup(HttpServletResponse response) throws IOException {
    String fileName = ""UsersBackup.csv"";
    byte[] content = adminService.usersCsvBackup(1);

    response.setContentType(""text/csv; charset=utf-8"");
    response.addHeader(""Content-Disposition"", ""attachment; filename="" + fileName);
    response.getOutputStream().write(content);
    response.getOutputStream().close();
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/admin/io/web/v2/UserCsvCmd.java,"package com.globant.os.accounts.component.admin.io.web.v2;

import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.service.UserService.UserMemberCreateCmd;
import java.time.LocalDate;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@JsonPropertyOrder({ ""email"", ""firstName"", ""lastName"", ""phoneNumber"", ""birthDate"", ""identification"" })
@Getter
@Setter
@NoArgsConstructor
@EqualsAndHashCode
public class UserCsvCmd {

  private long id;
  private String email;
  @EqualsAndHashCode.Include
  private String firstName;
  private String middleName;
  @EqualsAndHashCode.Include
  private String lastName;
  private String area;
  private LocalDate orgEntryDate;
  private String nickname;
  private String job;
  private String phoneNumber;
  private String seniority;
  private String project;
  private String account;
  private LocalDate birthDate;
  private String office;
  private String cityCode;
  private String cityName;
  private String countryCode;
  private String country;
  @EqualsAndHashCode.Include
  private String identification;

  public static UserCsvCmd fromEntity(OsUser entity) {
    UserCsvCmd user = new UserCsvCmd();
    user.setId(entity.getId());
    user.setFirstName(entity.getFirstName());
    user.setLastName(entity.getLastName());
    user.setBirthDate(entity.getBirthDate());
    return user;
  }

  public static UserMemberCreateCmd toCreateUserCmd(UserCsvCmd cmd) {
    UserMemberCreateCmd user = new UserMemberCreateCmd();
    user.setFirstName(cmd.getFirstName());
    user.setLastName(cmd.getLastName());
    user.setBirthDate(cmd.getBirthDate().toString());
    return user;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/admin/service/AdminService.java,"package com.globant.os.accounts.component.admin.service;

import com.globant.os.accounts.component.community.model.Member;
import java.util.List;

public interface AdminService {

  List<Member> usersCsvUpload(final byte[] content, final long communityId);

  byte[] usersCsvBackup(final long communityId);
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/admin/service/AdminServiceImpl.java,"package com.globant.os.accounts.component.admin.service;

import static java.util.stream.Collectors.toList;

import com.globant.os.accounts.component.admin.io.web.v2.UserCsvCmd;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.service.MemberService;
import com.globant.os.accounts.component.community.service.MemberService.MemberCreationCmd;
import com.globant.os.accounts.component.shared.io.util.file.csv.CsvFileReader;
import com.globant.os.accounts.component.shared.io.util.file.csv.CsvFileWriter;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.service.UserService;
import com.globant.os.accounts.component.user.service.UserService.UserFindCmd;
import com.globant.os.accounts.component.user.service.UserService.UserMemberCreateCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
@Transactional
public class AdminServiceImpl implements AdminService {

  @Autowired
  UserService userService;

  @Autowired
  MemberService memberService;

  @Override
  public List<Member> usersCsvUpload(final byte[] content, final long communityId) {
    // Read CSV File
    CsvFileReader<UserCsvCmd> csvReader = new CsvFileReader<>(UserCsvCmd.class);
    Set<UserCsvCmd> userCsvCmd = (Set<UserCsvCmd>) csvReader.read(content);
    // Convert UserCsvCmd to UserMemberCreateCmd then create users and members
    List<UserMemberCreateCmd> usersCmd = userCsvCmd.stream().map(UserCsvCmd::toCreateUserCmd).collect(toList());
    return createUsersAndMembers(usersCmd, communityId);
  }

  @Override
  public byte[] usersCsvBackup(final long communityId) {
    FindResult<OsUser> users = getUsersToBackup(communityId);

    CsvFileWriter<UserCsvCmd> csvWriter = new CsvFileWriter<>(UserCsvCmd.class);
    return csvWriter.write(users.getValues().stream().map(UserCsvCmd::fromEntity).collect(toList()));
  }

  private List<Member> createUsersAndMembers(final List<UserMemberCreateCmd> usersCmd, final long communityId) {

    List<OsUser> users = userService.create(usersCmd);

    List<MemberCreationCmd> memberCmds = new ArrayList<>();
    for (OsUser user : users) {
      MemberCreationCmd memberCmd = new MemberCreationCmd();
      memberCmd.setUserId(user.getId());
      memberCmd.setExternalId(String.valueOf(communityId + user.getId()));
      memberCmds.add(memberCmd);
    }

    return memberService.create(communityId, memberCmds);
  }

  private FindResult<OsUser> getUsersToBackup(final long communityId) {
    UserFindCmd query = new UserFindCmd();
    query.setCommunityId(Optional.of(communityId));
    query.setPageSize(Integer.MAX_VALUE);

    return userService.findAll(query);
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/user/io/web/v2/UserDetails.java,"package com.globant.os.accounts.component.user.io.web.v2;

import com.globant.os.accounts.component.user.model.OsUser;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.Locale;
import java.util.Map;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
public class UserDetails implements Serializable {

  /**
   * Serial UUID.
   */
  private static final long serialVersionUID = -6111766685133794610L;

  private long id;
  private String identification;
  private String firstName;
  private String lastName;
  private String email;
  private String phone;
  private String image;
  private LocalDate birthDate;
  private boolean enabled;
  private Long communityId;
  private Long userId;
  private String externalId;
  private Locale locale;
  private String orgEntryDate;
  private Map<String, Object> properties;
  private Map<String, Object> configs;

  public static UserDetails fromEntity(OsUser entity) {
    UserDetails user = new UserDetails();
    user.setId(entity.getId());
    user.setFirstName(entity.getFirstName());
    user.setLastName(entity.getLastName());
    user.setImage(entity.getImage());
    user.setBirthDate(entity.getBirthDate());
    user.setEnabled(entity.isEnabled());
    return user;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/user/io/web/v2/UserController.java,"package com.globant.os.accounts.component.user.io.web.v2;

import com.globant.os.accounts.component.shared.io.web.v2.BaseController;
import com.globant.os.accounts.component.shared.web.BooleanValue;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.service.UserService;
import com.globant.os.accounts.component.user.service.UserService.UserFindCmd;
import java.util.List;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(path = ""/api/v2/users"", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
public class UserController extends BaseController {

  @Autowired
  private UserService userService;

  @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
  @ResponseStatus(HttpStatus.CREATED)
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('users:read')"")
  public ResponseBody<UserDetails> create(@Valid @RequestBody final UserService.UserCreateCmd cmd) {
    return ResponseBody.fromObject(UserDetails.fromEntity(userService.create(cmd)));
  }

  @GetMapping(path = ""/{id}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('users:read')"")
  public ResponseBody<UserDetails> getById(@PathVariable final long id) {
    return ResponseBody.fromOptional(userService.findById(id).map(UserDetails::fromEntity));
  }

  @PutMapping(path = ""/{id}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('users:read')"")
  public ResponseBody<UserDetails> update(@PathVariable long id, @RequestBody @Valid UserService.UserUpdateCmd cmd) {
    return ResponseBody.fromOptional(userService.update(id, cmd).map(UserDetails::fromEntity));
  }

  @PutMapping(path = ""/{id}/enabled"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('users:read')"")
  public ResponseBody<Boolean> enabled(@PathVariable long id, @RequestBody @Valid BooleanValue value) {
    return ResponseBody.fromOptional(userService.updateEnabledFlag(id, value.getValue()).map(OsUser::isEnabled));
  }

  @GetMapping
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('users:read')"")
  public ResponseBody<List<UserDetails>> get(UserFindCmd cmd) {
    isPaginationDataValid(cmd);
    return ResponseBody.fromFindResult(userService.findAll(cmd).map(UserDetails::fromEntity));
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/user/io/gateway/UserGatewayImpl.java,"package com.globant.os.accounts.component.user.io.gateway;

import com.globant.os.accounts.component.shared.io.gateway.SpringData;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.service.UserService.UserFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;
import javax.persistence.criteria.JoinType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.repository.RepositoryDefinition;
import org.springframework.stereotype.Repository;

@Repository
public class UserGatewayImpl implements UserGateway {

  @Autowired
  private JpaRepository userRepository;

  @Override
  public OsUser save(final OsUser entity) {
    return userRepository.save(entity);
  }

  @Override
  public List<OsUser> save(final List<OsUser> entities) {
    return userRepository.saveAll(entities);
  }

  @Override
  public Optional<OsUser> findById(final Long id) {
    return userRepository.findById(id);
  }

  @Override
  public FindResult<OsUser> findAll(UserFindCmd cmd) {
    Specification<OsUser> spec = (root, q, cb) ->
        cb.and(
            SpringData.predicates(
            cmd.getCommunityId()
                .map(s -> cb.equal(root.join(""members"", JoinType.LEFT).join(""id"", JoinType.LEFT).get(""community""), s)),
              cmd.getName().map(s -> cb.or(cb.like(root.get(""firstName""), s), cb.like(root.get(""lastName""), s)))
        )
      );

    PageRequest page = SpringData.makePageRequest(cmd);
    Page<OsUser> resultPage = userRepository.findAll(spec, page);
    return SpringData.makeFindResult(resultPage);
  }

  @RepositoryDefinition(domainClass = OsUser.class, idClass = Long.class)
  interface JpaRepository extends JpaSpecificationExecutor<OsUser> {

    Optional<OsUser> findById(Long id);

    List<OsUser> findAll();

    OsUser save(OsUser entity);

    List<OsUser> saveAll(Iterable<OsUser> entities);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/user/io/gateway/UserGateway.java,"package com.globant.os.accounts.component.user.io.gateway;

import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.service.UserService.UserFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;

public interface UserGateway {

  Optional<OsUser> findById(Long id);

  FindResult<OsUser> findAll(UserFindCmd request);

  OsUser save(OsUser entity);

  List<OsUser> save(List<OsUser> entities);
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/user/model/OsUser.java,"package com.globant.os.accounts.component.user.model;

import com.globant.os.accounts.component.community.model.Member;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@Entity(name = ""user"")
@Getter
@Setter
@ToString(of = { ""id"", ""firstName"", ""lastName"" })
public class OsUser implements Serializable {
  /**
   * Serial UUID.
   */
  private static final long serialVersionUID = 2697489499640236218L;

  // TODO: add GeneratedValue(strategy = GenerationType.IDENTITY) when there isn't any dependency with SMU for user
  // creation
  @Id
  @Setter
  private Long id;

  @Basic(optional = false)
  private String firstName;

  @Basic(optional = false)
  private String lastName;

  private LocalDate birthDate;

  private String image;

  private boolean enabled = true;

  @OneToMany(mappedBy = ""id.user"")
  private List<Member> members;

  public OsUser() {
  }

  public OsUser(final String firstName, final String lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/user/service/UserService.java,"package com.globant.os.accounts.component.user.service;

import static java.util.Objects.isNull;

import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.io.Serializable;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

public interface UserService {

  OsUser create(final UserCreateCmd user);

  List<OsUser> create(List<? extends UserCreateCmd> usersCmd);

  FindResult<OsUser> findAll(UserFindCmd request);

  Optional<OsUser> findById(Long id);

  Optional<OsUser> update(Long id, UserUpdateCmd userUpdate);

  Optional<OsUser> updateEnabledFlag(Long id, boolean value);

  @Getter
  @Setter
  @ToString
  class UserUpdateCmd extends UserCreateCmd {
    /**
     * Serial UUID.
     */
    private static final long serialVersionUID = -1708410377892013495L;
    private boolean enabled;
  }

  @Getter
  @Setter
  class UserCreateCmd implements Serializable {

    /**
     * Serial UUID.
     */
    private static final long serialVersionUID = 7592992078081721491L;

    @NotNull
    private Long id;
    @NotBlank
    private String firstName;
    @NotBlank
    private String lastName;
    private String image;
    private String birthDate;

    public static LocalDate getLocalDateFormat(String date) {
      if (isNull(date)) {
        return null;
      }
      String newDate = date.replace(""-"", """");
      return LocalDate.parse(newDate, DateTimeFormatter.BASIC_ISO_DATE);
    }
  }

  @Getter
  @Setter
  class UserMemberCreateCmd extends UserCreateCmd implements Serializable {
    /**
     * Serial UUID.
     */
    private static final long serialVersionUID = -1587471398011689359L;

    private Map<String, String> properties;
  }

  @Getter
  @Setter
  @ToString
  class UserFindCmd extends BaseFindCmd implements Serializable {
    /**
     * Serial UUID.
     */
    private static final long serialVersionUID = -7037500972476885736L;

    private Optional<String> name = Optional.empty();
    private Optional<Long> communityId = Optional.empty();
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/user/service/UserServiceImpl.java,"package com.globant.os.accounts.component.user.service;

import static java.util.Objects.nonNull;

import com.globant.os.accounts.component.user.io.gateway.UserGateway;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.support.web.FindResult;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class UserServiceImpl implements UserService {

  @Autowired
  private UserGateway userGateway;

  @Override
  public Optional<OsUser> findById(Long id) {
    return userGateway.findById(id);
  }

  @Override
  @Transactional
  public Optional<OsUser> updateEnabledFlag(Long id, boolean value) {
    return userGateway.findById(id).map(c -> {
      c.setEnabled(value);
      return userGateway.save(c);
    });
  }

  @Override
  public OsUser create(final UserCreateCmd user) {
    OsUser currentUser = new OsUser(user.getFirstName(), user.getLastName());
    currentUser.setId(user.getId());
    currentUser.setImage(user.getImage());
    currentUser.setBirthDate(UserCreateCmd.getLocalDateFormat(user.getBirthDate()));
    return userGateway.save(currentUser);
  }

  @Override
  public List<OsUser> create(final List<? extends UserCreateCmd> usersCmd) {
    List<OsUser> users = new ArrayList<>();
    for (UserCreateCmd userCmd : usersCmd) {
      OsUser currentUser = new OsUser(userCmd.getFirstName(), userCmd.getLastName());
      currentUser.setImage(userCmd.getImage());
      currentUser.setBirthDate(UserCreateCmd.getLocalDateFormat(userCmd.getBirthDate()));
      users.add(currentUser);
    }

    return userGateway.save(users);
  }

  @Override
  public FindResult<OsUser> findAll(UserFindCmd request) {
    return userGateway.findAll(request);
  }

  @Override
  public Optional<OsUser> update(Long id, UserUpdateCmd userUpdate) {

    return userGateway.findById(id).map(c -> {
      c.setFirstName(userUpdate.getFirstName());
      c.setLastName(userUpdate.getLastName());
      c.setImage(userUpdate.getImage());
      if (nonNull(userUpdate.getBirthDate())) {
        c.setBirthDate(UserUpdateCmd.getLocalDateFormat(userUpdate.getBirthDate()));
      }
      return userGateway.save(c);
    });
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/web/OrderEditor.java,"package com.globant.os.accounts.component.shared.web;

import com.globant.os.accounts.support.web.Order;
import java.beans.PropertyEditorSupport;
import java.util.Objects;

public class OrderEditor extends PropertyEditorSupport {

  @Override
  public void setAsText(String text) {
    Order order = !text.equals("""") ? Order.fromString(text) : null;
    setValue(order);
  }

  @Override
  public String getAsText() {
    return Objects.toString(getValue(), """");
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/web/ResponseBody.java,"package com.globant.os.accounts.component.shared.web;

import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.ResourceNotFoundException;
import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@NoArgsConstructor
public final class ResponseBody<T> implements Serializable {

  /**
   * Serial UUID.
   */
  private static final long serialVersionUID = 5342432809977871430L;

  private T result;

  private Page page;

  private ResponseBody(T result, Page page) {
    this.result = result;
    this.page = page;
  }

  public static <E> ResponseBody<List<E>> fromFindResult(FindResult<E> findResult) {
    Page page = new Page(findResult.getTotalSize());
    return new ResponseBody<>(findResult.getValues(), page);
  }

  public static <E> ResponseBody<E> fromObject(E object) {
    return new ResponseBody<>(object, object instanceof Collection ? new Page(((Collection<?>) object).size()) : null);
  }

  public static <E> ResponseBody<E> fromOptional(Optional<E> entity) {
    if (!entity.isPresent()) {
      throw new ResourceNotFoundException();
    }
    return new ResponseBody<>(entity.get(), null);
  }

  public static ResponseBody<Void> fromVoid() {
    return new ResponseBody<>();
  }

  @Getter
  @AllArgsConstructor
  @NoArgsConstructor
  public static class Page implements Serializable {
    /**
     * Serial UUID.
     */
    private static final long serialVersionUID = 7422368219774508270L;

    long totalElements;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/web/BooleanValue.java,"package com.globant.os.accounts.component.shared.web;

import javax.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Wrapper needed to POST or PUT simple JSON boolena values.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class BooleanValue {

  @NotNull
  private Boolean value;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/util/TypeJpaConverter.java,"package com.globant.os.accounts.component.shared.io.util;

import static java.util.Objects.isNull;

import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition.Type;
import javax.persistence.AttributeConverter;
import javax.persistence.Converter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Converter
public class TypeJpaConverter implements AttributeConverter<MemberPropertyDefinition.Type, String> {

  private static Logger logger = LoggerFactory.getLogger(TypeJpaConverter.class);

  @Override
  public String convertToDatabaseColumn(Type type) {
    if (isNull(type)) {
      return null;
    }
    return type.toString();
  }

  @Override
  public Type convertToEntityAttribute(String type) {
    if (isNull(type)) {
      return null;
    }
    try {
      return Type.valueOf(type.toUpperCase());
    } catch (IllegalArgumentException exc) {
      logger.error(""Converter type enumerator has failed."", exc);
      return null;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/util/EventPublisherComponent.java,"package com.globant.os.accounts.component.shared.io.util;

import com.globant.smu.os.events.publisher.exception.PublisherException;
import com.globant.smu.os.events.publisher.service.EventPublisherService;
import com.globant.smu.os.events.shared.model.BaseEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Component;

@Component
public class EventPublisherComponent {

  private static final Logger LOGGER = LoggerFactory.getLogger(EventPublisherComponent.class);

  @Autowired
  private EventPublisherService eventPublisherKinesis;

  @Autowired
  private ThreadPoolTaskExecutor threadPoolTaskExecutor;

  @Async
  public void sendEvent(final String topic, final BaseEvent event) {
    threadPoolTaskExecutor.submit(() -> publishEvent(topic, event));
  }

  private void publishEvent(String topic, BaseEvent event) {
    try {
      LOGGER.info(""Sending event to "" + topic + "", "" + event.toString());

      eventPublisherKinesis.publish(topic, event);

      LOGGER.info(""Event "" + event.toString() + "" sent."");
    } catch (PublisherException e) {
      LOGGER.error(""Cannot publish message by using the OS library"", e);
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/util/file/FileWriter.java,"package com.globant.os.accounts.component.shared.io.util.file;

import java.util.Collection;

public interface FileWriter<T> {

  byte[] write(final Collection<T> input);

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/util/file/FileReader.java,"package com.globant.os.accounts.component.shared.io.util.file;

import java.util.Collection;
import java.util.Map;
import lombok.Getter;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;

public interface FileReader<T> {

  Collection<T> read(final byte[] csv);

  class ReadOptions<T> {

    /**
     * Whether or not it should check for duplicates. Objects mapped by the {@code transformer}
     * must override equals and hashCode
     */
    @Getter
    private boolean allowDuplicates = false;

    /** Called for every row being processed. Null values are skipped. */
    @Getter
    private RowTransformer<T> transformer;

    /**
     * An array of Strings linking the columns to their corresponding entry in the Map passed as argument in the
     * {@code transformer} (the array length should match the number of columns). A null entry in the array indicates
     * that the column should be ignored (e.g. not added to the Map)
     */
    @NonNull
    private String[] header;

    public ReadOptions(@NonNull final RowTransformer<T> transformer, @NonNull final String[] header) {
      this.transformer = transformer;
      this.header = header;
    }

    public void setAllowDuplicates(final boolean allowDuplicates) {
      this.allowDuplicates = allowDuplicates;
    }
  }

  @FunctionalInterface
  interface RowTransformer<T> {

    @Nullable
    T transform(final int rowNumber, final Map<String, String> row);

  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/util/file/csv/CsvFileWriter.java,"package com.globant.os.accounts.component.shared.io.util.file.csv;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.globant.os.accounts.component.shared.io.util.file.FileWriter;
import com.globant.os.accounts.support.web.BusinessException;
import java.util.Collection;

public class CsvFileWriter<T> implements FileWriter<T> {

  private Class<T> type;

  public CsvFileWriter(Class<T> type) {
    super();
    this.type = type;
  }

  private ObjectWriter createWriter() {
    CsvMapper csvMapper = new CsvMapper();
    csvMapper.registerModule(new JavaTimeModule());
    csvMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
    CsvSchema csvSchema = csvMapper.schemaFor(type).withHeader();
    return csvMapper.writer(csvSchema);
  }

  @Override
  public byte[] write(final Collection<T> input) {
    ObjectWriter writer = createWriter();
    try {
      return writer.writeValueAsBytes(input);
    } catch (JsonProcessingException e) {
      throw new BusinessException(""An error occurred while generating the CSV"");
    }
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/util/file/csv/CsvFileReader.java,"package com.globant.os.accounts.component.shared.io.util.file.csv;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvParser;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.globant.os.accounts.component.shared.io.util.file.FileReader;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

public class CsvFileReader<T> implements FileReader<T> {

  private Class<T> type;

  public CsvFileReader(Class<T> type) {
    super();
    this.type = type;
  }

  private ObjectReader createReader() {
    CsvMapper csvMapper = new CsvMapper();
    csvMapper.registerModule(new JavaTimeModule());
    csvMapper.enable(CsvParser.Feature.SKIP_EMPTY_LINES);
    csvMapper.enable(CsvParser.Feature.IGNORE_TRAILING_UNMAPPABLE);
    csvMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
    CsvSchema csvSchema = csvMapper.schemaFor(type).withHeader();
    return csvMapper.readerFor(type).with(csvSchema);
  }

  @Override
  public Collection<T> read(final byte[] csv) {
    ObjectReader reader = createReader();
    return readAll(csv, reader);
  }

  private Collection<T> readAll(final byte[] csv, final ObjectReader reader) {
    Set<T> values = new HashSet<>();

    try {
      MappingIterator<T> iterator = reader.readValues(csv);
      while (iterator.hasNext()) {
        values.add(iterator.next());
      }
    } catch (Exception ex) {
      throw new IllegalArgumentException(""Unexpected error while reading the csv"", ex);
    }

    return values;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/web/v2/BaseController.java,"package com.globant.os.accounts.component.shared.io.web.v2;

import com.globant.os.accounts.component.shared.web.OrderEditor;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.Order;
import java.util.Collections;
import java.util.List;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;

public class BaseController {

  private static final String PAGINATION_FIELDS_INVALID = ""The pageNumber or pageSize fields are invalid"";
  private static final String ORDER_FIELDS_INVALID = ""The order fields are invalid"";

  @InitBinder
  public void initBinder(WebDataBinder binder) {
    binder.registerCustomEditor(Order.class, new OrderEditor());
  }

  public static <T> FindResult<T> getPage(List<T> list, int pageNumber, int pageSize) {
    if (pageSize <= 0 || pageNumber <= 0) {
      throw new BadRequestException(PAGINATION_FIELDS_INVALID);
    }

    int fromIndex = (pageNumber - 1) * pageSize;
    if (list == null || list.size() < fromIndex) {
      return new FindResult<>(Collections.emptyList(), 0);
    }
    return new FindResult<>(list.subList(fromIndex, Math.min(fromIndex + pageSize, list.size())), list.size());
  }

  protected void isPaginationDataValid(BaseFindCmd cmd) {
    if (!cmd.isDataValid()) {
      throw new BadRequestException(PAGINATION_FIELDS_INVALID);
    }
  }

  protected void isOrderDataValid(BaseFindCmd cmd, List<String> validOrders) {
    if (null != cmd.getSort() && !cmd.getSort().isEmpty()) {
      for (Order order : cmd.getSort()) {
        if (!validOrders.contains(order.getField())) {
          throw new BadRequestException(ORDER_FIELDS_INVALID);
        }
      }
    }
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/gateway/SpringData.java,"package com.globant.os.accounts.component.shared.io.gateway;

import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.Order.Direction;
import java.util.EnumMap;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.persistence.criteria.Predicate;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;

public final class SpringData {

  public static final String SORT_SEPARATOR = "":"";

  private static final EnumMap<Direction, Sort.Direction> DIR_MAPPING =
          new EnumMap<>(Direction.class);

  static {
    DIR_MAPPING.put(Direction.ASC, Sort.Direction.ASC);
    DIR_MAPPING.put(Direction.DESC, Sort.Direction.DESC);
  }

  public static PageRequest makePageRequest(BaseFindCmd request) {
    List<Sort.Order> orders;
    orders = request.getSort().stream().map(s ->
            new Sort.Order(DIR_MAPPING.get(s.getDirection()), s.getField())).collect(Collectors.toList());
    return PageRequest.of(request.getPageNumber() - 1, request.getPageSize(), Sort.by(orders));
  }

  public static <T> FindResult<T> makeFindResult(Page<T> pageResult) {
    return new FindResult<>(pageResult.getContent(), pageResult.getTotalElements());
  }

  @SafeVarargs
  public static final Predicate[] predicates(Optional<Predicate>... optionalPredicates) {
    return Stream.of(optionalPredicates).filter(Optional::isPresent).map(Optional::get).toArray(n -> new Predicate[n]);
  }

  private SpringData() {  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/gateway/graph/GraphException.java,"package com.globant.os.accounts.component.shared.io.gateway.graph;

public class GraphException extends RuntimeException {

  private static final long serialVersionUID = -4218439223784520521L;

  public GraphException(final String message) {
    super(message);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/gateway/graph/RegexPredicate.java,"package com.globant.os.accounts.component.shared.io.gateway.graph;

/**
 * Copyright (c) 2018 BITPlan GmbH
 *
 * http://www.bitplan.com
 *
 * This file is part of the Opensource project at:
 * https://github.com/BITPlan/com.bitplan.simplegraph
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.function.BiPredicate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.tinkerpop.gremlin.process.traversal.P;

// https://groups.google.com/forum/#!topic/gremlin-users/heWLwz9xBQc
// https://stackoverflow.com/a/45652897/1497139
public class RegexPredicate implements BiPredicate<Object, Object> {
  Pattern pattern = null;
  private Mode mode;

  enum Mode {
    FIND, MATCH
  }

  public RegexPredicate(String regex, Mode mode) {
    this.mode = mode;
    pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
  }

  public RegexPredicate(String regex) {
    this(regex, Mode.FIND);
  }

  @Override
  public boolean test(final Object first, final Object second) {
    String str = first.toString();
    Matcher matcher = pattern.matcher(str);
    switch (mode) {
      case FIND:
        return matcher.find();
      case MATCH:
        return matcher.matches();
      default:
        return false;
    }
  }

  /**
   * get a Regular expression predicate
   *
   * @param regex
   * @return - the predicate
   */
  public static P<Object> regex(Object regex) {
    BiPredicate<Object, Object> b = new RegexPredicate(regex.toString());
    return new P<Object>(b, regex);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/io/gateway/graph/BaseGraphRepository.java,"package com.globant.os.accounts.component.shared.io.gateway.graph;

import com.globant.os.accounts.support.web.BadRequestException;
import java.util.List;
import java.util.function.BiFunction;
import org.apache.tinkerpop.gremlin.orientdb.OrientGraphFactory;
import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

public abstract class BaseGraphRepository {

  private Logger logger = LoggerFactory.getLogger(this.getClass());

  @Autowired
  protected OrientGraphFactory factory;

  public void execute(BiFunction<GraphTraversalSource, List<Object>, Void> func, List<Object> params) {
    GraphTraversalSource g = factory.getTx().traversal();
    try {
      func.apply(g, params);
      g.tx().commit();
      logger.info(""The transaction was committed successfully"");
    } catch (Exception e) {
      g.tx().rollback();
      logger.info(""Rollback caused by : "" + e.getMessage());
      throw new BadRequestException(""Rollback caused by : "" + e.getMessage());
    } finally {
      g.tx().close();
      logger.info(""Transaction closed"");
    }
  }

  public <E> E select(BiFunction<GraphTraversalSource, List<Object>, E> func, List<Object> params) {
    GraphTraversalSource g = factory.getTx().traversal();
    try {
      logger.info(""Executing query..."");
      return func.apply(g, params);
    } catch (Exception e) {
      g.tx().rollback();
      logger.info(""Rollback caused by : "" + e.getMessage());
      throw new BadRequestException(""Rollback caused by : "" + e.getMessage());
    } finally {
      g.tx().close();
      logger.info(""Transaction closed"");
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/model/Schema.java,"package com.globant.os.accounts.component.shared.model;

public class Schema {

  public static final String ALIAS = ""alias"";

  public static final String V_COMMUNITY = ""Community"";
  public static final String V_GROUP = ""Group"";
  public static final String V_MEMBER = ""Member"";

  public static final String PROPERTY_ID = ""id"";
  public static final String PROPERTY_USER_ID = ""userId"";
  public static final String PROPERTY_COMMUNITY_ID = ""communityId"";
  public static final String PROPERTY_NAME = ""name"";
  public static final String PROPERTY_GROUP_TYPE = ""groupType"";
  public static final String PROPERTY_GROUP_ORIGIN = ""origin"";

  public static final String EDGE_BELONGS_TO = ""belongsTo"";
  public static final String EDGE_MEMBER_OF = ""memberOf"";
  public static final String EDGE_LEADER_OF = ""leaderOf"";
  public static final String EDGE_CHILD_OF = ""childOf"";

  public static final String ROLE_LEADER = ""LEADER"";
  public static final String ROLE_MEMBER = ""MEMBER"";

  public static final String DIRECTION = ""direction"";
  public static final String DIRECTION_UP = ""UP"";
  public static final String DIRECTION_DOWN = ""DOWN"";

  public static final String GROUP_TYPE_ORG = ""ORG"";
  public static final String GROUP_TYPE_NONE = ""NONE"";

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/shared/model/BaseEntity.java,"package com.globant.os.accounts.component.shared.model;

import javax.persistence.MappedSuperclass;
import javax.persistence.Version;
import lombok.Getter;
import lombok.Setter;

/**
 * The base class for main entities. Provides a version field by default and makes explicit the id getter.
 *
 * @author osvaldo
 *
 * @param <T> The Id type for this entity.
 */
@MappedSuperclass
public abstract class BaseEntity<T> {

  @Version
  private short version;

  @Getter
  @Setter
  private boolean enabled = true;

  public abstract T getId();
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/web/v2/CommunityOperationDetails.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static java.util.Objects.nonNull;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import lombok.Getter;
import lombok.Setter;

@Getter
@JsonInclude(Include.NON_NULL)
@Setter
public class CommunityOperationDetails {

  private long userId;
  private String loginId;
  private String email;
  private String operationStatus;
  private String rejectedMessage;
  private String recordRejectedType;

  public static CommunityOperationDetails fromModel(Member member) {

    CommunityOperationDetails details = new CommunityOperationDetails();
    if (nonNull(member.getId()) && nonNull(member.getId().getUser()) && nonNull(member.getId().getUser().getId())) {
      details.setUserId(member.getId().getUser().getId());
    }
    details.setEmail(member.getEmail());

    if (nonNull(member.getProperties())) {
      for (PropertyValue property : member.getProperties()) {
        if (property.getProperty().getName().equals(""loginId"")) {
          details.setLoginId(property.getValue());
        }
        if (property.getProperty().getName().equals(""operationStatus"")) {
          details.setOperationStatus(property.getValue());
        }
        if (property.getProperty().getName().equals(""rejectedMessage"")) {
          details.setRejectedMessage(property.getValue());
        }
        if (property.getProperty().getName().equals(""recordRejectedType"")) {
          details.setRecordRejectedType(property.getValue());
        }
      }
    }
    return details;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/web/v2/CommunityImageDetails.java,"package com.globant.os.accounts.component.community.io.web.v2;

import java.io.Serializable;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class CommunityImageDetails implements Serializable {

  private static final long serialVersionUID = 1L;

  private String primary;
  private String secondary;

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/web/v2/CommunityController.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static java.util.Objects.nonNull;
import static java.util.stream.Collectors.toList;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.component.community.service.CommunityConfigService;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigCreationCmd;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigUpdateCmd;
import com.globant.os.accounts.component.community.service.CommunityService;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityCreationCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityDetailsCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityFindCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityUpdateCmd;
import com.globant.os.accounts.component.community.service.MemberPropertyDefinitionService;
import com.globant.os.accounts.component.community.service.MemberPropertyDefinitionService.PropertyCreationCmd;
import com.globant.os.accounts.component.community.service.MemberPropertyDefinitionService.PropertyUpdateCmd;
import com.globant.os.accounts.component.shared.io.web.v2.BaseController;
import com.globant.os.accounts.component.shared.web.BooleanValue;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import com.globant.os.accounts.support.aspect.TokenValidator;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(path = ""/api/v2/communities"", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
public class CommunityController extends BaseController {

  private static final Function<Community, CommunityDetails> TO_DTO = CommunityDetails::fromModel;
  private static final Function<CommunityDetailsCmd, CommunityDetails> TO_DTO_CMD = CommunityDetails::fromModel;
  private static final String CONFIG_FIELDS_REQUIRED = ""The id, confKey and confValue fields are required"";
  private static final String PROPERTIES_FIELDS_REQUIRED = ""The name and type fields are required"";

  @Autowired
  private CommunityService communityService;

  @Autowired
  private MemberPropertyDefinitionService memberPropertyDefinitionService;

  @Autowired
  private CommunityConfigService communityConfigService;

  @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
  @ResponseStatus(HttpStatus.CREATED)
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:write')"")
  @TokenValidator
  public ResponseBody<CommunityDetails> create(@RequestBody @Valid CommunityCreationCmd cmd) {
    Community community = communityService.create(cmd);
    return ResponseBody.fromObject(TO_DTO.apply(community));
  }

  @GetMapping(path = ""/{id}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<CommunityDetails> get(@PathVariable long id) {
    return ResponseBody.fromOptional(communityService.findById(id).map(TO_DTO_CMD));
  }

  @GetMapping
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<List<CommunityDetails>> get(CommunityFindCmd cmd) {
    isPaginationDataValid(cmd);
    isOrderDataValid(cmd, Arrays.asList(""name"", ""enabled""));

    FindResult<CommunityDetails> findResult = communityService.findAll(cmd).map(CommunityDetails::fromModel);
    return ResponseBody.fromFindResult(findResult);
  }

  @PutMapping(path = ""/{id}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<CommunityDetails> update(@PathVariable long id, @RequestBody @Valid CommunityUpdateCmd cmd) {
    cmd.setId(id);
    return ResponseBody.fromObject(TO_DTO.apply(communityService.update(cmd)));
  }

  @PutMapping(path = ""/{id}/enabled"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<Void> updateEnabledFlag(@PathVariable long id, @RequestBody @Valid BooleanValue value) {
    communityService.updateEnabledFlag(id, value.getValue());
    return ResponseBody.fromVoid();
  }

  @PutMapping(path = ""/{id}/migrated"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<Void> updateMigratedFlag(@PathVariable long id, @RequestBody @Valid BooleanValue value) {
    communityService.updateMigratedFlag(id, value.getValue());
    return ResponseBody.fromVoid();
  }

  @PostMapping(path = ""/{id}/properties"", consumes = MediaType.APPLICATION_JSON_VALUE)
  @ResponseStatus(HttpStatus.CREATED)
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<List<MemberPropertyDefinitionDetails>> createProperties(@PathVariable long id,
      @RequestBody @Valid List<PropertyCreationCmd> cmds) {
    validateCreateProperties(cmds);
    return ResponseBody.fromObject(memberPropertyDefinitionService.create(id, cmds).stream()
        .map(MemberPropertyDefinitionDetails::fromModel).collect(toList()));
  }

  @GetMapping(path = ""/{id}/properties"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<List<MemberPropertyDefinitionDetails>> getProperties(@PathVariable long id, BaseFindCmd cmd) {
    isPaginationDataValid(cmd);
    return ResponseBody.fromFindResult(
        memberPropertyDefinitionService.findAllByCommunityId(id, cmd).map(MemberPropertyDefinitionDetails::fromModel));
  }

  @PutMapping(path = ""/{id}/properties"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<List<MemberPropertyDefinitionDetails>> updateProperties(@PathVariable long id,
      @RequestBody @Valid List<PropertyUpdateCmd> cmds) {
    return ResponseBody.fromObject(memberPropertyDefinitionService.update(id, cmds).stream()
        .map(MemberPropertyDefinitionDetails::fromModel).collect(toList()));
  }

  @PutMapping(path = ""/{id}/properties/{name}/enabled"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<Boolean> enabledProperty(@PathVariable long id, @PathVariable String name,
      @RequestBody @Valid BooleanValue value) {
    return ResponseBody.fromOptional(memberPropertyDefinitionService.enableProperty(id, name, value.getValue())
        .map(MemberPropertyDefinition::isEnabled));
  }

  @PostMapping(path = ""/{id}/config"")
  @ResponseStatus(HttpStatus.CREATED)
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<List<CommunityConfigDetails>> createConfig(@PathVariable long id,
      @RequestBody @Valid List<CommunityConfigCreationCmd> cmds) {
    return ResponseBody.fromObject(
        communityConfigService.create(id, cmds).stream().map(CommunityConfigDetails::fromModel).collect(toList()));
  }

  @PutMapping(path = ""/{id}/config"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<List<CommunityConfigDetails>> updateConfig(@PathVariable long id,
      @RequestBody @Valid List<CommunityConfigUpdateCmd> cmds) {
    return ResponseBody.fromObject(communityConfigService.update(id, validateCommunityConfigUpdateCmd(cmds)).stream()
        .map(CommunityConfigDetails::fromModel).collect(toList()));
  }

  @GetMapping(path = ""/{id}/config"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:read')"")
  @TokenValidator
  public ResponseBody<List<CommunityConfigDetails>> getCommunityConfig(@PathVariable long id, BaseFindCmd cmd) {
    isPaginationDataValid(cmd);
    return ResponseBody
        .fromFindResult(communityConfigService.findByCommunity(id, cmd).map(CommunityConfigDetails::fromModel));
  }

  @GetMapping(path = ""/{communityId}/migrated"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<Map<String, Boolean>> getCommunityMigrateStatus(@PathVariable(""communityId"") long communityId) {
    boolean result = communityService.getCommunityMigrateStatus(communityId);
    return ResponseBody.fromObject(Collections.singletonMap(""migrated"", result));
  }

  private List<CommunityConfigUpdateCmd> validateCommunityConfigUpdateCmd(List<CommunityConfigUpdateCmd> configs) {
    List<CommunityConfigUpdateCmd> cmds = configs.stream()
        .filter(cmd -> nonNull(cmd.getConfKey()) && nonNull(cmd.getConfValue())).collect(toList());

    if (cmds.isEmpty()) {
      throw new BadRequestException(CONFIG_FIELDS_REQUIRED);
    }

    return cmds;
  }

  private void validateCreateProperties(List<PropertyCreationCmd> cmds) {
    for (PropertyCreationCmd property : cmds) {
      if (property.getName() == null || property.getType() == null || property.getName().isEmpty()
          || property.getType().getValue().isEmpty()) {
        throw new BadRequestException(String.format(PROPERTIES_FIELDS_REQUIRED));
      }
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/web/v2/MemberPropertyDefinitionDetails.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static java.util.Objects.nonNull;
import static java.util.stream.Collectors.toSet;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition.Type;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class MemberPropertyDefinitionDetails implements Serializable {

  private static final long serialVersionUID = 1L;

  public static MemberPropertyDefinitionDetails fromModel(MemberPropertyDefinition properties) {
    MemberPropertyDefinitionDetails memberPropertiesDetail = new MemberPropertyDefinitionDetails();
    if (nonNull(properties.getCommunity())) {
      memberPropertiesDetail.setCommunityId(properties.getCommunity().getId());
    }
    memberPropertiesDetail.setName(properties.getName());
    memberPropertiesDetail.setDescription(properties.getDescription());
    memberPropertiesDetail.setType(properties.getType());
    memberPropertiesDetail.setEnabled(properties.isEnabled());
    return memberPropertiesDetail;
  }

  public static Set<MemberPropertyDefinitionDetails> fromModel(Set<MemberPropertyDefinition> properties) {
    Set<MemberPropertyDefinitionDetails> propertiesDetail = new HashSet<>();
    if (nonNull(properties)) {
      propertiesDetail = properties.stream().map(MemberPropertyDefinitionDetails::fromModel).collect(toSet());
    }
    return propertiesDetail;
  }

  private long communityId;
  private String name;
  private String description;
  private Type type;
  private boolean enabled;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/web/v2/CommunityConfigDetails.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static java.util.Objects.nonNull;
import static java.util.stream.Collectors.toSet;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.globant.os.accounts.component.community.model.CommunityConfig;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class CommunityConfigDetails implements Serializable {

  private static final long serialVersionUID = -5912330326786551471L;

  public static CommunityConfigDetails fromModel(CommunityConfig config) {
    CommunityConfigDetails details = new CommunityConfigDetails();
    if (nonNull(config.getCommunity())) {
      details.setCommunityId(config.getCommunity().getId());
    }
    details.setConfKey(config.getConfKey());
    details.setConfValue(config.getConfValue());
    details.setLastUpdate(config.getLastUpdate());
    details.setId(config.getId());
    return details;
  }

  public static Set<CommunityConfigDetails> fromModel(Set<CommunityConfig> configs) {
    Set<CommunityConfigDetails> configsDetail = new HashSet<>();
    if (nonNull(configs)) {
      configsDetail = configs.stream().map(CommunityConfigDetails::fromModel).collect(toSet());
    }
    return configsDetail;
  }

  private Long id;
  private String confKey;
  private String confValue;
  private Date lastUpdate;
  private Long communityId;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/web/v2/CommunityDetails.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static java.util.Objects.nonNull;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityDetailsCmd;
import java.io.Serializable;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class CommunityDetails implements Serializable {

  private static final long serialVersionUID = 1L;

  public static CommunityDetails fromModel(Community c) {
    CommunityDetails response = new CommunityDetails();
    response.setImages(new CommunityImageDetails());
    response.setId(c.getId());
    response.setName(c.getName());
    response.setLocale(c.getLocale());
    if (nonNull(c.getLocales())) {
      response.setLocales(new HashSet<>(c.getLocales()));
    }
    response.setTimeZone(c.getTimeZone());
    response.setTotalMembers(c.getTotalMembers());
    if (nonNull(c.getDomains())) {
      response.setDomains(new LinkedHashSet<>(c.getDomains()));
    }
    response.getImages().setPrimary(c.getPrimaryImage());
    response.getImages().setSecondary(c.getSecondaryImage());
    response.setEnabled(c.isEnabled());
    if (nonNull(c.getConfigs())) {
      response.setConfigs(CommunityConfigDetails.fromModel(c.getConfigs()));
    }
    if (nonNull(c.getProperties())) {
      response.setProperties(MemberPropertyDefinitionDetails.fromModel(c.getProperties()));
    }
    return response;
  }

  public static CommunityDetails fromModel(CommunityDetailsCmd c) {
    CommunityDetails response = new CommunityDetails();
    response.setImages(new CommunityImageDetails());
    response.setId(c.getId());
    response.setName(c.getName());
    response.setLocale(c.getLocale());
    if (nonNull(c.getLocales())) {
      response.setLocales(new HashSet<>(c.getLocales()));
    }
    response.setTimeZone(c.getTimeZone());
    response.setTotalMembers(c.getTotalMembers());
    if (nonNull(c.getDomains())) {
      response.setDomains(new LinkedHashSet<>(c.getDomains()));
    }
    response.setImages(c.getImages());
    response.setEnabled(c.isEnabled());
    if (nonNull(c.getConfigs())) {
      response.setConfigs(c.getConfigs());
    }
    if (nonNull(c.getProperties())) {
      response.setProperties(c.getProperties());
    }
    return response;
  }

  private long id;
  private String name;
  private Locale locale;
  private Set<Locale> locales;
  private TimeZone timeZone;
  private Long totalMembers;
  private Set<String> domains;
  private boolean enabled;
  private CommunityImageDetails images;
  private Set<CommunityConfigDetails> configs;
  private Set<MemberPropertyDefinitionDetails> properties;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/web/v2/MemberDetails.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static java.util.Objects.isNull;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import com.globant.os.accounts.component.community.model.MemberConfig;
import com.globant.os.accounts.component.community.service.MemberService.MemberDetailsCmd;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;
import lombok.Getter;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Getter
@JsonInclude(Include.NON_NULL)
@Setter
public class MemberDetails {

  public static final String DUPLICATE_KEY_FOUND_WITH_VALUE = ""Duplicate key found! with value "";
  private static Logger logger = LoggerFactory.getLogger(MemberDetails.class);

  public static MemberDetails fromModel(Member member) {
    MemberDetails details = new MemberDetails();
    details.setCommunityId(member.getId().getCommunity().getId());
    details.setUserId(member.getId().getUser().getId());
    details.setFirstName(member.getFirstName());
    details.setLastName(member.getLastName());
    details.setEmail(member.getEmail());
    details.setImage(member.getImage());
    details.setLocale(member.getLocale());
    details.setEnabled(member.isEnabled());

    Map<String, Object> properties = isNull(member.getProperties()) ? new HashMap<>()
        : member.getProperties().stream().filter(e -> Objects.nonNull(e.getValue()))
        .collect(Collectors.toMap(e -> e.getProperty().getName(), PropertyValue::getValue, (property1, property2) -> {
          logger.info(DUPLICATE_KEY_FOUND_WITH_VALUE + property1);
          return property1;
        }));
    details.setProperties(properties);

    Map<String, Object> configs = isNull(member.getConfigs()) ? new HashMap<>()
        : member.getConfigs().stream().filter(e -> Objects.nonNull(e.getConfValue()))
        .collect(Collectors.toMap(MemberConfig::getConfKey, MemberConfig::getConfValue, (config1, config2) -> {
          logger.info(DUPLICATE_KEY_FOUND_WITH_VALUE + config1);
          return config1;
        }));
    details.setConfigs(configs);
    return details;
  }

  public static MemberDetails fromModel(MemberDetailsCmd member) {
    MemberDetails details = new MemberDetails();
    details.setCommunityId(member.getCommunityId());
    details.setUserId(member.getUserId());
    details.setFirstName(member.getFirstName());
    details.setLastName(member.getLastName());
    details.setEmail(member.getEmail());
    details.setImage(member.getImage());
    details.setLocale(member.getLocale());
    details.setEnabled(member.isEnabled());
    details.setProperties(member.getProperties());
    details.setConfigs(member.getConfigs());
    return details;
  }

  private long communityId;
  private long userId;
  private String firstName;
  private String lastName;
  private String email;
  private String image;
  private Locale locale;
  private LocalDate birthDate;
  private boolean enabled;
  private Map<String, Object> properties;
  private Map<String, Object> configs;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/web/v2/MemberConfigDetails.java,"package com.globant.os.accounts.component.community.io.web.v2;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.globant.os.accounts.component.community.model.MemberConfig;
import java.util.Date;
import lombok.Getter;

@Getter
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class MemberConfigDetails {

  public static MemberConfigDetails fromModel(MemberConfig config) {
    MemberConfigDetails details = new MemberConfigDetails();
    details.communityId = config.getMember().getId().getCommunity().getId();
    details.userId = config.getMember().getId().getUser().getId();
    details.confKey = config.getConfKey();
    details.confValue = config.getConfValue();
    details.lastUpdate = config.getLastUpdate();
    details.id = config.getId();
    return details;
  }

  private long id;
  private String confKey;
  private String confValue;
  private Date lastUpdate;
  private long communityId;
  private long userId;

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/web/v2/MemberController.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toMap;
import static org.springframework.util.StringUtils.isEmpty;

import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import com.globant.os.accounts.component.community.service.MemberConfigService;
import com.globant.os.accounts.component.community.service.MemberConfigService.MemberConfigCreationCmd;
import com.globant.os.accounts.component.community.service.MemberConfigService.MemberConfigUpdateCmd;
import com.globant.os.accounts.component.community.service.MemberService;
import com.globant.os.accounts.component.community.service.MemberService.MemberBaseFindCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberCreationCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberDetailsCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberUpdateCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberUpdatePropertyCmd;
import com.globant.os.accounts.component.shared.io.web.v2.BaseController;
import com.globant.os.accounts.component.shared.web.BooleanValue;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import com.globant.os.accounts.support.aspect.TokenValidator;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.BaseFindCmd;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(path = ""/api/v2/members"", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
public class MemberController extends BaseController {

  private static Logger logger = LoggerFactory.getLogger(MemberController.class);

  private static final Function<Member, MemberDetails> TO_DTO = MemberDetails::fromModel;
  private static final Function<MemberDetailsCmd, MemberDetails> TO_DTO_CMD = MemberDetails::fromModel;
  private static final String FIELDS_REQUIRED = ""The fields id, confKey and confValue are required"";

  @Autowired
  private MemberService memberService;

  @Autowired
  private MemberConfigService memberConfigService;

  @PostMapping(path = ""/communities/{communityId}"", consumes = MediaType.APPLICATION_JSON_VALUE)
  @ResponseStatus(HttpStatus.CREATED)
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<MemberDetails> createMember(@PathVariable long communityId,
                                                  @RequestBody @Valid MemberCreationCmd cmd) {
    return ResponseBody.fromObject(MemberDetails.fromModel(memberService.create(communityId, cmd)));
  }

  @GetMapping(path = ""/communities/{communityId}/user/{userId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<MemberDetails> get(@PathVariable long communityId, @PathVariable long userId) {
    return ResponseBody.fromOptional(memberService.findById(communityId, userId).map(TO_DTO_CMD));
  }

  @GetMapping(path = ""/communities/{communityId}/loginId/{loginId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<MemberDetails> getByLoginId(@PathVariable long communityId, @PathVariable String loginId) {
    return ResponseBody.fromOptional(memberService.findByLoginId(communityId, loginId).map(TO_DTO_CMD));
  }

  @PutMapping(path = ""/communities/{communityId}/user/{userId}/enabled"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<Boolean> enabled(@PathVariable long communityId, @PathVariable long userId,
                                       @RequestBody @Valid BooleanValue value) {
    return ResponseBody
        .fromObject(memberService.updateEnabledFlag(communityId, userId, value.getValue()).isEnabled());
  }

  @PutMapping(path = ""/communities/{communityId}/user/{userId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<MemberDetails> update(@PathVariable long communityId, @PathVariable long userId,
                                            @RequestBody @Valid MemberUpdateCmd cmd) {
    return ResponseBody.fromObject(MemberDetails.fromModel(memberService.update(communityId, userId, cmd)));
  }

  @GetMapping(path = ""/communities/{communityId}/userIds/{userIds}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<List<MemberDetails>> findByIds(@PathVariable long communityId,
                                                     @PathVariable long[] userIds) {
    return ResponseBody.fromObject(memberService.findByIds(communityId, userIds).stream()
        .map(TO_DTO)
        .collect(toList()));
  }

  @PostMapping(path = ""/communities/{communityId}/user/{userId}/config"", consumes = MediaType.APPLICATION_JSON_VALUE)
  @ResponseStatus(HttpStatus.CREATED)
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<List<MemberConfigDetails>> createMemberConfig(@PathVariable long communityId,
                                                            @PathVariable long userId,
                                                            @RequestBody @Valid List<MemberConfigCreationCmd> configs) {
    return ResponseBody.fromObject(memberConfigService.create(communityId, userId, configs).stream()
        .map(MemberConfigDetails::fromModel).collect(toList()));
  }

  @PutMapping(path = ""/communities/{communityId}/user/{userId}/config"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<List<MemberConfigDetails>> updateMemberConfig(@PathVariable long communityId,
                                                              @PathVariable long userId,
                                                              @RequestBody @Valid List<MemberConfigUpdateCmd> configs) {
    return ResponseBody.fromObject(memberConfigService.update(communityId, userId,
        validateMemberConfigUpdateCmd(configs)).stream()
        .map(MemberConfigDetails::fromModel).collect(toList()));
  }

  @GetMapping(path = ""/communities/{communityId}/user/{userId}/config"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<List<MemberConfigDetails>> getMemberConfig(@PathVariable long communityId,
                                                                 @PathVariable long userId, BaseFindCmd cmd) {
    isPaginationDataValid(cmd);
    return ResponseBody
        .fromFindResult(memberConfigService.findByMember(communityId, userId, cmd).map(MemberConfigDetails::fromModel));
  }

  @GetMapping(path = ""/communities/{communityId}"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<List<MemberDetails>> findMembers(@PathVariable(""communityId"") long communityId,
                                                       MemberBaseFindCmd cmd) {
    logger.info(""Init MemberController:getUsersByCommunity"");
    isPaginationDataValid(cmd);
    return ResponseBody.fromFindResult(memberService.findMembers(communityId, cmd).map(TO_DTO));
  }

  @PutMapping(path = ""/communities/{communityId}/users/{userId}/properties"")
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('members:read')"")
  @TokenValidator
  public ResponseBody<Map<String, String>> updateMemberProperties(@PathVariable(""communityId"") long communityId,
      @PathVariable long userId, @RequestBody @Valid MemberUpdatePropertyCmd cmd) {
    return ResponseBody.fromObject(memberService.updateMemberProperties(communityId, userId, cmd).stream()
        .collect(toMap(p -> p.getProperty().getName(), PropertyValue::getValue)));
  }

  private List<MemberConfigUpdateCmd> validateMemberConfigUpdateCmd(List<MemberConfigUpdateCmd> configs) {
    List<MemberConfigUpdateCmd> cmds = configs.stream()
        .filter(cmd -> cmd.getId() != null && !isEmpty(cmd.getConfKey()) && !isEmpty(cmd.getConfValue()))
        .collect(toList());

    if (cmds.isEmpty()) {
      throw new BadRequestException(FIELDS_REQUIRED);
    }

    return cmds;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/web/v2/CommunityOperationController.java,"package com.globant.os.accounts.component.community.io.web.v2;

import static java.util.stream.Collectors.toList;

import com.globant.os.accounts.component.community.service.CommunityOperationService;
import com.globant.os.accounts.component.community.service.CommunityOperationService.OperationCmd;
import com.globant.os.accounts.component.shared.io.web.v2.BaseController;
import com.globant.os.accounts.component.shared.web.ResponseBody;
import com.globant.os.accounts.support.aspect.TokenValidator;
import java.util.List;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(path = ""/api/v2/communities"", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
public class CommunityOperationController extends BaseController {

  @Autowired
  private CommunityOperationService communityOperationService;

  @PostMapping(path = ""/{id}/operations/{operation}"", produces = MediaType.APPLICATION_JSON_VALUE)
  @ResponseStatus(HttpStatus.OK)
  @PreAuthorize(""hasRole('OS_APP') or hasPermission('communities:write')"")
  @TokenValidator
  public ResponseBody<List<CommunityOperationDetails>> operationSync(@PathVariable(name = ""id"") long id,
                                                                     @PathVariable(name = ""operation"") String operation,
                                                                     @RequestParam(""uploaderId"") long uploaderId,
                                                                     @RequestBody
                                                                     @Valid List<OperationCmd> operationCmd) {
    List<CommunityOperationDetails> response = communityOperationService
        .operationSync(id, operation, uploaderId, operationCmd)
        .stream()
        .map(CommunityOperationDetails::fromModel)
        .collect(toList());
    return ResponseBody.fromObject(response);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/gateway/MemberConfigGatewayImpl.java,"package com.globant.os.accounts.component.community.io.gateway;

import com.globant.os.accounts.component.community.model.Member.MemberId;
import com.globant.os.accounts.component.community.model.MemberConfig;
import com.globant.os.accounts.component.shared.io.gateway.SpringData;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.RepositoryDefinition;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public class MemberConfigGatewayImpl implements MemberConfigGateway {

  @Autowired
  private JpaRepository repo;

  @Override
  public Optional<MemberConfig> findById(Long id) {
    return repo.findById(id);
  }

  @Override
  public MemberConfig save(MemberConfig memberConfig) {
    return repo.save(memberConfig);
  }

  @Override
  public List<MemberConfig> save(List<MemberConfig> memberConfigs) {
    return repo.saveAll(memberConfigs);
  }

  @Override
  public List<MemberConfig> findByMember(MemberId memberId) {
    return repo.findByMember(memberId);
  }

  @Override
  public FindResult<MemberConfig> findByMember(MemberId memberId, BaseFindCmd cmd) {
    Specification<MemberConfig> spec = (root, q, cb) ->
        cb.and(
            SpringData.predicates(
                Optional.of(cb.equal(root.get(""member"").get(""id""), memberId))
            ));

    PageRequest page = SpringData.makePageRequest(cmd);

    Page<MemberConfig> resultPage = repo.findAll(spec, page);
    return SpringData.makeFindResult(resultPage);
  }

  @Override
  public List<MemberConfig> findByMember(MemberId memberId, List<Long> ids) {
    return repo.findByMember(memberId, ids);
  }

  @RepositoryDefinition(domainClass = MemberConfig.class, idClass = Long.class)
  interface JpaRepository extends JpaSpecificationExecutor<MemberConfig> {

    Optional<MemberConfig> findById(Long id);

    MemberConfig save(MemberConfig memberConfig);

    List<MemberConfig> saveAll(Iterable<MemberConfig> memberConfigs);

    @Query(""select mc from MemberConfig mc where mc.member.id = :memberId"")
    List<MemberConfig> findByMember(@Param(""memberId"") MemberId memberId);

    @Query(""select mc from MemberConfig mc where mc.member.id = :memberId and mc.id in :ids"")
    List<MemberConfig> findByMember(@Param(""memberId"") MemberId memberId, @Param(""ids"") List<Long> ids);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/gateway/MemberPropertyDefinitionGatewayImpl.java,"package com.globant.os.accounts.component.community.io.gateway;

import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.component.shared.io.gateway.SpringData;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.Order;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.repository.RepositoryDefinition;
import org.springframework.stereotype.Repository;

@Repository
public class MemberPropertyDefinitionGatewayImpl implements MemberPropertyDefinitionGateway {

  @Autowired
  private JpaRepository repo;

  @Override
  public MemberPropertyDefinition save(MemberPropertyDefinition memberPropertyDefinition) {
    return repo.save(memberPropertyDefinition);
  }

  @Override
  public MemberPropertyDefinition update(MemberPropertyDefinition memberPropertyDefinition) {
    return repo.save(memberPropertyDefinition);
  }

  @Override
  public List<MemberPropertyDefinition> findAllByCommunityId(long communityId) {
    return repo.findAllByCommunityIdOrderByNameAsc(communityId);
  }

  @Override
  public FindResult<MemberPropertyDefinition> findAllByCommunityId(long communityId, BaseFindCmd cmd) {
    Specification<MemberPropertyDefinition> spec = (root, q, cb) ->
        cb.and(
            SpringData.predicates(
                Optional.of(cb.equal(root.get(""community"").get(""id""), communityId))
            ));

    if (cmd.getSort() == null || cmd.getSort().isEmpty()) {
      cmd.setSort(Arrays.asList(Order.fromString(""name:ASC"")));
    }

    PageRequest page = SpringData.makePageRequest(cmd);

    Page<MemberPropertyDefinition> resultPage = repo.findAll(spec, page);
    return SpringData.makeFindResult(resultPage);
  }

  @Override
  public Optional<MemberPropertyDefinition> findByCommunityIdName(long communityId, String name) {
    return repo.findByCommunityIdAndName(communityId, name);
  }

  @Override
  public MemberPropertyDefinition findById(Long id) {
    return repo.findById(id);
  }

  @RepositoryDefinition(domainClass = MemberPropertyDefinition.class, idClass = Long.class)
  interface JpaRepository extends JpaSpecificationExecutor<MemberPropertyDefinition> {
    MemberPropertyDefinition save(MemberPropertyDefinition memberPropertyDefinition);

    List<MemberPropertyDefinition> findAllByCommunityIdOrderByNameAsc(long communityId);

    Optional<MemberPropertyDefinition> findByCommunityIdAndName(long communityId, String name);

    MemberPropertyDefinition findById(Long id);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/gateway/CommunityGateway.java,"package com.globant.os.accounts.component.community.io.gateway;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityCreationCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityFindCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityUpdateCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.Optional;

public interface CommunityGateway {

  boolean existsById(long id);

  Optional<Community> findById(long id);

  FindResult<Community> findAll(CommunityFindCmd request);

  Community save(CommunityCreationCmd cmd);

  Community save(Community c);

  Community update(CommunityUpdateCmd cmd);

  Community enabledOrDisabled(long id, boolean value);

  Community updateMigratedFlag(long id, boolean value);

  Optional<Community> findCommunityById(long id);

  FindResult<Community> findCommunities(CommunityFindCmd cmd);

  Boolean getCommunityMigrateStatus(long communityId);
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/gateway/CommunityConfigGateway.java,"package com.globant.os.accounts.component.community.io.gateway;

import com.globant.os.accounts.component.community.model.CommunityConfig;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigUpdateCmd;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;

public interface CommunityConfigGateway {

  Optional<CommunityConfig> findById(Long id);

  CommunityConfig save(CommunityConfig communityConfig);

  List<CommunityConfig> save(List<CommunityConfig> communityConfigs);

  List<CommunityConfig> findByCommunity(long communityId);

  FindResult<CommunityConfig> findByCommunity(long communityId, BaseFindCmd cmd);

  List<CommunityConfig> findByCommunity(long communityId, List<String> confKeys);

  List<CommunityConfig> updateCommunityConfigs(long communityId, List<CommunityConfigUpdateCmd> confKeys);

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/gateway/MemberPropertyDefinitionGateway.java,"package com.globant.os.accounts.component.community.io.gateway;

import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;

public interface MemberPropertyDefinitionGateway {

  MemberPropertyDefinition save(MemberPropertyDefinition memberPropertyDefinition);

  List<MemberPropertyDefinition> findAllByCommunityId(long communityId);

  FindResult<MemberPropertyDefinition> findAllByCommunityId(long communityId, BaseFindCmd cmd);

  Optional<MemberPropertyDefinition> findByCommunityIdName(long communityId, String name);

  MemberPropertyDefinition update(MemberPropertyDefinition memberPropertyDefinition);

  MemberPropertyDefinition findById(Long id);
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/gateway/MemberConfigGateway.java,"package com.globant.os.accounts.component.community.io.gateway;

import com.globant.os.accounts.component.community.model.Member.MemberId;
import com.globant.os.accounts.component.community.model.MemberConfig;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;

public interface MemberConfigGateway {

  Optional<MemberConfig> findById(Long id);

  MemberConfig save(MemberConfig memberConfig);

  List<MemberConfig> save(List<MemberConfig> memberConfigs);

  List<MemberConfig> findByMember(MemberId memberId);

  FindResult<MemberConfig> findByMember(MemberId memberId, BaseFindCmd cmd);

  List<MemberConfig> findByMember(MemberId memberId, List<Long> ids);

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/gateway/MemberGateway.java,"package com.globant.os.accounts.component.community.io.gateway;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.MemberId;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import com.globant.os.accounts.component.community.service.MemberService.MemberBaseFindCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberCreationCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberUpdateCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberUpdatePropertyCmd;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public interface MemberGateway {

  Optional<Member> findById(Community community, OsUser user);

  Optional<Member> findById(long communityId, long memberId);

  Map<String, Long> findCommunityMembersNotContentInTheLoginIdsList(long communityId, List<String> loginIds);

  Member save(Member c);

  Member save(long communityId, MemberCreationCmd cmd);

  List<Member> save(List<Member> members);

  List<Member> save(long communityId, List<MemberCreationCmd> members);

  Member update(long communityId, MemberUpdateCmd cmd);

  Member update(Member member);

  List<Member> findByIds(List<MemberId> ids);

  List<Member> findByIds(long communityId, long[] userIds);

  Member enabledOrDisabled(long communityId, long memberId, boolean value);

  FindResult<Member> findMembers(long communityId, MemberBaseFindCmd cmd);

  List<PropertyValue> updateMemberProperties(long communityId, long userId, MemberUpdatePropertyCmd cmd);

  Optional<Member> findAccountsMemberByLoginId(long communityId, String loginId);

  Optional<Member> findByLoginId(long communityId, String loginId);

  Member findMember(long communityId, long userId);

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/gateway/CommunityConfigGatewayImpl.java,"package com.globant.os.accounts.component.community.io.gateway;

import static java.util.stream.Collectors.toList;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityConfig;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigUpdateCmd;
import com.globant.os.accounts.component.shared.io.gateway.SpringData;
import com.globant.os.accounts.external.smu.io.gateway.SmuCommunityClientGateway;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.BusinessException;
import com.globant.os.accounts.support.web.FindResult;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.RepositoryDefinition;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public class CommunityConfigGatewayImpl implements CommunityConfigGateway {

  private static final String COMMUNITY_NOT_EXIST_MESSAGE = ""Community not exist"";

  @Autowired
  private JpaRepository repo;

  @Autowired
  private CommunityGateway communityGateway;

  @Autowired
  private SmuCommunityClientGateway smuCommunityGateway;

  @Override
  public Optional<CommunityConfig> findById(Long id) {
    return repo.findById(id);
  }

  @Override
  public CommunityConfig save(CommunityConfig communityConfig) {
    return repo.save(communityConfig);
  }

  @Override
  public List<CommunityConfig> save(List<CommunityConfig> communityConfigs) {
    return repo.saveAll(communityConfigs);
  }

  @Override
  public List<CommunityConfig> findByCommunity(long communityId) {
    return repo.findByCommunity(communityId);
  }

  @Override
  public FindResult<CommunityConfig> findByCommunity(long communityId, BaseFindCmd cmd) {
    Specification<CommunityConfig> spec = (root, q, cb) ->
        cb.and(
            SpringData.predicates(
                Optional.of(cb.equal(root.get(""community"").get(""id""), communityId))
            ));

    PageRequest page = SpringData.makePageRequest(cmd);

    Page<CommunityConfig> resultPage = repo.findAll(spec, page);
    return SpringData.makeFindResult(resultPage);
  }

  @Override
  public List<CommunityConfig> findByCommunity(long communityId, List<String> confKeys) {
    return repo.findByCommunity(communityId, confKeys);
  }

  @Override
  public List<CommunityConfig> updateCommunityConfigs(long communityId, List<CommunityConfigUpdateCmd> cmds) {
    Community communityAccounts = findCommunity(communityId);
    List<CommunityConfig> accountsResponse = new ArrayList<>();
    if (communityAccounts.isMigrated()) {
      accountsResponse = updateCommunityConfig(communityId, cmds);
    }

    List<CommunityConfig> response = smuCommunityGateway.updateCommunityConfigs(communityId, cmds);

    return communityAccounts.isMigrated() ? accountsResponse : response;
  }

  private List<CommunityConfig> updateCommunityConfig(long communityId, List<CommunityConfigUpdateCmd> cmds) {
    List<String> confKeys = cmds.stream().map(CommunityConfigUpdateCmd::getConfKey).collect(toList());
    return this.findByCommunity(communityId, confKeys).stream().map(communityConfig -> {
      Optional<CommunityConfigUpdateCmd> cmd = cmds.stream()
          .filter(c -> communityConfig.getConfKey().equals(c.getConfKey())).findFirst();
      if (cmd.isPresent()) {
        communityConfig.setConfKey(cmd.get().getConfKey());
        communityConfig.setConfValue(cmd.get().getConfValue());
        return this.save(communityConfig);
      } else {
        return new CommunityConfig();
      }
    }).collect(toList());
  }

  private Community findCommunity(long communityId) {
    return communityGateway.findCommunityById(communityId)
        .orElseThrow(() -> new BusinessException(COMMUNITY_NOT_EXIST_MESSAGE));
  }

  @RepositoryDefinition(domainClass = CommunityConfig.class, idClass = Long.class)
  interface JpaRepository extends JpaSpecificationExecutor<CommunityConfig> {

    Optional<CommunityConfig> findById(Long id);

    CommunityConfig save(CommunityConfig communityConfig);

    List<CommunityConfig> saveAll(Iterable<CommunityConfig> communityConfigs);

    @Query(""SELECT c FROM CommunityConfig c where c.community.id = :communityId"")
    List<CommunityConfig> findByCommunity(@Param(""communityId"") Long communityId);

    @Query(""SELECT c FROM CommunityConfig c where c.confKey in (:confKeys) AND c.community.id = :communityId"")
    List<CommunityConfig> findByCommunity(@Param(""communityId"") Long communityId,
                                          @Param(""confKeys"") List<String> confKeys);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/io/gateway/CommunityGatewayImpl.java,"package com.globant.os.accounts.component.community.io.gateway;

import static java.util.Objects.isNull;
import static java.util.Objects.nonNull;
import static java.util.Optional.ofNullable;
import static java.util.stream.Collectors.toList;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.service.CommunityConfigService;
import com.globant.os.accounts.component.community.service.CommunityService;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityCreationCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityFindCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityUpdateCmd;
import com.globant.os.accounts.component.shared.io.gateway.SpringData;
import com.globant.os.accounts.external.smu.io.gateway.SmuCommunityClientGateway;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.BusinessException;
import com.globant.os.accounts.support.web.FindResult;
import java.util.ArrayList;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Supplier;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.RepositoryDefinition;
import org.springframework.stereotype.Repository;

@Repository
public class CommunityGatewayImpl implements CommunityGateway {

  private static final String COMMUNITY_NOT_EXIST_MESSAGE = ""Community not exist"";
  private static final String COMMUNITY_UNIQUE_VALUE_MESSAGE = ""There is already a Community with the %s '%s'"";
  private static final String FIELD_LESS_THAN_ZERO = ""The field '%s' can't be less than 0"";

  private static final String DOMAIN = ""domain"";
  private static final String NAME = ""name"";
  private static final String INTERNAL_TYPE = ""internalType"";
  private static final String CATEGORY = ""category"";

  @Autowired
  private JpaRepository repo;

  @Autowired
  private SmuCommunityClientGateway smuCommunityGateway;

  @Override
  public boolean existsById(long id) {
    return repo.existsById(id);
  }

  @Override
  public Optional<Community> findById(long id) {
    return repo.findById(id);
  }

  @Override
  public FindResult<Community> findAll(CommunityFindCmd cmd) {
    Specification<Community> spec = (root, q, cb) -> cb
        .and(SpringData.predicates(cmd.getName().map(s -> cb.like(root.get(NAME), s))));

    PageRequest page = SpringData.makePageRequest(cmd);

    Page<Community> resultPage = repo.findAll(spec, page);
    return SpringData.makeFindResult(resultPage);
  }

  @Override
  public Community save(Community c) {
    return repo.save(c);
  }

  @Override
  public Community save(CommunityCreationCmd cmd) {
    if (repo.findByName(cmd.getName()).isPresent()) {
      throw new BusinessException(String.format(COMMUNITY_UNIQUE_VALUE_MESSAGE, NAME, cmd.getName()));
    }

    cmd.getDomains().forEach(domain -> {
      if (repo.findByDomain(domain).isPresent()) {
        throw new BusinessException(String.format(COMMUNITY_UNIQUE_VALUE_MESSAGE, DOMAIN, domain));
      }
    });

    Community smuCommunity = smuCommunityGateway.createCommunity(cmd);
    Community c = createCommunity(cmd);
    c.setId(smuCommunity.getId());
    save(c);

    smuCommunity.setLocale(c.getLocale());
    smuCommunity.setLocales(c.getLocales());
    smuCommunity.setTimeZone(c.getTimeZone());
    smuCommunity.setTotalMembers(c.getTotalMembers());
    smuCommunity.setDomains(c.getDomains());
    smuCommunity.setPrimaryImage(c.getPrimaryImage());
    smuCommunity.setSecondaryImage(c.getSecondaryImage());
    smuCommunity.setProperties(c.getProperties());
    return smuCommunity;
  }

  @Override
  public Community update(CommunityUpdateCmd cmd) {
    validateFields(cmd);
    transformBasicConfigs(cmd);
    Optional<Community> community = findById(cmd.getId());

    if (community.isPresent() && community.get().isMigrated()) {
      if (repo.findByNameAndIdNot(cmd.getName(), cmd.getId()).isPresent()) {
        throw new BusinessException(String.format(COMMUNITY_UNIQUE_VALUE_MESSAGE, NAME, cmd.getName()));
      }

      if (nonNull(cmd.getDomains())) {
        cmd.getDomains().forEach(domain -> {
          if (repo.findByDomainIdNot(cmd.getId(), domain).isPresent()) {
            throw new BusinessException(String.format(COMMUNITY_UNIQUE_VALUE_MESSAGE, DOMAIN, domain));
          }
        });
      }

      community = this.updateCommunity(community, cmd);
    }

    Optional<Community> communityFromSmu = smuCommunityGateway.updateCommunity(cmd);

    return community.isPresent() && community.get().isMigrated() ? community.get()
        : communityFromSmu.orElseThrow(() -> new BusinessException(COMMUNITY_NOT_EXIST_MESSAGE));
  }

  @Override
  public Optional<Community> findCommunityById(long id) {
    Optional<Community> community = findById(id);

    if (!community.isPresent() || !community.get().isMigrated()) {
      community = smuCommunityGateway.getCommunity(id);
    }

    return community;
  }

  @Override
  public FindResult<Community> findCommunities(CommunityFindCmd cmd) {
    FindResult<Community> smuCommunities = smuCommunityGateway.getCommunities(cmd);

    return new FindResult<>(smuCommunities.getValues().stream()
        .map(smuCommunity -> findById(smuCommunity.getId()).filter(Community::isMigrated).orElse(smuCommunity))
        .collect(toList()), smuCommunities.getTotalSize());
  }

  @Override
  public Community enabledOrDisabled(long id, boolean value) {
    return findById(id).map(community -> {
      community.setEnabled(value);
      return community.isMigrated() ? save(community) : smuCommunityGateway.updateEnabledFlag(id, value);
    }).orElseGet(() -> smuCommunityGateway.updateEnabledFlag(id, value));
  }

  @Override
  public Community updateMigratedFlag(long id, boolean value) {
    return findById(id).map(community -> {
      community.setMigrated(value);
      return save(community);
    }).orElseThrow(() -> new BusinessException(COMMUNITY_NOT_EXIST_MESSAGE));
  }

  @Override
  public Boolean getCommunityMigrateStatus(long communityId) {
    Optional<Community> community = findById(communityId);
    return community.map(Community::isMigrated).orElse(false);
  }

  private void transformBasicConfigs(CommunityUpdateCmd cmd) {
    if (isNull(cmd.getConfigs())) {
      cmd.setConfigs(new ArrayList<>());
    }

    transformConfig(cmd, INTERNAL_TYPE, cmd::setInternalType, cmd::getInternalType);
    transformConfig(cmd, CATEGORY, cmd::setCategory, cmd::getCategory);
  }

  private void transformConfig(CommunityUpdateCmd cmd, String configKey, Consumer<Long> setterMethod,
                               Supplier<Long> getterMethod) {
    Optional<CommunityConfigService.CommunityConfigUpdateCmd> configUpdateCmd = cmd.getConfigs().stream()
            .filter(config -> configKey.equals(config.getConfKey())).findFirst();

    if (configUpdateCmd.isPresent()) {
      setterMethod.accept(Long.parseLong(configUpdateCmd.get().getConfValue()));
    } else {
      Optional.ofNullable(getterMethod.get()).ifPresent(value -> cmd.getConfigs().add(
              new CommunityConfigService.CommunityConfigUpdateCmd(configKey, String.valueOf(value))));
    }
  }

  private Optional<Community> updateCommunity(Optional<Community> community, CommunityUpdateCmd cmd) {
    return community.map(communityToUpdate -> {
      setData(ofNullable(cmd.getName()), communityToUpdate::setName);
      setData(ofNullable(cmd.getLocale()), communityToUpdate::setLocale);
      setData(ofNullable(cmd.getTimeZone()), communityToUpdate::setTimeZone);
      setData(ofNullable(cmd.getTotalMembers()), communityToUpdate::setTotalMembers);
      setData(ofNullable(cmd.getImages().getPrimary()), communityToUpdate::setPrimaryImage);
      setData(ofNullable(cmd.getImages().getSecondary()), communityToUpdate::setSecondaryImage);
      setData(ofNullable(cmd.getLocales()), communityToUpdate::setLocales);
      setData(ofNullable(cmd.getDomains()), communityToUpdate::setDomains);

      ofNullable(cmd.getConfigs()).ifPresent(configs -> configs.forEach(
          communityUpdateCmd -> communityToUpdate.getConfigs().stream().filter(
            communityConfig -> communityConfig.getConfKey().equals(communityUpdateCmd.getConfKey())).findFirst()
                .ifPresent(config -> config.setConfValue(communityUpdateCmd.getConfValue()))
      ));

      return save(communityToUpdate);
    });
  }

  private <E> void setData(Optional<E> data, Consumer<E> consumer) {
    data.ifPresent(consumer);
  }

  private void validateFields(CommunityService.CommunityUpdateCmd cmd) {
    if (nonNull(cmd.getTotalMembers()) && cmd.getTotalMembers() < 0) {
      throw new BadRequestException(String.format(FIELD_LESS_THAN_ZERO, ""totalMembers""));
    }
  }

  private Community createCommunity(CommunityCreationCmd cmd) {
    Community c = new Community(cmd.getName());
    c.setLocale(cmd.getLocale());
    c.setLocales(cmd.getLocales());
    c.setTimeZone(cmd.getTimeZone());
    c.setTotalMembers(cmd.getTotalMembers());
    c.setDomains(cmd.getDomains());
    c.setMigrated(true);
    if (nonNull(cmd.getImages())) {
      c.setPrimaryImage(cmd.getImages().getPrimary());
      c.setSecondaryImage(cmd.getImages().getSecondary());
    }
    return c;
  }

  @RepositoryDefinition(domainClass = Community.class, idClass = Long.class)
  interface JpaRepository extends JpaSpecificationExecutor<Community> {
    boolean existsById(long id);

    Optional<Community> findById(Long id);

    Optional<Community> findByName(String name);

    Optional<Community> findByNameAndIdNot(String name, Long id);

    Community save(Community cmd);

    @Query(""SELECT com FROM Community as com WHERE :domain MEMBER OF com.domains"")
    Optional<Community> findByDomain(String domain);

    @Query(""SELECT com FROM Community as com WHERE com.id != :id and :domain MEMBER OF com.domains"")
    Optional<Community> findByDomainIdNot(Long id, String domain);
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/MemberPropertyDefinition.java,"package com.globant.os.accounts.component.community.model;

import com.fasterxml.jackson.annotation.JsonValue;
import com.globant.os.accounts.component.shared.io.util.TypeJpaConverter;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
public class MemberPropertyDefinition implements Serializable {
  /**
   * Serial UUID.
   */
  private static final long serialVersionUID = 6129662901497100252L;

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @NotBlank
  private String name;

  private String description;

  @Convert(converter = TypeJpaConverter.class)
  private Type type;

  @ManyToOne
  @JoinColumn(name = ""community_id"", nullable = false)
  private Community community;

  private boolean enabled = true;

  @ManyToOne(fetch = FetchType.LAZY, optional = true)
  @JoinColumn(name = ""parent_id"")
  private MemberPropertyDefinition parent;

  @OneToMany(mappedBy = ""parent"", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
  private Set<MemberPropertyDefinition> children;

  public MemberPropertyDefinition() { }

  public MemberPropertyDefinition(Community community, String name, Type type, String description) {
    this.community = community;
    this.name = name;
    this.type = type;
    this.description = description;
    this.children = new HashSet<>();
  }

  public MemberPropertyDefinition(Community community, String name, Type type) {
    this.community = community;
    this.name = name;
    this.type = type;
    this.children = new HashSet<>();
  }

  @Getter
  public enum Type {
    DATE(""date""), NUMBER(""number""), TEXT(""text"");

    private String value;

    Type(String value) {
      this.value = value;
    }

    @JsonValue
    public String toJson() {
      return name().toLowerCase();
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/MemberUpdatedEvent.java,"package com.globant.os.accounts.component.community.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.HashMap;
import lombok.Getter;

@Getter
public class MemberUpdatedEvent extends BaseMemberEvent {

  private static final String LOGIN = ""loginId"";
  private static final String FIRST_NAME = ""firstName"";
  private static final String LAST_NAME = ""lastName"";
  private static final String ENABLED = ""enabled"";

  @JsonIgnore
  private String loginId;
  @JsonIgnore
  private String firstName;
  @JsonIgnore
  private String lastName;
  @JsonIgnore
  private boolean enabled;

  private MemberUpdatedEvent(String type, String source, long timestamp, Long communityId, Long memberId) {
    super(type, source, timestamp, communityId, memberId);
  }

  public static Builder builder(String source, long timestamp, Long communityId, Long memberId) {
    return new Builder(CommunityTypeEvent.COMMUNITY_MEMBER_UPDATED.getType(), source, timestamp, communityId,
        memberId);
  }

  @Override
  public Serializable getPayload() {
    HashMap<String, Object> payload = createPayload();
    payload.put(LOGIN, loginId);
    payload.put(FIRST_NAME, firstName);
    payload.put(LAST_NAME, lastName);
    payload.put(ENABLED, enabled);
    return payload;
  }

  @Override
  public String toString() {
    return ""CommunityUpdatedEvent [loginId= "" + loginId + "", firstName="" + firstName + "", "" + "", lastName="" + lastName
        + "", "" + ""baseMemberEvent="" + super.toString() + ""]"";
  }

  public static class Builder {

    private MemberUpdatedEvent event;

    private Builder(String type, String source, long timestamp, Long communityId, Long memberId) {
      this.event = new MemberUpdatedEvent(type, source, timestamp, communityId, memberId);
    }

    public Builder loginId(String loginId) {
      this.event.loginId = loginId;
      return this;
    }

    public Builder firstName(String firstName) {
      this.event.firstName = firstName;
      return this;
    }

    public Builder lastName(String lastName) {
      this.event.lastName = lastName;
      return this;
    }

    public Builder enabled(boolean enabled) {
      this.event.enabled = enabled;
      return this;
    }

    public MemberUpdatedEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/CommunityTypeEvent.java,"package com.globant.os.accounts.component.community.model;

public enum CommunityTypeEvent {

  COMMUNITY_CREATED(""os.community.created""),
  COMMUNITY_UPDATED(""os.community.updated""),
  COMMUNITY_DELETED(""os.community.deleted""),
  COMMUNITY_ENABLED(""os.community.enabled""),
  COMMUNITY_DISABLED(""os.community.disabled""),
  COMMUNITY_MIGRATED(""os.community.migrated""),
  COMMUNITY_NOT_MIGRATED(""os.community.notmigrated""),
  COMMUNITY_MEMBER_CREATED(""os.community.member.added""),
  COMMUNITY_MEMBER_UPDATED(""os.community.member.updated""),
  COMMUNITY_MEMBER_ENABLED(""os.community.member.enabled""),
  COMMUNITY_MEMBER_DISABLED(""os.community.member.disabled"");

  private String type;

  private CommunityTypeEvent(String type) {
    this.type = type;
  }

  public String getType() {
    return type;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/Community.java,"package com.globant.os.accounts.component.community.model;

import com.globant.os.accounts.component.community.model.MemberPropertyDefinition.Type;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@Entity
@Getter
@Setter
@ToString(of = { ""id"", ""name"" })
public class Community implements Serializable {
  /**
   * Serial UUID.
   */
  private static final long serialVersionUID = 8525819639280861513L;

  public static final int LOCALE_MAX_LENGTH = 32;
  public static final int TIME_ZONE_MAX_LENGTH = 64;

  public static final String LOGIN_ID_PROPERTY = ""loginId"";
  public static final String EXTERNAL_ID_PROPERTY = ""externalId"";
  public static final String PROFILE_IMAGE_ID_PROPERTY = ""profileImageId"";
  public static final String JOB_PROPERTY = ""job"";
  public static final String SENIORITY_PROPERTY = ""seniority"";
  public static final String AREA_PROPERTY = ""area"";
  public static final String ACCOUNT_PROPERTY = ""account"";
  public static final String PROJECT_PROPERTY = ""project"";
  public static final String ORG_ENTRY_DATE_PROPERTY = ""orgEntryDate"";
  public static final String BIRTH_DATE_PROPERTY = ""birthDate"";
  public static final String OFFICE_ID_PROPERTY = ""officeId"";
  public static final String OFFICE_PROPERTY = ""office"";
  public static final String PHONE_NUMBER_PROPERTY = ""phoneNumber"";
  public static final String CUSTOM_FIELD_1_PROPERTY = ""customField1"";
  public static final String CUSTOM_FIELD_2_PROPERTY = ""customField2"";
  public static final String CUSTOM_FIELD_3_PROPERTY = ""customField3"";
  public static final String CUSTOM_FIELD_4_PROPERTY = ""customField4"";
  public static final String CUSTOM_FIELD_5_PROPERTY = ""customField5"";
  public static final String CUSTOM_FIELD_6_PROPERTY = ""customField6"";
  public static final String CUSTOM_FIELD_7_PROPERTY = ""customField7"";
  public static final String CUSTOM_FIELD_8_PROPERTY = ""customField8"";
  public static final String CUSTOM_FIELD_9_PROPERTY = ""customField9"";
  public static final String CUSTOM_FIELD_10_PROPERTY = ""customField10"";
  public static final String CUSTOM_FIELD_11_PROPERTY = ""customField11"";
  public static final String NICKNAME_PROPERTY = ""nickname"";

  // TODO: add GeneratedValue(strategy = GenerationType.IDENTITY) when there isn't any dependency with SMU for user
  // creation
  @Id
  @Setter
  private Long id;

  @NotBlank
  @Basic(optional = false)
  @Column(unique = true)
  private String name;

  @Column(length = LOCALE_MAX_LENGTH)
  private Locale locale;

  @Column(length = TIME_ZONE_MAX_LENGTH)
  private TimeZone timeZone;

  private Long totalMembers;

  private String primaryImage;

  private String secondaryImage;

  private boolean enabled = true;

  private boolean migrated = false;

  @Setter
  @ElementCollection
  @CollectionTable(name = ""community_locale"")
  @Column(name = ""locale"", length = LOCALE_MAX_LENGTH)
  private Set<Locale> locales;

  @Setter
  @ElementCollection
  @CollectionTable(name = ""community_domain"")
  @Column(name = ""domain"")
  private Set<String> domains;

  @OneToMany(mappedBy = ""community"", cascade = CascadeType.ALL, orphanRemoval = true)
  private Set<MemberPropertyDefinition> properties;

  @OneToMany(mappedBy = ""id.community"")
  private Set<Member> members;

  @OneToMany(mappedBy = ""community"")
  private Set<CommunityConfig> configs;

  public Community() {
  }

  public Community(long id) {
    this.id = id;
  }

  public Community(String name) {
    setName(name);
    setProperties(new HashSet<>());
    getProperties().add(new MemberPropertyDefinition(this, LOGIN_ID_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, EXTERNAL_ID_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, PROFILE_IMAGE_ID_PROPERTY, Type.NUMBER));
    getProperties().add(new MemberPropertyDefinition(this, JOB_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, SENIORITY_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, AREA_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, ACCOUNT_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, PROJECT_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, ORG_ENTRY_DATE_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, OFFICE_ID_PROPERTY, Type.NUMBER));
    getProperties().add(new MemberPropertyDefinition(this, PHONE_NUMBER_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_1_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_2_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_3_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_4_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_5_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_6_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_7_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_8_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_9_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_10_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, CUSTOM_FIELD_11_PROPERTY, Type.TEXT));
    getProperties().add(new MemberPropertyDefinition(this, NICKNAME_PROPERTY, Type.TEXT));
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/MemberCreatedEvent.java,"package com.globant.os.accounts.component.community.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.HashMap;
import lombok.Getter;

@Getter
public class MemberCreatedEvent extends BaseMemberEvent {

  private static final String LOGIN = ""loginId"";
  private static final String FIRST_NAME = ""firstName"";
  private static final String LAST_NAME = ""lastName"";

  @JsonIgnore
  private String loginId;
  @JsonIgnore
  private String firstName;
  @JsonIgnore
  private String lastName;

  private MemberCreatedEvent(String type, String source, long timestamp, Long communityId, Long memberId) {
    super(type, source, timestamp, communityId, memberId);
  }

  public static Builder builder(String source, long timestamp, Long communityId, Long memberId) {
    return new Builder(CommunityTypeEvent.COMMUNITY_MEMBER_CREATED.getType(), source, timestamp, communityId,
        memberId);
  }

  @Override
  public Serializable getPayload() {
    HashMap<String, Object> payload = createPayload();
    payload.put(LOGIN, loginId);
    payload.put(FIRST_NAME, firstName);
    payload.put(LAST_NAME, lastName);
    return payload;
  }

  @Override
  public String toString() {
    return ""CommunityUpdatedEvent [loginId= "" + loginId + "", firstName="" + firstName + "", "" + "", lastName="" + lastName
        + "", "" + ""baseMemberEvent="" + super.toString() + ""]"";
  }

  public static class Builder {

    private MemberCreatedEvent event;

    private Builder(String type, String source, long timestamp, Long communityId, Long memberId) {
      this.event = new MemberCreatedEvent(type, source, timestamp, communityId, memberId);
    }

    public Builder loginId(String loginId) {
      this.event.loginId = loginId;
      return this;
    }

    public Builder firstName(String firstName) {
      this.event.firstName = firstName;
      return this;
    }

    public Builder lastName(String lastName) {
      this.event.lastName = lastName;
      return this;
    }

    public MemberCreatedEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/CommunityMigratedEvent.java,"package com.globant.os.accounts.component.community.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import lombok.Getter;

@Getter
public class CommunityMigratedEvent extends BaseCommunityEvent {

  @JsonIgnore
  private boolean status;

  private CommunityMigratedEvent(String type, String source, long timestamp, Long communityId) {
    super(type, source, timestamp, communityId);
  }

  public static Builder builder(boolean status, String source, long timestamp, Long communityId) {
    return new Builder(status, source, timestamp, communityId);
  }

  @Override
  public Serializable getPayload() {
    return createPayload();
  }

  @Override
  public String toString() {
    return ""CommunityMigratedEvent [status= "" + status + "", "" + ""baseCommunityEvent="" + super.toString() + ""]"";
  }

  public static class Builder {

    private CommunityMigratedEvent event;

    private Builder(boolean status, String source, long timestamp, Long communityId) {
      if (status) {
        this.event = new CommunityMigratedEvent(CommunityTypeEvent.COMMUNITY_MIGRATED.getType(), source,
            timestamp, communityId);
      } else {
        this.event = new CommunityMigratedEvent(CommunityTypeEvent.COMMUNITY_NOT_MIGRATED.getType(), source,
            timestamp, communityId);
      }
    }

    public Builder status(boolean status) {
      this.event.status = status;
      return this;
    }

    public CommunityMigratedEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/CommunityConfig.java,"package com.globant.os.accounts.component.community.model;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString(of = { ""id"" })
@Entity
public class CommunityConfig implements Serializable {

  private static final long serialVersionUID = 2876591608147922583L;

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @NotBlank
  private String confKey;

  @NotBlank
  private String confValue;

  @Temporal(TemporalType.TIMESTAMP)
  private Date lastUpdate;

  @ManyToOne
  private Community community;

  @PrePersist
  protected void onCreate() {
    lastUpdate = new Date();
  }

  @PreUpdate
  protected void onUpdate() {
    lastUpdate = new Date();
  }

  public CommunityConfig(Long id, @NotBlank String confKey, @NotBlank String confValue, Community community) {
    this.id = id;
    this.confKey = confKey;
    this.confValue = confValue;
    this.community = community;
  }

  public CommunityConfig(@NotBlank String confKey, @NotBlank String confValue, Community community) {
    this.confKey = confKey;
    this.confValue = confValue;
    this.community = community;
  }

  public CommunityConfig(@NotBlank String confKey, @NotBlank String confValue) {
    this.confKey = confKey;
    this.confValue = confValue;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/MemberEnabledDisabledEvent.java,"package com.globant.os.accounts.component.community.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import lombok.Getter;

@Getter
public class MemberEnabledDisabledEvent extends BaseMemberEvent {

  @JsonIgnore
  private boolean status;

  private MemberEnabledDisabledEvent(String type, String source, long timestamp, Long communityId, Long memberId) {
    super(type, source, timestamp, communityId, memberId);
  }

  public static Builder builder(boolean status, String source, long timestamp, Long communityId, Long memberId) {
    return new Builder(status, source, timestamp, communityId, memberId);
  }

  @Override
  public Serializable getPayload() {
    return createPayload();
  }

  @Override
  public String toString() {
    return ""MemberEnabledDisabledEvent [status= "" + status + "", "" + ""baseCommunityEvent="" + super.toString() + ""]"";
  }

  public static class Builder {

    private MemberEnabledDisabledEvent event;

    private Builder(boolean status, String source, long timestamp, Long communityId, Long memberId) {
      if (status) {
        this.event = new MemberEnabledDisabledEvent(CommunityTypeEvent.COMMUNITY_MEMBER_ENABLED.getType(), source,
            timestamp, communityId, memberId);
      } else {
        this.event = new MemberEnabledDisabledEvent(CommunityTypeEvent.COMMUNITY_MEMBER_DISABLED.getType(), source,
            timestamp, communityId, memberId);
      }
    }

    public Builder status(boolean status) {
      this.event.status = status;
      return this;
    }

    public MemberEnabledDisabledEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/BaseMemberEvent.java,"package com.globant.os.accounts.component.community.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.globant.smu.os.events.shared.model.BaseEvent;
import java.util.HashMap;

public class BaseMemberEvent extends BaseEvent {

  private static final String COMMUNITY_ID = ""communityId"";
  private static final String MEMBER_ID = ""memberId"";

  @JsonIgnore
  private Long communityId;
  @JsonIgnore
  private Long memberId;

  public BaseMemberEvent(String type, String source, long timestamp, Long communityId, Long memberId) {
    super(type, source, timestamp);
    this.communityId = communityId;
    this.memberId = memberId;
  }

  protected HashMap<String, Object> createPayload() {
    HashMap<String, Object> payload = new HashMap<>();
    payload.put(COMMUNITY_ID, communityId);
    payload.put(MEMBER_ID, memberId);

    return payload;
  }

  @Override
  public String toString() {
    return ""BaseCommunityEvent [communityId="" + communityId + "", memberId="" + memberId + "", timestamp="" + getTimestamp()
        + "", source="" + getSource() + "", type="" + getType() + ""]"";
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/BaseCommunityEvent.java,"package com.globant.os.accounts.component.community.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.globant.smu.os.events.shared.model.BaseEvent;
import java.util.HashMap;

public class BaseCommunityEvent extends BaseEvent {

  private static final String COMMUNITY_ID = ""communityId"";

  @JsonIgnore
  private Long communityId;

  public BaseCommunityEvent(String type, String source, long timestamp, Long communityId) {
    super(type, source, timestamp);
    this.communityId = communityId;
  }

  protected HashMap<String, Object> createPayload() {
    HashMap<String, Object> payload = new HashMap<>();
    payload.put(COMMUNITY_ID, communityId);

    return payload;
  }

  @Override
  public String toString() {
    return ""BaseCommunityEvent [communityId="" + communityId + "", timestamp="" + getTimestamp() + "", source=""
        + getSource() + "", type="" + getType() + ""]"";
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/MemberConfig.java,"package com.globant.os.accounts.component.community.model;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotBlank;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Getter
@Setter
@NoArgsConstructor
public class MemberConfig implements Serializable {
  /**
   * Serial UUID.
   */
  private static final long serialVersionUID = 7515161297267858171L;

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Setter(AccessLevel.NONE)
  private Long id;

  @NotBlank
  private String confKey;

  @NotBlank
  private String confValue;

  @Temporal(TemporalType.TIMESTAMP)
  private Date lastUpdate;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumns({@JoinColumn(name = ""member_community_id"", nullable = false),
                @JoinColumn(name = ""member_user_id"", nullable = false)})
  private Member member;

  public MemberConfig(Long id, String confKey, String confValue, Member member) {
    this.id = id;
    setConfKey(confKey);
    setConfValue(confValue);
    setMember(member);
  }

  public MemberConfig(String confKey, String confValue, Member member) {
    setConfKey(confKey);
    setConfValue(confValue);
    setMember(member);
  }

  @PrePersist
  protected void onCreate() {
    lastUpdate = new Date();
  }

  @PreUpdate
  protected void onUpdate() {
    lastUpdate = new Date();
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/CommunityEnabledDisabledEvent.java,"package com.globant.os.accounts.component.community.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import lombok.Getter;

@Getter
public class CommunityEnabledDisabledEvent extends BaseCommunityEvent {

  @JsonIgnore
  private boolean status;

  private CommunityEnabledDisabledEvent(String type, String source, long timestamp, Long communityId) {
    super(type, source, timestamp, communityId);
  }

  public static Builder builder(boolean status, String source, long timestamp, Long communityId) {
    return new Builder(status, source, timestamp, communityId);
  }

  @Override
  public Serializable getPayload() {
    return createPayload();
  }

  @Override
  public String toString() {
    return ""CommunityEnabledDisabledEvent [status= "" + status + "", "" + ""baseCommunityEvent="" + super.toString() + ""]"";
  }

  public static class Builder {

    private CommunityEnabledDisabledEvent event;

    private Builder(boolean status, String source, long timestamp, Long communityId) {
      if (status) {
        this.event = new CommunityEnabledDisabledEvent(CommunityTypeEvent.COMMUNITY_ENABLED.getType(), source,
            timestamp, communityId);
      } else {
        this.event = new CommunityEnabledDisabledEvent(CommunityTypeEvent.COMMUNITY_DISABLED.getType(), source,
            timestamp, communityId);
      }
    }

    public Builder status(boolean status) {
      this.event.status = status;
      return this;
    }

    public CommunityEnabledDisabledEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/CommunityUpdatedEvent.java,"package com.globant.os.accounts.component.community.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.HashMap;
import lombok.Getter;

@Getter
public class CommunityUpdatedEvent extends BaseCommunityEvent {

  private static final String NAME = ""name"";
  private static final String TOTAL_MEMBERS = ""total_members"";

  @JsonIgnore
  private String name;
  @JsonIgnore
  private Long totalMembers;

  private CommunityUpdatedEvent(String type, String source, long timestamp, Long communityId) {
    super(type, source, timestamp, communityId);
  }

  public static Builder builder(String source, long timestamp, Long communityId) {
    return new Builder(CommunityTypeEvent.COMMUNITY_UPDATED.getType(), source, timestamp, communityId);
  }

  @Override
  public Serializable getPayload() {
    HashMap<String, Object> payload = createPayload();
    payload.put(NAME, name);
    payload.put(TOTAL_MEMBERS, totalMembers);
    return payload;
  }

  @Override
  public String toString() {
    return ""CommunityUpdatedEvent [total_members= "" + totalMembers + "", name="" + name + "", "" + ""baseCommunityEvent=""
        + super.toString() + ""]"";
  }

  public static class Builder {

    private CommunityUpdatedEvent event;

    private Builder(String type, String source, long timestamp, Long communityId) {
      this.event = new CommunityUpdatedEvent(type, source, timestamp, communityId);
    }

    public Builder name(String name) {
      this.event.name = name;
      return this;
    }

    public Builder totalMembers(Long totalMembers) {
      this.event.totalMembers = totalMembers;
      return this;
    }

    public CommunityUpdatedEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/CommunityCreatedEvent.java,"package com.globant.os.accounts.component.community.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.HashMap;
import lombok.Getter;

@Getter
public class CommunityCreatedEvent extends BaseCommunityEvent {

  private static final String NAME = ""name"";
  private static final String TOTAL_MEMBERS = ""total_members"";

  @JsonIgnore
  private String name;
  @JsonIgnore
  private Long totalMembers;

  private CommunityCreatedEvent(String type, String source, long timestamp, Long communityId) {
    super(type, source, timestamp, communityId);
  }

  public static Builder builder(String source, long timestamp, Long communityId) {
    return new Builder(CommunityTypeEvent.COMMUNITY_CREATED.getType(), source, timestamp, communityId);
  }

  @Override
  public Serializable getPayload() {
    HashMap<String, Object> payload = createPayload();
    payload.put(NAME, name);
    payload.put(TOTAL_MEMBERS, totalMembers);
    return payload;
  }

  @Override
  public String toString() {
    return ""CommunityCreatedEvent [total_members= "" + totalMembers + "", name="" + name + "", "" + ""baseCommunityEvent=""
        + super.toString() + ""]"";
  }

  public static class Builder {

    private CommunityCreatedEvent event;

    private Builder(String type, String source, long timestamp, Long communityId) {
      this.event = new CommunityCreatedEvent(type, source, timestamp, communityId);
    }

    public Builder name(String name) {
      this.event.name = name;
      return this;
    }

    public Builder totalMembers(Long totalMembers) {
      this.event.totalMembers = totalMembers;
      return this;
    }

    public CommunityCreatedEvent build() {
      return event;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/model/Member.java,"package com.globant.os.accounts.component.community.model;

import static java.util.Objects.nonNull;
import static java.util.Objects.requireNonNull;

import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.support.web.BusinessException;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Embeddable;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Getter
@Setter
public class Member implements Serializable {
  /**
   * Serial UUID.
   */
  private static final long serialVersionUID = -6638892995902065620L;

  @EmbeddedId
  private MemberId id;

  @Column(length = Community.LOCALE_MAX_LENGTH)
  private Locale locale;

  @Basic
  private String firstName;

  @Basic
  private String lastName;

  private String email;

  private String image;

  private boolean enabled = true;

  private boolean migrated = false;

  @ElementCollection
  @CollectionTable(name = ""member_property_value"")
  private Set<PropertyValue> properties;

  @OneToMany(mappedBy = ""member"", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
  private Set<MemberConfig> configs;

  public Member() {
  }

  public Member(Community community, OsUser user, String externalId, String loginId) {
    setId(new MemberId(requireNonNull(community, ""community""), requireNonNull(user, ""user"")));
    setProperties(new HashSet<>());

    MemberPropertyDefinition externalIdProperty = community.getProperties().stream()
        .filter(x -> x.getName().equals(Community.EXTERNAL_ID_PROPERTY)).findFirst()
        .orElseThrow(() -> new BusinessException(""Not found external property definition""));
    MemberPropertyDefinition identificationProperty = community.getProperties().stream()
        .filter(x -> x.getName().equals(Community.LOGIN_ID_PROPERTY)).findFirst()
        .orElseThrow(() -> new BusinessException(""Not found identification property definition""));

    getProperties()
        .add(new PropertyValue(requireNonNull(loginId, Community.LOGIN_ID_PROPERTY), identificationProperty));
    getProperties()
        .add(new PropertyValue(nonNull(externalId) ? externalId : loginId, externalIdProperty));
    setMigrated(true);
  }

  @Embeddable
  @Getter
  @AllArgsConstructor
  @NoArgsConstructor
  public static class MemberId implements Serializable {
    /**
     * Serial UUID.
     */
    private static final long serialVersionUID = 3862910914724300472L;

    @ManyToOne(optional = false)
    Community community;
    @ManyToOne(optional = false)
    OsUser user;
  }

  @Embeddable
  @Getter
  @Setter
  @NoArgsConstructor
  public static class PropertyValue implements Serializable {
    /**
     * Serial UUID.
     */
    private static final long serialVersionUID = 210792802688779000L;

    private String value;

    @ManyToOne
    @JoinColumns({@JoinColumn(name = ""member_property_definition_id"")})
    private MemberPropertyDefinition property;

    @Temporal(TemporalType.DATE)
    private Date created;

    public PropertyValue(String value, MemberPropertyDefinition property) {
      super();
      this.setValue(value);
      this.setProperty(property);
    }

    @PrePersist
    protected void onCreate() {
      created = new Date();
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/CommunityServiceImpl.java,"package com.globant.os.accounts.component.community.service;

import static java.util.Objects.nonNull;

import com.globant.os.accounts.component.community.io.gateway.CommunityGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityCreatedEvent;
import com.globant.os.accounts.component.community.model.CommunityEnabledDisabledEvent;
import com.globant.os.accounts.component.community.model.CommunityMigratedEvent;
import com.globant.os.accounts.component.community.model.CommunityUpdatedEvent;
import com.globant.os.accounts.component.shared.io.util.EventPublisherComponent;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.FindResult;
import java.util.Optional;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
public class CommunityServiceImpl implements CommunityService {

  private static final String FIELD_LESS_THAN_ZERO = ""The field '%s' can't be less than 0"";

  @Value(""${os-events.publisher.communities-topic}"")
  private String topic;

  @Value(""${os-events.publisher.source}"")
  private String source;

  @Autowired
  private CommunityGateway communityGtwy;

  @Autowired
  private EventPublisherComponent eventPublisherComponent;

  @Override
  @CommunitySingleCache
  public Optional<CommunityDetailsCmd> findById(long id) {
    return communityGtwy.findCommunityById(id).map(CommunityDetailsCmd::fromModel);
  }

  @Override
  public FindResult<Community> findAll(CommunityFindCmd cmd) {
    return communityGtwy.findCommunities(cmd);
  }

  @Override
  public Community create(CommunityCreationCmd cmd) {
    validateFields(cmd);
    Community community = communityGtwy.save(cmd);

    eventPublisherComponent.sendEvent(topic,
        CommunityCreatedEvent.builder(source, DateTime.now().getMillis(), community.getId()).name(community.getName())
            .totalMembers(community.getTotalMembers()).build());

    return community;
  }

  @Override
  @CacheEvict(value = Constants.NAME_CACHE_COMMUNITY_SINGLE, key = Constants.KEY_CMD_CACHE_COMMUNITY_SINGLE)
  public Community update(CommunityUpdateCmd cmd) {
    validateFields(cmd);
    Community community = communityGtwy.update(cmd);

    eventPublisherComponent.sendEvent(topic,
        CommunityUpdatedEvent.builder(source, DateTime.now().getMillis(), community.getId()).name(community.getName())
            .totalMembers(community.getTotalMembers()).build());

    return community;
  }

  @Override
  @CacheEvict(value = Constants.NAME_CACHE_COMMUNITY_SINGLE, key = Constants.KEY_CACHE_COMMUNITY_SINGLE)
  public Community updateEnabledFlag(long id, boolean value) {
    Community community = communityGtwy.enabledOrDisabled(id, value);

    eventPublisherComponent.sendEvent(topic, CommunityEnabledDisabledEvent
        .builder(value, source, DateTime.now().getMillis(), community.getId()).status(community.isEnabled()).build());

    return community;
  }

  @Override
  @CacheEvict(value = Constants.NAME_CACHE_COMMUNITY_SINGLE, key = Constants.KEY_CACHE_COMMUNITY_SINGLE)
  public Community updateMigratedFlag(long id, boolean value) {
    Community community = communityGtwy.updateMigratedFlag(id, value);

    eventPublisherComponent.sendEvent(topic, CommunityMigratedEvent
        .builder(value, source, DateTime.now().getMillis(), community.getId()).status(community.isMigrated()).build());

    return community;
  }

  @Override
  @Transactional(readOnly = true)
  public Boolean getCommunityMigrateStatus(long communityId) {
    return communityGtwy.getCommunityMigrateStatus(communityId);
  }

  private void validateFields(CommunityUpdateCmd cmd) {
    if (nonNull(cmd.getTotalMembers()) && cmd.getTotalMembers() < 0) {
      throw new BadRequestException(String.format(FIELD_LESS_THAN_ZERO, ""totalMembers""));
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/CommunityConfigServiceImpl.java,"package com.globant.os.accounts.component.community.service;

import static java.util.stream.Collectors.toList;
import static org.springframework.util.StringUtils.isEmpty;

import com.globant.os.accounts.component.community.io.gateway.CommunityConfigGateway;
import com.globant.os.accounts.component.community.io.gateway.CommunityGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityConfig;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.BusinessException;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
public class CommunityConfigServiceImpl implements CommunityConfigService {

  private static final String COMMUNITY_NOT_EXIST_MESSAGE = ""Community not exist"";

  @Autowired
  private CommunityConfigGateway configGtwy;

  @Autowired
  private CommunityGateway communityGtwy;

  @Override
  @Transactional(readOnly = true)
  public Optional<CommunityConfig> findById(long id) {
    return configGtwy.findById(id);
  }

  @Override
  @Transactional(readOnly = true)
  public FindResult<CommunityConfig> findByCommunity(long communityId, BaseFindCmd cmd) {
    return configGtwy.findByCommunity(communityId, cmd);
  }

  @Override
  public List<CommunityConfig> create(long communityId, List<CommunityConfigCreationCmd> communityConfigCreationList) {
    Community community = findCommunity(communityId);
    return configGtwy.save(communityConfigCreationList.stream()
        .filter(cmd -> !isEmpty(cmd.getConfKey()) && !isEmpty(cmd.getConfValue()))
        .map(cmd -> new CommunityConfig(cmd.getConfKey(), cmd.getConfValue(), community)).collect(toList()));
  }

  @Override
  public List<CommunityConfig> update(long communityId, List<CommunityConfigUpdateCmd> communityConfigUpdateList) {
    return configGtwy.updateCommunityConfigs(communityId, communityConfigUpdateList);
  }

  private Community findCommunity(long communityId) {
    return communityGtwy.findById(communityId).orElseThrow(() -> new BusinessException(COMMUNITY_NOT_EXIST_MESSAGE));
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/MemberService.java,"package com.globant.os.accounts.component.community.service;

import static java.util.Objects.isNull;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import com.globant.os.accounts.component.community.model.MemberConfig;
import com.globant.os.accounts.external.smu.model.SmuLanguageDto;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.io.Serializable;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;

public interface MemberService {

  Optional<MemberDetailsCmd> findById(long communityId, long userId);

  Optional<MemberDetailsCmd> findByLoginId(long communityId, String loginId);

  Map<String, Long> findCommunityMembersNotContentInTheLoginIdsList(long communityId, List<String> loginIds);

  Member create(long communityId, MemberCreationCmd cmd);

  List<Member> create(long communityId, @Valid List<MemberCreationCmd> cmds);

  Member updateEnabledFlag(long communityId, long userId, boolean value);

  Member update(long communityId, long userId, MemberUpdateCmd cmd);

  List<Member> findByIds(long communityId, long[] userIds);

  FindResult<Member> findMembers(long communityId, MemberBaseFindCmd cmd);

  List<PropertyValue> updateMemberProperties(long communityId, long userId, MemberUpdatePropertyCmd cmd);

  @Getter
  @Setter
  @JsonInclude(JsonInclude.Include.NON_NULL)
  class MemberCreationCmd extends MemberCmd {
    @NotBlank
    private String loginId;
    @NotBlank
    private String firstName;
    @NotNull
    private String lastName;
    private SmuLanguageDto language;
  }

  @Getter
  @Setter
  @JsonInclude(JsonInclude.Include.NON_NULL)
  class MemberUpdateCmd extends MemberCmd {
    private long id;
    private String loginId;
    private boolean enabled;
    private String firstName;
    private String lastName;
  }

  @Getter
  @Setter
  @AllArgsConstructor
  @JsonInclude(JsonInclude.Include.NON_NULL)
  class MemberEnabledDisabledCmd {
    private long id;
    private boolean enabled;
  }

  @Data
  @JsonInclude(JsonInclude.Include.NON_NULL)
  class CustomFieldCmd {
    private String customField1;
    private String customField2;
    private String customField3;
    private String customField4;
    private String customField5;
    private String customField6;
    private String customField7;
    private String customField8;
    private String customField9;
    private String customField10;
    private String customField11;
  }

  @Getter
  @Setter
  @AllArgsConstructor
  @NoArgsConstructor
  @JsonInclude(JsonInclude.Include.NON_NULL)
  class MemberBaseFindCmd extends BaseFindCmd {
    private static final long serialVersionUID = 5911553236252009125L;
    private String searchString;
  }

  @Getter
  @Setter
  @JsonInclude(JsonInclude.Include.NON_NULL)
  class MemberUpdatePropertyCmd {
    private String loginId;
    private String externalId;
    private Long profileImageId;
    private String middleName;
    private String nickname;
    private String job;
    private String seniority;
    private String area;
    private String account;
    private String project;
    private String orgEntryDate;
    private Integer officeId;
    private String phoneNumber;
    private String customField1;
    private String customField2;
    private String customField3;
    private String customField4;
    private String customField5;
    private String customField6;
    private String customField7;
    private String customField8;
    private String customField9;
    private String customField10;
    private String customField11;
  }

  @Getter
  @Setter
  @JsonInclude(JsonInclude.Include.NON_NULL)
  class MemberCmd {
    private String externalId;
    private long userId;
    private Long communityId;
    private String email;
    private String profileImageCode;
    private Locale locale;
    private String identification;
    private String job;
    private String middleName;
    private String nickname;
    private String birthDate;
    private String orgEntryDate;
    private String phoneNumber;
    private String seniority;
    private String project;
    private int office;
    private String account;
    private String area;
    private String profileImageId;
    //TODO: This field {{customerMode}} should be removed when the migration will be completed.
    private boolean customerMode;
    private CustomFieldCmd customFields;
    private Map<String, String> properties;
    private Map<String, String> configs;
  }

  @Getter
  @Setter
  class MemberDetailsCmd implements Serializable {
    private static final long serialVersionUID = 8018015415882892555L;

    private static final String DUPLICATE_KEY_FOUND_WITH_VALUE = ""Duplicate key found! with value %s"";
    private static Logger logger = LoggerFactory.getLogger(MemberDetailsCmd.class);

    private long communityId;
    private long userId;
    private String firstName;
    private String lastName;
    private String email;
    private String image;
    private Locale locale;
    private LocalDate birthDate;
    private boolean enabled;
    private Map<String, Object> properties;
    private Map<String, Object> configs;

    public static MemberDetailsCmd fromModel(Member member) {
      MemberDetailsCmd details = new MemberDetailsCmd();
      details.setCommunityId(member.getId().getCommunity().getId());
      details.setUserId(member.getId().getUser().getId());
      details.setFirstName(member.getFirstName());
      details.setLastName(member.getLastName());
      details.setEmail(member.getEmail());
      details.setImage(member.getImage());
      details.setLocale(member.getLocale());
      details.setEnabled(member.isEnabled());

      Map<String, Object> properties = isNull(member.getProperties()) ? new HashMap<>()
          : member.getProperties().stream().filter(e -> Objects.nonNull(e.getValue()))
          .collect(Collectors.toMap(e -> e.getProperty().getName(), PropertyValue::getValue, (property1, property2) -> {
            logger.info(DUPLICATE_KEY_FOUND_WITH_VALUE, property1);
            return property1;
          }));
      details.setProperties(properties);

      Map<String, Object> configs = isNull(member.getConfigs()) ? new HashMap<>()
          : member.getConfigs().stream().filter(e -> Objects.nonNull(e.getConfValue()))
          .collect(Collectors.toMap(MemberConfig::getConfKey, MemberConfig::getConfValue, (config1, config2) -> {
            logger.info(DUPLICATE_KEY_FOUND_WITH_VALUE, config1);
            return config1;
          }));
      details.setConfigs(configs);
      return details;
    }
  }

  final class Constants {
    static final String KEY_CACHE_MEMBER_SINGLE = ""#communityId + '-' + #userId"";
    static final String KEY_CACHE_MEMBER_LIST = ""#communityId + '-' + #userIds"";
    static final String NAME_CACHE_MEMBER_SINGLE = ""member-single"";
    static final String NAME_CACHE_MEMBER_LIST = ""member-list"";

    private Constants() {
    }
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target({ ElementType.METHOD })
  @CacheEvict(value = Constants.NAME_CACHE_MEMBER_SINGLE, key = Constants.KEY_CACHE_MEMBER_SINGLE)
  @interface MemberSingleEvict {
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target({ ElementType.METHOD })
  @CacheEvict(value = Constants.NAME_CACHE_MEMBER_LIST, key = Constants.KEY_CACHE_MEMBER_LIST, allEntries = true)
  @interface MemberListEvict {
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target({ElementType.METHOD})
  @Cacheable(value = Constants.NAME_CACHE_MEMBER_SINGLE, key = Constants.KEY_CACHE_MEMBER_SINGLE,
      unless = ""#result == null or #result.enabled == false"")
  @interface MemberSingleCache {
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target({ElementType.METHOD})
  @Cacheable(value = Constants.NAME_CACHE_MEMBER_LIST, key = Constants.KEY_CACHE_MEMBER_LIST,
      unless = ""#result == null or #result.size() == 0"")
  @interface MemberListCache {
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/MemberConfigService.java,"package com.globant.os.accounts.component.community.service;

import com.globant.os.accounts.component.community.model.MemberConfig;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import lombok.Data;

public interface MemberConfigService {

  Optional<MemberConfig> findById(Long id);

  List<MemberConfig> create(long communityId, long userId, List<MemberConfigCreationCmd> configs);

  List<MemberConfig> update(long communityId, long userId, List<MemberConfigUpdateCmd> configs);

  FindResult<MemberConfig> findByMember(long communityId, long userId, BaseFindCmd cmd);

  @Data
  class MemberConfigCreationCmd {
    @NotBlank
    private String confKey;
    @NotBlank
    private String confValue;
  }

  @Data
  class MemberConfigUpdateCmd {
    @NotNull
    private Long id;
    @NotBlank
    private String confKey;
    @NotBlank
    private String confValue;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/CommunityOperationServiceImpl.java,"package com.globant.os.accounts.component.community.service;

import static java.util.Objects.isNull;
import static java.util.stream.Collectors.toList;

import com.globant.os.accounts.component.community.io.gateway.CommunityGateway;
import com.globant.os.accounts.component.community.io.gateway.MemberGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.component.user.service.UserService;
import com.globant.os.accounts.component.user.service.UserService.UserUpdateCmd;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.BusinessException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class CommunityOperationServiceImpl implements CommunityOperationService {

  private static final Logger LOGGER = LoggerFactory.getLogger(CommunityOperationServiceImpl.class);

  private static final String REJECTED_OPERATION = ""REJECTED"";
  private static final String INSERT_OPERATION = ""INSERT"";
  private static final String UPDATE_OPERATION = ""UPDATE"";
  private static final String DISABLE_OPERATION = ""DISABLE"";
  private static final String APPROVED_INSERTED_OPERATION = ""INSERTED"";
  private static final String APPROVED_UPDATED_OPERATION = ""UPDATED"";
  private static final String APPROVED_DISABLED_OPERATION = ""DISABLED"";
  private static final String OPERATION_STATUS_PROPERTY_KEY = ""operationStatus"";
  private static final String REJECTED_MESSAGE_PROPERTY_VALUE = ""rejectedMessage"";
  private static final String RECORD_REJECTED_TYPE_PROPERTY_KEY = ""recordRejectedType"";
  private static final String ERROR_INSERT = ""Command is %s but the user already exists"";
  private static final String ERROR_DISABLE_CURRENT_USER = ""The user cannot be disabled,""
      + "" because it is the same for the request"";
  private static final String ERROR_UPDATE_DISABLE = ""Command is %s but the user does not exist"";
  private static final String ERROR_NULL_OPERATION = ""Operation is null"";
  private static final String ERROR_INSERTING_A_MEMBER = ""Member has an insert error : %s"";
  private static final String ERROR_DISABLING_A_MEMBER = ""Member has a disable error : %s"";
  private static final String ERROR_UPDATING_A_MEMBER = ""Member has an update error: %s"";
  private static final String ERROR_UPDATE_MEMBER = ""ERROR_UPDATE_MEMBER"";
  private static final String ERROR_DISABLE_MEMBER = ""ERROR_DISABLE_MEMBER"";
  private static final String ERROR_INSERT_MEMBER = ""ERROR_INSERT_MEMBER"";
  private static final String ERROR_ILLEGAL_PARAMETERS = ""ERROR_ILLEGAL_PARAMETERS"";
  private static final String LOGIN_ID = ""loginId"";
  private static final String PARTIAL_BULK_TYPE_OPERATION = ""partial"";
  private static final String THERE_IS_NO_DATA_TO_PROCESS = ""There is no data to process"";

  @Autowired
  private UserService userService;

  @Autowired
  private MemberService memberService;

  @Autowired
  private MemberPropertyDefinitionService memberPropertyDefinitionService;

  @Autowired
  private MemberGateway MemberGtw;

  @Autowired
  private CommunityGateway communityGtw;

  private static final Function<OperationCmd, UserUpdateCmd> TO_USER_UPDATE_DTO = OperationCmd::toUserUpdateCmd;

  @Override
  @Transactional(rollbackFor = BadRequestException.class)
  public List<Member> operationSync(long communityId, String operation, long uploaderId,
                                    List<OperationCmd> operationCmd) {
    if (!operationCmd.isEmpty()) {
      List<Member> errors = BulkValidations.validateOperationCmd(operationCmd);
      List<OperationCmd> validMembers = BulkValidations.generateValidList(operationCmd);

      List<Member> members = new ArrayList<>();
      boolean isCommunityMigrated = communityGtw.getCommunityMigrateStatus(communityId);

      if (!validMembers.isEmpty()) {
        if (operation.equals(PARTIAL_BULK_TYPE_OPERATION)) {
          members = partialSync(communityId, validMembers, uploaderId, isCommunityMigrated);
        } else {
          members = fullSync(communityId, validMembers, uploaderId, isCommunityMigrated);
        }
        fillMemberId(communityId, members);
      }
      members.addAll(errors);
      return members;
    } else {
      throw new BadRequestException(THERE_IS_NO_DATA_TO_PROCESS);
    }
  }

  private void fillMemberId(long communityId, List<Member> members) {
    members.forEach(member -> {
      String status = member.getProperties().stream().filter(property ->
          property.getProperty().getName().equals(OPERATION_STATUS_PROPERTY_KEY))
          .findFirst().get().getValue();
      if (status.equalsIgnoreCase(REJECTED_OPERATION)) {
        String loginId = member.getProperties().stream().filter(property ->
            property.getProperty().getName().equals(LOGIN_ID)).findFirst().get().getValue();
        MemberGtw.findByLoginId(communityId, loginId).ifPresent(value -> member.setId(value.getId()));
      }
    });
  }

  private List<Member> partialSync(long communityId, List<OperationCmd> operationCmd,
                                   long uploaderId, boolean isCommunityMigrated) {
    return operationCmd.stream()
        .map(operationCmd1 -> bulkOperation(communityId, operationCmd1, uploaderId, isCommunityMigrated))
        .collect(toList());
  }

  private List<Member> fullSync(long communityId, List<OperationCmd> operationCmd,
                                long uploaderId, boolean isCommunityMigrated) {
    Map<String, Long> membersToDisable = memberService.findCommunityMembersNotContentInTheLoginIdsList(communityId,
        operationCmd.stream().map(OperationCmd::getLoginId).collect(Collectors.toList()));

    membersToDisable.entrySet().stream()
        .filter(entry -> !entry.getValue().equals(uploaderId))
        .forEach(entry -> memberService.updateEnabledFlag(communityId, entry.getValue(), false));

    List<Member> result = new ArrayList<>();
    operationCmd.forEach(cmd -> {
      excludeProperties(communityId, cmd, isCommunityMigrated);
      try {
        Optional<Member> member = MemberGtw.findByLoginId(communityId, cmd.getLoginId());

        if (member.isPresent()) {
          result.add(updateOperation(communityId, cmd, member.get()));
        } else {
          result.add(insertOperation(communityId, cmd));
        }
      } catch (BusinessException e) {
        result.add(insertOperation(communityId, cmd));
      }
    });

    return result;
  }

  private Member bulkOperation(long communityId, OperationCmd cmd, long uploaderId, boolean isCommunityMigrated) {
    if (isNull(cmd.getCommand())) {
      return rejectedOperation(new Member(), cmd.getLoginId(), ERROR_NULL_OPERATION,
          ERROR_ILLEGAL_PARAMETERS);
    }
    excludeProperties(communityId, cmd, isCommunityMigrated);
    Optional<Member> member = MemberGtw.findByLoginId(communityId, cmd.getLoginId());
    if (member.isPresent()) {
      return bulkMemberIsPresent(communityId, cmd, uploaderId, member.get());
    } else {
      return bulkMemberIsNotPresent(communityId, cmd);
    }
  }

  private Member bulkMemberIsNotPresent(long communityId, OperationCmd cmd) {
    if (cmd.getCommand().equals(INSERT_OPERATION)) {
      return insertOperation(communityId, cmd);
    } else {
      return rejectedOperation(new Member(), cmd.getLoginId(),
          String.format(ERROR_UPDATE_DISABLE, cmd.getCommand()), cmd.getCommand().equals(UPDATE_OPERATION)
              ? ERROR_UPDATE_MEMBER : ERROR_DISABLE_MEMBER);
    }
  }

  private Member bulkMemberIsPresent(long communityId, OperationCmd cmd, long uploaderId,
                                     Member member) {
    if (cmd.getCommand().equals(UPDATE_OPERATION)) {
      return updateOperation(communityId, cmd, member);
    }
    if (!member.getId().getUser().getId().equals(uploaderId)) {
      if (cmd.getCommand().equals(DISABLE_OPERATION)) {
        return disableOperation(communityId, cmd, member.getId().getUser().getId());
      } else {
        return rejectedOperation(member, cmd.getLoginId(),
            String.format(ERROR_INSERT, cmd.getCommand()), ERROR_INSERT_MEMBER);
      }
    } else {
      return rejectedOperation(member, cmd.getLoginId(),
          String.format(ERROR_DISABLE_CURRENT_USER, cmd.getCommand()), ERROR_DISABLE_MEMBER);
    }
  }

  private void excludeProperties(long communityId, OperationCmd member, boolean isCommunityMigrated) {
    if (isCommunityMigrated) {
      List<String> memberProperties = memberPropertyDefinitionService.findListByCommunityId(communityId).stream()
          .map(MemberPropertyDefinition::getName).collect(Collectors.toList());

      member.getProperties().entrySet().removeIf(property -> !memberProperties.contains(property.getKey()));
    }
  }

  private Member insertOperation(long communityId, OperationCmd cmd) {
    cmd.setEnabled(true);
    try {
      Member createdMember = memberService.create(communityId, OperationCmd.toMemberCreateCmd(cmd));
      return approvedOperation(createdMember, cmd.getLoginId(), APPROVED_INSERTED_OPERATION);
    } catch (BusinessException e) {
      return rejectedOperation(e, cmd.getLoginId(), cmd.getEmail(), e.getMessage(),
          ERROR_INSERT_MEMBER);
    } catch (Exception e) {
      return rejectedOperation(e, cmd.getLoginId(), cmd.getEmail(),
          String.format(ERROR_INSERTING_A_MEMBER, e.getMessage()), ERROR_INSERT_MEMBER);
    }
  }

  private Member disableOperation(long communityId, OperationCmd cmd, long userId) {
    try {
      userService.updateEnabledFlag(userId, false);
      Member disabledMember = memberService.updateEnabledFlag(communityId, userId, false);
      return approvedOperation(disabledMember, cmd.getLoginId(), APPROVED_DISABLED_OPERATION);
    } catch (BusinessException e) {
      return rejectedOperation(e, cmd.getLoginId(), cmd.getEmail(), e.getMessage(),
          ERROR_INSERT_MEMBER);
    } catch (Exception e) {
      return rejectedOperation(e, cmd.getLoginId(), cmd.getEmail(),
          String.format(ERROR_DISABLING_A_MEMBER, e.getMessage()), ERROR_DISABLE_MEMBER);
    }
  }

  private Member updateOperation(long communityId, OperationCmd cmd, Member member) {
    cmd.setEnabled(true);
    try {
      userService.update(member.getId().getUser().getId(), TO_USER_UPDATE_DTO.apply(cmd));
      Member updatedMember = memberService.update(communityId, member.getId().getUser().getId(),
          OperationCmd.toMemberUpdateCmd(cmd, member));
      return approvedOperation(updatedMember, cmd.getLoginId(), APPROVED_UPDATED_OPERATION);
    } catch (BusinessException e) {
      return rejectedOperation(e, cmd.getLoginId(), cmd.getEmail(), e.getMessage(),
          ERROR_INSERT_MEMBER);
    } catch (Exception e) {
      return rejectedOperation(e, cmd.getLoginId(), cmd.getEmail(),
          String.format(ERROR_UPDATING_A_MEMBER, e.getMessage()), ERROR_UPDATE_MEMBER);
    }
  }

  private Member approvedOperation(Member member, String loginId, String operationType) {
    Member newMember = new Member();
    Member.MemberId memberId = new Member.MemberId(new Community(),
        new OsUser(member.getFirstName(), member.getLastName()));
    memberId.getUser().setId(member.getId().getUser().getId());
    newMember.setId(memberId);
    newMember.setEmail(member.getEmail());
    newMember.setProperties(new HashSet<>());
    newMember.getProperties().add(getPropertyDefinition(OPERATION_STATUS_PROPERTY_KEY, operationType));
    newMember.getProperties().add(getPropertyDefinition(LOGIN_ID, loginId));
    return newMember;
  }

  private Member rejectedOperation(Member member, String loginId, String rejectedMessage,
                                   String rejectedType) {
    LOGGER.error(rejectedMessage);
    Member newMember = new Member();
    Set<PropertyValue> properties = getPropertyRejected(loginId, rejectedMessage, rejectedType);
    newMember.setEmail(member.getEmail());
    newMember.setProperties(properties);
    return newMember;
  }

  private Member rejectedOperation(Exception e, String loginId, String email,
                                   String rejectedMessage, String rejectedType) {
    LOGGER.error(rejectedMessage, e);
    Member newMember = new Member();
    newMember.setEmail(email);
    newMember.setProperties(new HashSet<>());
    newMember.getProperties().add(getPropertyDefinition(LOGIN_ID, loginId));
    newMember.getProperties().add(getPropertyDefinition(OPERATION_STATUS_PROPERTY_KEY, REJECTED_OPERATION));
    newMember.getProperties().add(getPropertyDefinition(REJECTED_MESSAGE_PROPERTY_VALUE, rejectedMessage));
    newMember.getProperties().add(getPropertyDefinition(RECORD_REJECTED_TYPE_PROPERTY_KEY, rejectedType));
    return newMember;
  }

  private Set<PropertyValue> getPropertyRejected(String loginId, String rejectedMessage,
                                                 String rejectedType) {
    Set<PropertyValue> properties = new HashSet<>();
    properties.add(getPropertyDefinition(LOGIN_ID, loginId));
    properties.add(getPropertyDefinition(OPERATION_STATUS_PROPERTY_KEY, REJECTED_OPERATION));
    properties.add(getPropertyDefinition(REJECTED_MESSAGE_PROPERTY_VALUE, rejectedMessage));
    properties.add(getPropertyDefinition(RECORD_REJECTED_TYPE_PROPERTY_KEY, rejectedType));
    return properties;
  }

  private PropertyValue getPropertyDefinition(String key, String value) {
    PropertyValue property = new PropertyValue();
    MemberPropertyDefinition propertyDefinition = new MemberPropertyDefinition();
    propertyDefinition.setName(key);
    property.setProperty(propertyDefinition);
    property.setValue(value);
    LocalDate localDate = LocalDate.now();
    property.setCreated(Date.from(localDate.atStartOfDay(ZoneId.of(""UTC"")).toInstant()));
    return property;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/MemberServiceImpl.java,"package com.globant.os.accounts.component.community.service;

import com.globant.os.accounts.component.community.io.gateway.MemberGateway;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import com.globant.os.accounts.component.community.model.MemberCreatedEvent;
import com.globant.os.accounts.component.community.model.MemberEnabledDisabledEvent;
import com.globant.os.accounts.component.community.model.MemberUpdatedEvent;
import com.globant.os.accounts.component.shared.io.util.EventPublisherComponent;
import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.Order;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.validation.Valid;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class MemberServiceImpl implements MemberService {

  @Autowired
  private MemberGateway memberGtwy;

  @Autowired
  private EventPublisherComponent eventPublisherComponent;

  private static final String FIRST_NAME = ""firstName"";

  @Value(""${os-events.publisher.communities-topic}"")
  private String topic;

  @Value(""${os-events.publisher.source}"")
  private String source;

  @Override
  @MemberSingleCache
  public Optional<MemberDetailsCmd> findById(long communityId, long userId) {
    return memberGtwy.findById(communityId, userId).map(MemberDetailsCmd::fromModel);
  }

  @Override
  @MemberSingleCache
  public Optional<MemberDetailsCmd> findByLoginId(long communityId, String loginId) {
    return memberGtwy.findByLoginId(communityId, loginId).map(MemberDetailsCmd::fromModel);
  }

  @Override
  public Map<String, Long> findCommunityMembersNotContentInTheLoginIdsList(long communityId, List<String> loginIds) {
    return memberGtwy.findCommunityMembersNotContentInTheLoginIdsList(communityId, loginIds);
  }

  @Override
  public Member create(long communityId, @Valid MemberCreationCmd cmd) {
    Member member = memberGtwy.save(communityId, cmd);

    eventPublisherComponent.sendEvent(topic,
        MemberCreatedEvent.builder(source, DateTime.now().getMillis(), communityId, member.getId().getUser().getId())
            .firstName(member.getFirstName()).lastName(member.getLastName()).loginId(cmd.getLoginId()).build());

    return member;
  }

  @Override
  public List<Member> create(long communityId, @Valid List<MemberCreationCmd> cmds) {
    List<Member> members = memberGtwy.save(communityId, cmds);

    members.stream()
        .forEach(member -> eventPublisherComponent.sendEvent(topic,
            MemberCreatedEvent
                .builder(source, DateTime.now().getMillis(), communityId, member.getId().getUser().getId())
                .firstName(member.getFirstName()).lastName(member.getLastName()).build()));

    return members;
  }

  @Override
  @MemberSingleEvict
  @MemberListEvict
  public Member updateEnabledFlag(long communityId, long userId, boolean value) {
    Member member = memberGtwy.enabledOrDisabled(communityId, userId, value);

    eventPublisherComponent.sendEvent(topic,
        MemberEnabledDisabledEvent
            .builder(value, source, DateTime.now().getMillis(), communityId, member.getId().getUser().getId())
            .status(member.isEnabled()).build());

    return member;
  }

  @Override
  @MemberSingleEvict
  @MemberListEvict
  public Member update(long communityId, long userId, MemberUpdateCmd cmd) {
    cmd.setUserId(userId);
    cmd.setId(userId);

    Member member = memberGtwy.update(communityId, cmd);

    eventPublisherComponent.sendEvent(topic,
        MemberUpdatedEvent.builder(source, DateTime.now().getMillis(), communityId, member.getId().getUser().getId())
            .firstName(member.getFirstName()).lastName(member.getLastName()).loginId(cmd.getLoginId())
            .enabled(member.isEnabled()).build());

    return member;
  }

  @Override
  @MemberListCache
  public List<Member> findByIds(long communityId, long[] userIds) {
    return memberGtwy.findByIds(communityId, userIds);
  }

  @Override
  public FindResult<Member> findMembers(long communityId, MemberBaseFindCmd cmd) {
    if (cmd.getSort().isEmpty()) {
      Order orderDefault = new Order(FIRST_NAME, Order.Direction.ASC);
      cmd.setSort(Arrays.asList(orderDefault));
    }
    return memberGtwy.findMembers(communityId, cmd);
  }

  @Override
  @MemberSingleEvict
  @MemberListEvict
  public List<PropertyValue> updateMemberProperties(long communityId, long userId, MemberUpdatePropertyCmd cmd) {
    return memberGtwy.updateMemberProperties(communityId, userId, cmd);
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/MemberPropertyDefinitionService.java,"package com.globant.os.accounts.component.community.service;

import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;
import javax.validation.constraints.NotBlank;
import lombok.Data;

public interface MemberPropertyDefinitionService {

  List<MemberPropertyDefinition> create(long communityId, List<PropertyCreationCmd> cmds);

  List<MemberPropertyDefinition> update(long communityId, List<PropertyUpdateCmd> cmds);

  FindResult<MemberPropertyDefinition> findAllByCommunityId(long communityId, BaseFindCmd cmd);

  Optional<MemberPropertyDefinition> enableProperty(long communityId, String name, boolean value);

  List<MemberPropertyDefinition> findListByCommunityId(long communityId);

  @Data
  class PropertyCreationCmd {
    private MemberPropertyDefinition.Type type;
    @NotBlank
    private String name;
    private String description;
  }

  @Data
  class PropertyUpdateCmd {
    private MemberPropertyDefinition.Type type;
    @NotBlank
    private Long id;
    @NotBlank
    private String name;
    private String description;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/CommunityConfigService.java,"package com.globant.os.accounts.component.community.service;

import static java.util.Objects.nonNull;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.globant.os.accounts.component.community.model.CommunityConfig;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;
import javax.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

public interface CommunityConfigService {

  Optional<CommunityConfig> findById(long id);

  List<CommunityConfig> create(long communityId, List<CommunityConfigCreationCmd> communityConfigCreationList);

  List<CommunityConfig> update(long communityId, List<CommunityConfigUpdateCmd> communityConfigUpdateList);

  FindResult<CommunityConfig> findByCommunity(long communityId, BaseFindCmd cmd);

  @Data
  class CommunityConfigCreationCmd {
    @NotBlank
    private String confKey;
    @NotBlank
    private String confValue;
  }

  @Data
  @AllArgsConstructor
  @NoArgsConstructor
  class CommunityConfigUpdateCmd {
    @NotBlank
    private String confKey;
    @NotBlank
    private String confValue;
  }

  @Setter
  @Getter
  @JsonInclude(JsonInclude.Include.NON_NULL)
  @NoArgsConstructor
  class SmuCommunityConfigUpdateCmd {
    private Integer internalType;
    private Integer category;

    public static SmuCommunityConfigUpdateCmd toModel(List<CommunityConfigUpdateCmd> cmd) {
      SmuCommunityConfigUpdateCmd smuCommunityConfigUpdateCmd = null;
      if (nonNull(cmd)) {
        smuCommunityConfigUpdateCmd = new SmuCommunityConfigUpdateCmd();
        smuCommunityConfigUpdateCmd.setCategory(getConfKey(""category"", cmd));
        smuCommunityConfigUpdateCmd.setInternalType(getConfKey(""internalType"", cmd));
      }
      return smuCommunityConfigUpdateCmd;
    }

    private static Integer getConfKey(String key, List<CommunityConfigUpdateCmd> cmd) {
      Optional<CommunityConfigUpdateCmd> result = cmd.stream().filter(c -> key.equals(c.getConfKey())).findAny();
      return result.map(communityConfigUpdateCmd -> {
        try {
          return Integer.parseInt(communityConfigUpdateCmd.getConfValue());
        } catch (NumberFormatException e) {
          throw new BadRequestException(""The value of '"" + key + ""' must be a valid number"", e);
        }
      }).orElse(null);
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/CommunityService.java,"package com.globant.os.accounts.component.community.service;

import static java.util.Objects.nonNull;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.globant.os.accounts.component.community.io.web.v2.CommunityConfigDetails;
import com.globant.os.accounts.component.community.io.web.v2.CommunityImageDetails;
import com.globant.os.accounts.component.community.io.web.v2.MemberPropertyDefinitionDetails;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigUpdateCmd;
import com.globant.os.accounts.external.smu.constants.Language;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.io.Serializable;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import java.util.Set;
import java.util.TimeZone;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import javax.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.springframework.cache.annotation.Cacheable;

public interface CommunityService {

  Optional<CommunityDetailsCmd> findById(long id);

  FindResult<Community> findAll(CommunityFindCmd request);

  Community create(CommunityCreationCmd cmd);

  Community update(CommunityUpdateCmd cmd);

  Community updateEnabledFlag(long id, boolean value);

  Community updateMigratedFlag(long id, boolean value);

  Boolean getCommunityMigrateStatus(long communityId);

  @Getter
  @Setter
  @ToString
  @JsonInclude(JsonInclude.Include.NON_NULL)
  class CommunityCreationCmd extends CommunityUpdateCmd {
    private SmuCommunityAdmin admin;
  }

  @Getter
  @Setter
  @ToString
  class SmuCommunityAdmin {
    private String firstName;
    private String lastName;
    private String identification;
  }

  @Setter
  @Getter
  @JsonInclude(JsonInclude.Include.NON_NULL)
  class CommunityUpdateCmd {
    private Long id;
    @NotBlank
    private String name;
    private Long totalMembers;
    private CommunityImageCmd images;
    private Locale locale;
    private Set<Locale> locales;
    private TimeZone timeZone;
    private Set<String> domains;
    private List<CommunityConfigUpdateCmd> configs;
    private Long internalType;
    private Long category;
  }

  @Getter
  @Setter
  class CommunityImageCmd {

    private String primary;
    private String secondary;
  }

  @Getter
  @Setter
  class CommunityDetailsCmd implements Serializable {

    private static final long serialVersionUID = 7777015415882892555L;

    private long id;
    private String name;
    private Locale locale;
    private Set<Locale> locales;
    private TimeZone timeZone;
    private Long totalMembers;
    private Set<String> domains;
    private boolean enabled;
    private CommunityImageDetails images;
    private Set<CommunityConfigDetails> configs;
    private Set<MemberPropertyDefinitionDetails> properties;

    public static CommunityDetailsCmd fromModel(Community c) {
      CommunityDetailsCmd response = new CommunityDetailsCmd();
      response.setImages(new CommunityImageDetails());
      response.setId(c.getId());
      response.setName(c.getName());
      response.setLocale(c.getLocale());
      if (nonNull(c.getLocales())) {
        response.setLocales(new HashSet<>(c.getLocales()));
      }
      response.setTimeZone(c.getTimeZone());
      response.setTotalMembers(c.getTotalMembers());
      if (nonNull(c.getDomains())) {
        response.setDomains(new LinkedHashSet<>(c.getDomains()));
      }
      response.getImages().setPrimary(c.getPrimaryImage());
      response.getImages().setSecondary(c.getSecondaryImage());
      response.setEnabled(c.isEnabled());
      if (nonNull(c.getConfigs())) {
        response.setConfigs(CommunityConfigDetails.fromModel(c.getConfigs()));
      }
      if (nonNull(c.getProperties())) {
        response.setProperties(MemberPropertyDefinitionDetails.fromModel(c.getProperties()));
      }
      return response;
    }
  }

  @Getter
  @Setter
  class CommunityFindCmd extends BaseFindCmd {
    /**
     * Serial UUID.
     */
    private static final long serialVersionUID = -5381669422828037839L;

    private Optional<String> name = Optional.empty();
    private Optional<String> enabled = Optional.empty();
  }

  @Setter
  @Getter
  @JsonInclude(JsonInclude.Include.NON_NULL)
  @NoArgsConstructor
  class SmuCommunityUpdateCmd {
    private Long id;
    @NotBlank
    private String name;
    private Integer numberOfEmployees;
    private String imageCode;
    private String negativeImageCode;
    private Integer internalType;
    private Integer category;
    private Set<Integer> languages;
    private Integer defaultLanguage;

    public static SmuCommunityUpdateCmd toModel(CommunityUpdateCmd cmd) {
      SmuCommunityUpdateCmd smuCommunityUpdateCmd = null;
      if (nonNull(cmd)) {
        smuCommunityUpdateCmd = new SmuCommunityUpdateCmd();
        smuCommunityUpdateCmd.setId(cmd.getId());
        smuCommunityUpdateCmd.setName(cmd.getName());

        if (nonNull(cmd.getTotalMembers())) {
          smuCommunityUpdateCmd.setNumberOfEmployees(cmd.getTotalMembers().intValue());
        }

        if (nonNull(cmd.getImages())) {
          smuCommunityUpdateCmd.setImageCode(cmd.getImages().getPrimary());
          smuCommunityUpdateCmd.setNegativeImageCode(cmd.getImages().getSecondary());
        }

        if (nonNull(cmd.getConfigs())) {
          mapConfigs(cmd, smuCommunityUpdateCmd);
        }

        if (nonNull(cmd.getLocales())) {
          mapLocales(cmd, smuCommunityUpdateCmd);
        }
      }
      return smuCommunityUpdateCmd;
    }

    private static void mapLocales(CommunityUpdateCmd cmd, SmuCommunityUpdateCmd smuCommunityUpdateCmd) {
      smuCommunityUpdateCmd.setLanguages(cmd.getLocales().stream().map(
          locale -> Language.getByLocale(locale).getId()).collect(Collectors.toSet()));

      if (nonNull(cmd.getLocale())) {
        smuCommunityUpdateCmd.setDefaultLanguage(Language.getByLocale(cmd.getLocale()).getId());
      } else {
        smuCommunityUpdateCmd.setDefaultLanguage(Language.getByLocale(Locale.getDefault()).getId());
      }
    }

    private static void mapConfigs(CommunityUpdateCmd cmd, SmuCommunityUpdateCmd smuCommunityUpdateCmd) {
      findConfigToMap(cmd, ""internalType"", smuCommunityUpdateCmd::setInternalType);
      findConfigToMap(cmd, ""category"", smuCommunityUpdateCmd::setCategory);
    }

    private static void findConfigToMap(CommunityUpdateCmd cmd, String keyToMap, Consumer<Integer> setterMethod) {
      Optional<CommunityConfigUpdateCmd> configUpdateCmd = cmd.getConfigs().stream()
              .filter(config -> keyToMap.equals(config.getConfKey())).findFirst();
      configUpdateCmd.ifPresent(communityConfigUpdateCmd -> setterMethod.accept(
              Integer.parseInt(communityConfigUpdateCmd.getConfValue())));
    }
  }

  final class Constants {
    static final String KEY_CACHE_COMMUNITY_SINGLE = ""#id"";
    static final String KEY_CMD_CACHE_COMMUNITY_SINGLE = ""#cmd.id"";
    static final String NAME_CACHE_COMMUNITY_SINGLE = ""community-single"";

    private Constants() {
    }
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target({ ElementType.METHOD })
  @Cacheable(value = Constants.NAME_CACHE_COMMUNITY_SINGLE, key = Constants.KEY_CACHE_COMMUNITY_SINGLE,
      unless = ""#result == null or #result.enabled == false"")
  @interface CommunitySingleCache {
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/MemberPropertyDefinitionServiceImpl.java,"package com.globant.os.accounts.component.community.service;

import com.globant.os.accounts.component.community.io.gateway.CommunityGateway;
import com.globant.os.accounts.component.community.io.gateway.MemberPropertyDefinitionGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.BusinessException;
import com.globant.os.accounts.support.web.FindResult;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
public class MemberPropertyDefinitionServiceImpl implements MemberPropertyDefinitionService {

  private static final String COMMUNITY_NOT_EXIST_MESSAGE = ""Community not exist"";
  private static final String DUPLICATE_PROPERTIES_MESSAGE = ""There are duplicate properties as: "";
  private static final String INVALID_PROPERTIES_NAME_MESSAGE = ""There are properties with invalid names: "";

  @Autowired
  private MemberPropertyDefinitionGateway gtwy;
  @Autowired
  private CommunityGateway communityGtwy;

  @Override
  public List<MemberPropertyDefinition> create(long communityId, List<PropertyCreationCmd> cmds) {
    List<MemberPropertyDefinition> response = new ArrayList<>();
    Community community = communityGtwy.findById(communityId)
        .orElseThrow(() -> new BusinessException(COMMUNITY_NOT_EXIST_MESSAGE));

    validationCommand(cmds);

    for (PropertyCreationCmd cmd : cmds) {
      MemberPropertyDefinition communityProp = gtwy.save(new MemberPropertyDefinition(community,
              cmd.getName(), cmd.getType(), cmd.getDescription()));
      communityProp.setDescription(cmd.getDescription());
      response.add(communityProp);
    }
    return response;
  }

  @Override
  @Transactional(readOnly = true)
  public FindResult<MemberPropertyDefinition> findAllByCommunityId(long communityId, BaseFindCmd cmd) {
    return gtwy.findAllByCommunityId(communityId, cmd);
  }

  @Override
  @Transactional(readOnly = true)
  public List<MemberPropertyDefinition> findListByCommunityId(long communityId) {
    return gtwy.findAllByCommunityId(communityId);
  }

  @Override
  public Optional<MemberPropertyDefinition> enableProperty(long communityId, String name, boolean value) {
    Community community = communityGtwy.findById(communityId)
            .orElseThrow(() -> new BusinessException(COMMUNITY_NOT_EXIST_MESSAGE));

    return gtwy.findByCommunityIdName(community.getId(), name).map(
      cp -> {
        cp.setEnabled(value);
        return gtwy.save(cp);
      });
  }

  private void validationCommand(List<PropertyCreationCmd> cmds) {
    Set<String> duplicates = findDuplicates(cmds);
    Set<String> invalidNames = findInvalidPropertiesName(cmds);
    if (!duplicates.isEmpty()) {
      throw new BusinessException(DUPLICATE_PROPERTIES_MESSAGE + duplicates);
    } else if (!invalidNames.isEmpty()) {
      throw new BusinessException(INVALID_PROPERTIES_NAME_MESSAGE + invalidNames);
    }
  }

  private static Set<String> findDuplicates(List<PropertyCreationCmd> list) {
    Predicate<String> predicate = new HashSet<>()::add;
    return list.stream().map(PropertyCreationCmd::getName).filter(predicate.negate())
        .collect(Collectors.toSet());
  }

  private static Set<String> findInvalidPropertiesName(List<PropertyCreationCmd> list) {
    return list.stream().map(PropertyCreationCmd::getName)
        .filter(cp -> cp.equals(Community.EXTERNAL_ID_PROPERTY) || cp.equals(Community.LOGIN_ID_PROPERTY))
        .collect(Collectors.toSet());
  }

  @Override
  public List<MemberPropertyDefinition> update(long communityId, List<PropertyUpdateCmd> cmds) {
    MemberPropertyDefinition memberPropertyDefinition = null;
    List<MemberPropertyDefinition> response = new ArrayList<>();
    communityGtwy.findById(communityId).orElseThrow(() -> new BusinessException(COMMUNITY_NOT_EXIST_MESSAGE));

    for (PropertyUpdateCmd cmd : cmds) {
      memberPropertyDefinition = gtwy.findById(cmd.getId());
      if (memberPropertyDefinition == null) {
        continue;
      }
      MemberPropertyDefinition communityProp = gtwy
          .update(buildMemberPropertyDefinition(memberPropertyDefinition, cmd));
      response.add(communityProp);
    }
    return response;
  }

  private MemberPropertyDefinition buildMemberPropertyDefinition(MemberPropertyDefinition memberPropertyDefinition,
      PropertyUpdateCmd cmd) {
    if (cmd.getName() != null) {
      memberPropertyDefinition.setName(cmd.getName());
    }
    if (cmd.getType() != null) {
      memberPropertyDefinition.setType(cmd.getType());
    }
    if (cmd.getDescription() != null) {
      memberPropertyDefinition.setDescription(cmd.getDescription());
    }
    return memberPropertyDefinition;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/component/community/service/MemberConfigServiceImpl.java,"package com.globant.os.accounts.component.community.service;

import static java.util.stream.Collectors.toList;
import static org.springframework.util.StringUtils.isEmpty;

import com.globant.os.accounts.component.community.io.gateway.MemberConfigGateway;
import com.globant.os.accounts.component.community.io.gateway.MemberGateway;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.MemberId;
import com.globant.os.accounts.component.community.model.MemberConfig;
import com.globant.os.accounts.component.user.model.OsUser;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;
import java.util.Optional;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
public class MemberConfigServiceImpl implements MemberConfigService {

  @Autowired
  private MemberConfigGateway memberConfigGtwy;

  @Autowired
  private MemberGateway memberGtwy;

  @Override
  @Transactional(readOnly = true)
  public Optional<MemberConfig> findById(Long id) {
    return memberConfigGtwy.findById(id);
  }

  @Override
  public List<MemberConfig> create(long communityId, long userId, @Valid List<MemberConfigCreationCmd> configs) {
    Member member = memberGtwy.findMember(communityId, userId);
    return memberConfigGtwy.save(configs.stream()
        .filter(cmd -> !isEmpty(cmd.getConfKey()) && !isEmpty(cmd.getConfValue()))
        .map(cmd -> new MemberConfig(cmd.getConfKey(), cmd.getConfValue(), member)).collect(toList()));
  }

  @Override
  public List<MemberConfig> update(long communityId, long userId, @Valid List<MemberConfigUpdateCmd> configs) {
    List<Long> ids = configs.stream().map(cmd -> cmd.getId()).collect(toList());

    return memberConfigGtwy.findByMember(createMemberId(communityId, userId), ids).stream()
        .map(m -> {
          MemberConfigUpdateCmd cmd = configs.stream().filter(c -> m.getId() == c.getId()).findFirst().get();
          m.setConfKey(cmd.getConfKey());
          m.setConfValue(cmd.getConfValue());
          return memberConfigGtwy.save(m);
        }).collect(toList());
  }

  @Override
  @Transactional(readOnly = true)
  public FindResult<MemberConfig> findByMember(long communityId, long userId, BaseFindCmd cmd) {
    return memberConfigGtwy.findByMember(createMemberId(communityId, userId), cmd);
  }

  private MemberId createMemberId(long communityId, long userId) {
    Community community = new Community();
    community.setId(communityId);

    OsUser user = new OsUser("""", """");
    user.setId(userId);

    return new MemberId(community, user);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/config/WebSecurityConfig.java,"package com.globant.os.accounts.support.config;

import com.globant.os.accounts.support.web.CustomizedResponseEntityExceptionHandler;
import com.globant.smu.os.security.jwt.authentication.TokenProvider;
import com.globant.smu.os.security.jwt.config.WebSecurityConfigurerImpl;
import com.globant.smu.os.security.jwt.decoder.JwtDecoder;
import com.globant.smu.os.security.jwt.decoder.TokenInfo;
import com.globant.smu.os.security.jwt.model.CacheConstants;
import com.globant.smu.os.security.jwt.util.JwtCacheManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.web.client.RestTemplate;

@Configuration
@EnableWebSecurity
@EnableAutoConfiguration
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigurerImpl {

  @SuppressWarnings(""unused"")
  @Autowired
  private TokenProvider tokenProvider;

  @SuppressWarnings(""unused"")
  @Autowired
  private CustomizedResponseEntityExceptionHandler exceptionHandler;

  @Bean
  public JwtDecoder jwtDecoder(@Value(""${custom.security.authentication.jwt.secret}"") final String secretKey,
                               @Value(""${custom.security.authentication.jwt.second-secret}"")
                               final String secondSecret) {
    return new JwtDecoder(secretKey, secondSecret);
  }

  @Bean
  public CacheConstants cacheConstants() {
    return new CacheConstants();
  }

  @Bean
  public RestTemplate restTemplate() {
    return new RestTemplate();
  }

  @Bean
  public JwtCacheManager CacheManagerToken() {
    return new JwtCacheManager();
  }

  @Bean
  public TokenInfo tokenInfo(@Value(""${os-auth.api.url}"") final String apiUrl,
                             @Value(""${smuos.security.jwt.access.acls.mapping:#{null}}"") final String rolesMapping) {
    return new TokenInfo(apiUrl, rolesMapping);
  }

  @Bean
  public TokenProvider tokenProvider(final JwtDecoder decoder, final TokenInfo tokenInfo) {
    return new TokenProvider(decoder, tokenInfo);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/config/OrientDbConfig.java,"package com.globant.os.accounts.support.config;

import com.globant.os.accounts.component.shared.model.Schema;
import com.orientechnologies.orient.core.metadata.schema.OClass;
import com.orientechnologies.orient.core.metadata.schema.OType;
import com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;
import com.tinkerpop.blueprints.impls.orient.OrientVertexType;
import javax.annotation.PostConstruct;
import lombok.Setter;
import org.apache.tinkerpop.gremlin.orientdb.OrientGraphFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@Setter
public class OrientDbConfig {

  @Value(""${orientdb.url}"")
  private String url;
  @Value(""${orientdb.user}"")
  private String user;
  @Value(""${orientdb.password}"")
  private String password;

  @Bean
  public OrientGraphFactory createFactory() {
    return new OrientGraphFactory(url, user, password);
  }

  @PostConstruct
  public void createSchema() {
    com.tinkerpop.blueprints.impls.orient.OrientGraphFactory factory =
        new com.tinkerpop.blueprints.impls.orient.OrientGraphFactory(
        url, user, password);
    OrientGraphNoTx graph = factory.getNoTx();

    createUser(graph);
    createCommunity(graph);
    createGroup(graph);
    createRelations(graph);
    graph.shutdown();
  }

  private void createUser(OrientGraphNoTx graph) {
    OrientVertexType user = graph.getVertexType(Schema.V_MEMBER);

    if (user == null) {
      user = graph.createVertexType(Schema.V_MEMBER);
    }

    if (user.getProperty(Schema.PROPERTY_COMMUNITY_ID) == null) {
      user.createProperty(Schema.PROPERTY_COMMUNITY_ID, OType.LONG);
      user.createIndex(""Member_community_id_Index"", OClass.INDEX_TYPE.NOTUNIQUE, Schema.PROPERTY_COMMUNITY_ID);
    }

    if (user.getProperty(Schema.PROPERTY_USER_ID) == null) {
      user.createProperty(Schema.PROPERTY_USER_ID, OType.LONG);
      user.createIndex(""Member_user_id_community_id_Index"",
          OClass.INDEX_TYPE.UNIQUE, Schema.PROPERTY_COMMUNITY_ID,
          Schema.PROPERTY_USER_ID);
    }

    if (user.getProperty(Schema.PROPERTY_NAME) == null) {
      user.createProperty(Schema.PROPERTY_NAME, OType.STRING);
    }
  }

  private void createCommunity(OrientGraphNoTx graph) {
    OrientVertexType community = graph.getVertexType(Schema.V_COMMUNITY);

    if (community == null) {
      community = graph.createVertexType(Schema.V_COMMUNITY);
    }

    if (community.getProperty(Schema.PROPERTY_ID) == null) {
      community.createProperty(Schema.PROPERTY_ID, OType.LONG);
      community.createIndex(""Community_id_Index"", OClass.INDEX_TYPE.UNIQUE, Schema.PROPERTY_ID);
    }

    if (community.getProperty(Schema.PROPERTY_NAME) == null) {
      community.createProperty(Schema.PROPERTY_NAME, OType.STRING);
    }
  }

  private void createGroup(OrientGraphNoTx graph) {
    OrientVertexType group = graph.getVertexType(Schema.V_GROUP);

    if (group == null) {
      group = graph.createVertexType(Schema.V_GROUP);
    }

    if (group.getProperty(Schema.PROPERTY_ID) == null) {
      group.createProperty(Schema.PROPERTY_ID, OType.LONG);
      group.createIndex(""Group_id_Index"", OClass.INDEX_TYPE.UNIQUE, Schema.PROPERTY_ID);
    }

    if (group.getProperty(Schema.PROPERTY_COMMUNITY_ID) == null) {
      group.createProperty(Schema.PROPERTY_COMMUNITY_ID, OType.LONG);
      group.createIndex(""Group_community_id_Index"", OClass.INDEX_TYPE.NOTUNIQUE, Schema.PROPERTY_COMMUNITY_ID);
    }

    if (group.getProperty(Schema.PROPERTY_NAME) == null) {
      group.createProperty(Schema.PROPERTY_NAME, OType.STRING);
    }
  }

  private void createRelations(OrientGraphNoTx graph) {
    if (graph.getEdgeType(Schema.EDGE_MEMBER_OF) == null) {
      graph.createEdgeType(Schema.EDGE_MEMBER_OF);
    }

    if (graph.getEdgeType(Schema.EDGE_CHILD_OF) == null) {
      graph.createEdgeType(Schema.EDGE_CHILD_OF);
    }

    if (graph.getEdgeType(Schema.EDGE_LEADER_OF) == null) {
      graph.createEdgeType(Schema.EDGE_LEADER_OF);
    }

    if (graph.getEdgeType(Schema.EDGE_BELONGS_TO) == null) {
      graph.createEdgeType(Schema.EDGE_BELONGS_TO);
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/config/RedisConfig.java,"package com.globant.os.accounts.support.config;

import java.time.Duration;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;

@Configuration
public class RedisConfig {

  @Value(""${spring.redis.host}"")
  private String host;
  @Value(""${spring.redis.port}"")
  private String port;
  @Value(""${spring.redis.timeToLive}"")
  private long ttl;
  @Value(""${spring.redis.database}"")
  private int database;

  @Bean
  public LettuceConnectionFactory redisConnectionFactory() {
    RedisStandaloneConfiguration redisConf = new RedisStandaloneConfiguration();
    redisConf.setHostName(host);
    redisConf.setPort(Integer.parseInt(port));
    redisConf.setDatabase(database);
    return new LettuceConnectionFactory(redisConf);
  }

  @Bean
  public RedisCacheConfiguration cacheConfiguration() {
    RedisCacheConfiguration cacheConfig = RedisCacheConfiguration.defaultCacheConfig()
        .entryTtl(Duration.ofSeconds(ttl))
        .disableCachingNullValues();
    return cacheConfig;
  }

  @Bean
  public RedisCacheManager cacheManager() {
    RedisCacheManager rcm = RedisCacheManager.builder(redisConnectionFactory())
        .cacheDefaults(cacheConfiguration())
        .transactionAware()
        .build();
    return rcm;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/config/HystrixConfig.java,"package com.globant.os.accounts.support.config;

import com.netflix.hystrix.HystrixCommand;
import com.netflix.hystrix.HystrixCommandGroupKey;
import com.netflix.hystrix.HystrixCommandProperties;
import com.netflix.hystrix.HystrixThreadPoolProperties;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class HystrixConfig {

  private static final String AS_KEY = ""AccountsRemoteService"";

  @Value(""${hystrix.timeout-in-milliseconds}"")
  private int timeout;

  @Value(""${hystrix.thread-pool-size}"")
  private int threadPoolSize;

  @Value(""${hystrix.thread-pool-maximun-size}"")
  private int threadPoolMaximunSize;

  @Bean
  public HystrixCommand.Setter hystrixCommandSetter() {
    return HystrixCommand.Setter
        .withGroupKey(HystrixCommandGroupKey.Factory.asKey(AS_KEY))
        .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()
            .withExecutionTimeoutEnabled(true).withExecutionTimeoutInMilliseconds(timeout))
        .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()
            .withCoreSize(threadPoolSize).withMaximumSize(threadPoolMaximunSize));
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/config/EventPublisherConfig.java,"package com.globant.os.accounts.support.config;

import com.amazonaws.auth.AWSCredentialsProvider;
import com.globant.smu.os.events.publisher.config.EventPublisherFactory;
import com.globant.smu.os.events.publisher.io.awskinesis.AwsKinesisDataStreamPublisher;
import com.globant.smu.os.events.publisher.service.EventPublisherService;
import com.globant.smu.os.events.shared.config.AWSPropertiesCredentialsProvider;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@Configuration
public class EventPublisherConfig {

  private static final int CORE_POOL_SIZE = 5;
  private static final int MAX_POOL_SIZE = 10;
  private static final boolean WAIT_FOR_TASKS_TO_COMPLETE_ON_SHUTDOWN = true;

  @Value(""${os-events.publisher.aws-kinesis.pool-size}"")
  private int poolSize;
  @Value(""${os-events.publisher.aws-kinesis.region}"")
  private String region;
  @Value(""${os-events.publisher.aws-kinesis.access-key}"")
  private String accesKey;
  @Value(""${os-events.publisher.aws-kinesis.secret-key}"")
  private String secretKey;
  @Value(""${os-events.publisher.method}"")
  private String method;

  @Bean
  public EventPublisherService eventPublisherKinesis() {
    return eventPublisherFactoryKinesis().getPublisher();
  }

  @Bean
  public EventPublisherFactory eventPublisherFactoryKinesis() {
    EventPublisherFactory eventPublisherFactory = new EventPublisherFactory(method);
    eventPublisherFactory.setAwsKinesisPublisher(kinesisPublisher());
    return eventPublisherFactory;
  }

  @Bean
  public AwsKinesisDataStreamPublisher kinesisPublisher() {
    return new AwsKinesisDataStreamPublisher(poolSize, region, createAwsPropertiesCredentialsProvider());
  }

  @Bean
  public ThreadPoolTaskExecutor threadPoolTaskExecutor() {
    ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();
    threadPoolTaskExecutor.setCorePoolSize(CORE_POOL_SIZE);
    threadPoolTaskExecutor.setMaxPoolSize(MAX_POOL_SIZE);
    threadPoolTaskExecutor.setWaitForTasksToCompleteOnShutdown(WAIT_FOR_TASKS_TO_COMPLETE_ON_SHUTDOWN);
    return threadPoolTaskExecutor;
  }

  private AWSCredentialsProvider createAwsPropertiesCredentialsProvider() {
    AWSPropertiesCredentialsProvider credentials = new AWSPropertiesCredentialsProvider();
    credentials.setAccessKey(accesKey);
    credentials.setSecretKey(secretKey);
    return credentials;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/Order.java,"package com.globant.os.accounts.support.web;

import com.globant.os.accounts.component.shared.io.gateway.SpringData;
import java.io.Serializable;
import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class Order implements Serializable {

  private static final long serialVersionUID = 9187752698987947661L;

  private String field;
  private Direction direction;

  public static Order fromString(String text) {
    String[] split = text.split(SpringData.SORT_SEPARATOR);
    Direction direction = split.length > 1 ? Direction.valueOf(split[1].toUpperCase()) : Direction.ASC;

    return new Order(split[0], direction);
  }

  public String toString() {
    return field + "":"" + direction;
  }

  public enum Direction {
    ASC, DESC;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/ResourceNotFoundException.java,"package com.globant.os.accounts.support.web;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {

  private static final long serialVersionUID = 1L;

  public ResourceNotFoundException() {
  }

  public ResourceNotFoundException(final String message) {
    super(message);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/CustomizedResponseEntityExceptionHandler.java,"package com.globant.os.accounts.support.web;

import static java.lang.String.format;

import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.globant.smu.os.security.jwt.web.GlobalExceptionHandler;
import com.netflix.hystrix.exception.HystrixBadRequestException;
import java.time.LocalDate;
import java.util.stream.Collectors;
import javax.validation.ConstraintViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.BindException;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.servlet.NoHandlerFoundException;
import org.zalando.problem.Problem;

@ControllerAdvice
public class CustomizedResponseEntityExceptionHandler extends GlobalExceptionHandler {

  private static final String CONSTRAINT_VIOLATION = ""Constraint violation"";
  private static final String VALIDATION_FAILED = ""Validation Failed"";
  private static final String NOT_ACCEPTABLE = ""Not acceptable"";
  private static final String NOT_AUTHORIZED = ""Not authorized"";
  private static final String RESOURCE_NOT_FOUND = ""Resource not found"";
  private static final String BAD_REQUEST = ""Bad request"";
  private static final String GATEWAY_TIMEOUT = ""Gateway timeout"";
  private static final String MESSAGE_INVALID_NUMBER_FIELD = ""The value '%s' is not a number"";
  private static final String MESSAGE_INVALID_PROPERTY = ""This value [%s] is invalid for field '%s'"";
  private static final String ACCESS_DENIED = ""Access is denied"";

  @Override
  public ResponseEntity<Problem> handleConstraintViolation(ConstraintViolationException ex,
                                                           NativeWebRequest request) {
    return new ResponseEntity<>(
        new ErrorDetails(LocalDate.now(), CONSTRAINT_VIOLATION, ex.getMessage(), request.getDescription(false)),
        HttpStatus.BAD_REQUEST);
  }

  @Override
  public ResponseEntity<Problem> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
                                                              NativeWebRequest request) {
    return new ResponseEntity<>(
        new ErrorDetails(LocalDate.now(), VALIDATION_FAILED, getErrors(ex.getBindingResult()),
            request.getDescription(false)), HttpStatus.BAD_REQUEST);
  }

  @Override
  public ResponseEntity<Problem> handleBindingResult(BindException ex, NativeWebRequest request) {
    return new ResponseEntity<>(
        new ErrorDetails(LocalDate.now(), BAD_REQUEST, getErrors(ex.getBindingResult()), request.getDescription(false)),
            HttpStatus.BAD_REQUEST);
  }

  @Override
  public ResponseEntity<Problem> handleMessageNotReadableException(HttpMessageNotReadableException ex,
                                                                   NativeWebRequest req) {
    String message = ex.getMessage();
    if (ex.getCause() instanceof InvalidFormatException) {
      InvalidFormatException exInvFor = (InvalidFormatException) ex.getCause();
      if (!Number.class.isAssignableFrom(exInvFor.getTargetType())) {
        message = String.format(MESSAGE_INVALID_NUMBER_FIELD, exInvFor.getValue().toString());
      }
    }
    ErrorDetails errorDetails = new ErrorDetails(LocalDate.now(), BAD_REQUEST, message,
        req.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.BAD_REQUEST);
  }

  @Override
  public ResponseEntity<Problem> handleNoHandlerFound(NoHandlerFoundException exception, NativeWebRequest req) {
    return new ResponseEntity<>(
        new ErrorDetails(LocalDate.now(), HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase(),
            String.valueOf(HttpStatus.INTERNAL_SERVER_ERROR.value()), req.getDescription(false)),
        HttpStatus.INTERNAL_SERVER_ERROR);
  }

  @Override
  public ResponseEntity<Problem> handleAccessDenied(AccessDeniedException ex, NativeWebRequest request) {
    return new ResponseEntity<>(
        new ErrorDetails(LocalDate.now(), ACCESS_DENIED, ex.getMessage(), request.getDescription(false)),
        HttpStatus.FORBIDDEN);
  }

  @ExceptionHandler(ResourceNotFoundException.class)
  public ResponseEntity<ErrorDetails> handleResourceNotFoundException(
      final NativeWebRequest req, final ResourceNotFoundException ex) {
    ErrorDetails errorDetails = new ErrorDetails(LocalDate.now(), RESOURCE_NOT_FOUND, ex.getMessage(),
        req.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.NOT_FOUND);
  }

  @ExceptionHandler(BadRequestException.class)
  public ResponseEntity<ErrorDetails> handleBadRequestException(
      final NativeWebRequest req, final BadRequestException ex) {
    ErrorDetails errorDetails = new ErrorDetails(LocalDate.now(), BAD_REQUEST, ex.getMessage(),
        req.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.BAD_REQUEST);
  }

  @ExceptionHandler(AddMemberGroupException.class)
  public ResponseEntity<ListError<AddMemberGroupError>> handleAddMemberGroupException(
       final NativeWebRequest req, final AddMemberGroupException ex) {
    ListError<AddMemberGroupError> errorDetails = new ListError<>(LocalDate.now(), NOT_ACCEPTABLE, ex.getMessage(),
        ex.getErrors(), req.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.NOT_ACCEPTABLE);
  }

  @ExceptionHandler(NotAuthorizedException.class)
  public ResponseEntity<ErrorDetails> handleNotAuthorizedException(
      final NativeWebRequest req, final NotAuthorizedException ex) {
    ErrorDetails errorDetails = new ErrorDetails(LocalDate.now(), NOT_AUTHORIZED, ex.getMessage(),
        req.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.UNAUTHORIZED);
  }

  @ExceptionHandler(BusinessException.class)
  public ResponseEntity<ErrorDetails> handleBusinessException(
      final NativeWebRequest req, final BusinessException ex) {
    ErrorDetails errorDetails = new ErrorDetails(LocalDate.now(), NOT_ACCEPTABLE, ex.getMessage(),
        req.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.NOT_ACCEPTABLE);
  }

  @ExceptionHandler(IllegalArgumentException.class)
  public ResponseEntity<ErrorDetails> handleIllegalArgumentException(
      final NativeWebRequest req, final IllegalArgumentException ex) {
    ErrorDetails errorDetails = new ErrorDetails(LocalDate.now(), NOT_ACCEPTABLE, ex.getMessage(),
        req.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.UNAUTHORIZED);
  }

  @ExceptionHandler(GatewayTimeoutException.class)
  public ResponseEntity<ErrorDetails> handleGatewayTimeoutException(
      final NativeWebRequest req, final GatewayTimeoutException ex) {
    ErrorDetails errorDetails = new ErrorDetails(LocalDate.now(), GATEWAY_TIMEOUT, ex.getMessage(),
        req.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.GATEWAY_TIMEOUT);
  }

  @ExceptionHandler(HystrixBadRequestException.class)
  public ResponseEntity<ErrorDetails> handleHystrixBadRequestException(final NativeWebRequest req,
                                                                       final HystrixBadRequestException ex) {
    String message = ex.getMessage();
    if (ex.getCause() instanceof BadRequestException) {
      message = ex.getCause().getMessage();
    }
    ErrorDetails errorDetails = new ErrorDetails(LocalDate.now(), BAD_REQUEST, message,
        req.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.BAD_REQUEST);
  }

  @ExceptionHandler(Exception.class)
  public ResponseEntity<ErrorDetails> handleGenericException(
      final NativeWebRequest req, final Exception ex) {
    ErrorDetails errorDetails = new ErrorDetails(LocalDate.now(), HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase(),
        ex.getMessage(), req.getDescription(false));
    return new ResponseEntity<>(errorDetails, HttpStatus.INTERNAL_SERVER_ERROR);
  }

  private String getErrors(BindingResult bindingResult) {
    String errors;
    if (bindingResult.hasFieldErrors()) {
      errors = bindingResult.getFieldErrors().stream()
          .map(fieldError -> format(MESSAGE_INVALID_PROPERTY, fieldError.getRejectedValue(), fieldError.getField()))
          .collect(Collectors.joining("". ""));
    } else {
      errors = bindingResult.toString();
    }
    return errors;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/BadRequestException.java,"package com.globant.os.accounts.support.web;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.BAD_REQUEST)
public class BadRequestException extends RuntimeException {

  private static final long serialVersionUID = 1L;

  public BadRequestException(final String message) {
    super(message);
  }

  public BadRequestException(final String message, final Throwable throwable) {
    super(message, throwable);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/GatewayTimeoutException.java,"package com.globant.os.accounts.support.web;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.GATEWAY_TIMEOUT)
public class GatewayTimeoutException extends RuntimeException {

  private static final long serialVersionUID = 1L;

  public GatewayTimeoutException(final String message) {
    super(message);
  }

  public GatewayTimeoutException(final String message, final Throwable throwable) {
    super(message, throwable);
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/ListError.java,"package com.globant.os.accounts.support.web;

import java.time.LocalDate;
import java.util.List;

public class ListError<T> extends ErrorDetails {

  private List<T> errors;

  public ListError(LocalDate timestamp, String message, String details, List<T> errors, String type) {
    super(timestamp, message, details, type);
    this.errors = errors;
  }

  public List<T> getErrors() {
    return errors;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/FindResult.java,"package com.globant.os.accounts.support.web;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toList;

import java.util.Collections;
import java.util.List;
import java.util.function.Function;
import lombok.Getter;

/**
 * Immutable class to return partial results in find operations.
 *
 * @author osvaldo
 *
 * @param <T> the type of elements.
 */
@Getter
public final class FindResult<T> {

  private static final FindResult<?> EMPTY = new FindResult<>(Collections.emptyList(), 0);

  private final List<T> values;
  private final long totalSize;

  @SuppressWarnings(""unchecked"")
  public static <T> FindResult<T> empty() {
    return (FindResult<T>) EMPTY;
  }

  /**
   * Creates a new FindResult
   *
   * @param values the list from the partial find operation.
   * @param totalSize if known the total number of elements an unrestricted find would return. -1 otherwise.
   */
  public FindResult(List<T> values, long totalSize) {
    this.values = requireNonNull(values, ""values"");
    this.totalSize = totalSize;
  }

  /**
   * Creates a new FindResult when the total size is unknown.
   *
   */
  public FindResult(List<T> values) {
    this(values, -1);
  }

  public boolean isTotalSizeKnown() {
    return totalSize >= 0;
  }

  public <E> FindResult<E> map(Function<? super T, ? extends E> converter) {
    return new FindResult<>(values.stream().map(converter).collect(toList()), totalSize);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/BaseFindCmd.java,"package com.globant.os.accounts.support.web;

import java.io.Serializable;
import java.util.Collections;
import java.util.List;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
public class BaseFindCmd implements Serializable {

  /**
   * Serial UUID.
   */
  private static final long serialVersionUID = 1136107096913897809L;

  private int pageNumber = 1;
  private int pageSize = 10;
  private List<Order> sort = Collections.emptyList();

  public boolean isDataValid() {
    return pageNumber > 0 && pageSize > 0;
  }

  public BaseFindCmd(int pageSize) {
    this.pageSize = pageSize;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/AddMemberGroupException.java,"package com.globant.os.accounts.support.web;

import java.util.List;

public class AddMemberGroupException extends BusinessException {

  private static final long serialVersionUID = 1L;

  private List<AddMemberGroupError> errors;

  public AddMemberGroupException(String message, List<AddMemberGroupError> errors) {
    super(message);
    this.errors = errors;
  }

  public List<AddMemberGroupError> getErrors() {
    return errors;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/BusinessException.java,"package com.globant.os.accounts.support.web;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.NOT_ACCEPTABLE)
public class BusinessException extends RuntimeException {

  private static final long serialVersionUID = 1L;

  public BusinessException(final String message) {
    super(message);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/AddMemberGroupError.java,"package com.globant.os.accounts.support.web;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(Include.NON_NULL)
public class AddMemberGroupError {

  private Long userId;
  private String message;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/NotAuthorizedException.java,"package com.globant.os.accounts.support.web;

public class NotAuthorizedException extends RuntimeException {

  private static final long serialVersionUID = -5644568184780083105L;

  public NotAuthorizedException(String message) {
    super(message);
  }

  public NotAuthorizedException(String message, Throwable cause) {
    super(message, cause);
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/web/ErrorDetails.java,"package com.globant.os.accounts.support.web;

import java.net.URI;
import java.net.URISyntaxException;
import java.time.LocalDate;
import org.zalando.problem.Problem;

public class ErrorDetails implements Problem {

  private LocalDate timestamp;
  private String message;
  private String details;
  private String type;

  public ErrorDetails(LocalDate timestamp, String message, String details, String type) {
    super();
    this.timestamp = timestamp;
    this.message = message;
    this.details = details;
    this.type = type;
  }

  public LocalDate getTimestamp() {
    return timestamp;
  }

  public String getMessage() {
    return message;
  }

  public String getDetails() {
    return details;
  }

  @Override
  public URI getType() {
    URI typeUri = null;
    try {
      typeUri = new URI(type);
    } catch (URISyntaxException e) {
      typeUri = DEFAULT_TYPE;
    }
    return typeUri;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/aspect/TokenValidatorAspect.java,"package com.globant.os.accounts.support.aspect;

import com.globant.os.accounts.support.web.NotAuthorizedException;
import com.globant.smu.os.security.jwt.model.OsPrincipal;
import com.globant.smu.os.security.jwt.model.OsRole;
import com.globant.smu.os.security.jwt.model.Token;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class TokenValidatorAspect {

  private static final String THE_COMMUNITY_ID_IS_DIFFERENT_TO_THE_REQUEST =
      ""The Community ID is different between request and token"";
  private static final String ROLE_SUPER_ADMIN = ""OS_SUPER_ADMIN"";
  private static final String COMMUNITY_ID_OF_REQUEST_IS_EMPTY = ""Community ID of request is empty"";
  private static final String FAIL_TRANSFORMING_COMMUNITY_ID_VALUE = ""Fail transforming community ID value"";

  private Logger logger = LoggerFactory.getLogger(TokenValidatorAspect.class);

  @Pointcut(""@annotation(com.globant.os.accounts.support.aspect.TokenValidator)"")
  public void tokenAdvice() {
  }

  @Before(""tokenAdvice()"")
  public void validateToken(JoinPoint joinPoint) {

    OsPrincipal principal = (OsPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

    if (principal.getTokenType().equals(Token.Type.APP)) {
      logger.info(""{} Token Aspect {}"", joinPoint);
      return;
    }

    OsRole roleSuperAdmin = principal.getRoles().stream()
        .filter(rol -> rol.getName().equals(ROLE_SUPER_ADMIN))
        .findAny()
        .orElse(null);

    if (roleSuperAdmin != null) {
      logger.info(""{} Token Aspect {}"", joinPoint);
      return;
    }

    if (joinPoint.getArgs().length == 0 || joinPoint.getArgs()[0] == null) {
      logger.info(""Token Aspect: "" + COMMUNITY_ID_OF_REQUEST_IS_EMPTY);
      throw new NotAuthorizedException(COMMUNITY_ID_OF_REQUEST_IS_EMPTY);
    }

    try {
      Long communityIdRequest = (Long) joinPoint.getArgs()[0];
      if (communityIdRequest != principal.getCommunityId()) {
        logger.info(""Token Aspect: "" + THE_COMMUNITY_ID_IS_DIFFERENT_TO_THE_REQUEST);
        throw new NotAuthorizedException(THE_COMMUNITY_ID_IS_DIFFERENT_TO_THE_REQUEST);
      }
    } catch (ClassCastException exc) {
      logger.info(""Token Aspect: "" + FAIL_TRANSFORMING_COMMUNITY_ID_VALUE);
      throw new NotAuthorizedException(FAIL_TRANSFORMING_COMMUNITY_ID_VALUE);
    }

    logger.info(""{} Token Aspect Community Id From Token {}"", joinPoint, principal.getCommunityId());
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/support/aspect/TokenValidator.java,"package com.globant.os.accounts.support.aspect;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface TokenValidator {
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/config/SmuCommunityPropertiesConfig.java,"package com.globant.os.accounts.external.smu.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

@Configuration
@PropertySource(""classpath:paths-starmeup.properties"")
@ConfigurationProperties(prefix = ""communities"")
@Getter
@Setter
public class SmuCommunityPropertiesConfig {

  private String pathSaveCommunity;
  private String pathSaveCommunityComplete;
  private String pathUpdateCommunity;
  private String pathEnableCommunity;
  private String pathGetCommunity;
  private String pathGetCommunities;
  private String pathGetCommunityConfig;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/config/SmuClientConfig.java,"package com.globant.os.accounts.external.smu.config;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.globant.os.accounts.external.shared.ClientConfiguration;
import com.globant.os.accounts.external.shared.RestClient;
import com.globant.os.accounts.external.shared.RestClientHistrixCommandHandler;
import java.util.concurrent.TimeUnit;
import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SmuClientConfig {

  @Value(""${starmeup-api.url}"")
  private String smuUrlApi;

  @Bean
  public RestClient restClient(RestClientHistrixCommandHandler hystrixCommandHandler) {
    ClientConfiguration clientConfig = new ClientConfiguration(smuUrlApi);
    return new RestClient(clientConfig, buildOkHttpClient(clientConfig), buildObjectMapper(), hystrixCommandHandler);
  }

  private OkHttpClient buildOkHttpClient(ClientConfiguration clientConfig) {
    return new OkHttpClient.Builder().connectTimeout(clientConfig.getConnectionTimeout(), TimeUnit.SECONDS)
        .readTimeout(clientConfig.getSocketTimeout(), TimeUnit.SECONDS).build();
  }

  private ObjectMapper buildObjectMapper() {
    return new ObjectMapper().registerModule(new JavaTimeModule())
        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)
        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/config/SmuMemberPropertiesConfig.java,"package com.globant.os.accounts.external.smu.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

@Configuration
@PropertySource(""classpath:paths-starmeup.properties"")
@ConfigurationProperties(prefix = ""members"")
@Getter
@Setter
public class SmuMemberPropertiesConfig {

  private String pathSaveMember;
  private String pathGetMember;
  private String pathGetMembers;
  private String pathGetMembersByIds;
  private String pathGetMemberConfig;
  private String pathEnabledOrDisabled;
  private String pathGetMemberDetail;
  private String pathGetMemberByLoginId;
  private String pathGetRestCommunityMembers;

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/constants/Language.java,"package com.globant.os.accounts.external.smu.constants;

import java.util.Arrays;
import java.util.Locale;
import java.util.Optional;
import java.util.function.Predicate;
import lombok.Getter;

@Getter
public enum Language {

  EN(1, new Locale(""en"")),
  ES(2, new Locale(""es"")),
  PT_PT(9, new Locale(""pt_PT"")),
  PT(3, new Locale(""pt"")),
  HI(4, new Locale(""hi"")),
  IT(5, new Locale(""it"")),
  DE(6, new Locale(""de"")),
  FR(7, new Locale(""fr"")),
  PL(8, new Locale(""pl"")),
  HE(10, new Locale(""he""));

  public static final char LANGUAGE_CODE_SEPARATOR = '_';

  private final int id;
  private final Locale locale;

  Language(final int id, final Locale locale) {
    this.id = id;
    this.locale = locale;
  }

  public static Language getById(long languageId) {
    Optional<Language> languageFiltered = filter(lang -> lang.getId() == languageId);
    return languageFiltered.orElse(EN);
  }

  public static Language getByLocale(Locale locale) {
    Locale formattedLocale = new Locale(locale.toString().replace('-', LANGUAGE_CODE_SEPARATOR));
    Optional<Language> filteredLanguage = filter(comparatorPredicate(formattedLocale));

    if (!filteredLanguage.isPresent()) {
      String[] languageInformation = formattedLocale.getLanguage().split(String.valueOf(LANGUAGE_CODE_SEPARATOR));
      return filter(comparatorPredicate(new Locale(languageInformation[0]))).orElse(EN);
    }

    return filteredLanguage.get();
  }

  private static Predicate<Language> comparatorPredicate(Locale locale) {
    return language -> language.getLocale().getLanguage().equals(locale.getLanguage());
  }

  private static Optional<Language> filter(Predicate<Language> predicate) {
    return Arrays.stream(values()).filter(predicate).findFirst();
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/io/gateway/SmuMemberClientGateway.java,"package com.globant.os.accounts.external.smu.io.gateway;

import com.globant.os.accounts.component.community.io.web.v2.MemberDetails;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import com.globant.os.accounts.component.community.service.MemberService;
import com.globant.os.accounts.component.community.service.MemberService.MemberBaseFindCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberUpdatePropertyCmd;
import com.globant.os.accounts.external.smu.model.SmuMemberDetailDto;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.NotAuthorizedException;
import com.globant.os.accounts.support.web.ResourceNotFoundException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public interface SmuMemberClientGateway {

  /**
   * Create a member
   * @param memberCmd
   * @param community
   * @return a {@link MemberDetails} object representing the Member.
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  Member createMember(MemberService.MemberCreationCmd memberCmd, Community community)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException;

  /**
   * Update a member
   * @param memberCmd
   * @param community
   * @return
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  Member updateMember(MemberService.MemberUpdateCmd memberCmd, Community community)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException;

  /**
   * Retrieves a specific Member.
   *
   * @param community Community of Member.
   * @param userId    User Id of Member.
   * @return a {@link Member} object representing the Member.
   */
  Optional<Member> getMember(Community community, long userId)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException;

  /**
   * Retrieves a paginated list of members
   *
   * @param community Community of Member
   * @param cmd to search members
   * @return A SmuPage of {@link Member} object representing the Member
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  FindResult<Member> getMembers(Community community, MemberBaseFindCmd cmd)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException;

  /**
   * Retrieves a list of members
   *
   * @param community Community of Member
   * @param usersIds  list of ids to be searched
   * @return A list of {@link OsMember} object representing the Member
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  List<Member> getMembersByIds(Community community, long... usersIds)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException;

  /**
   * Retrieves the config member
   *
   * @param communityId Community Id of Member.
   * @param userId      User Id of Member.
   * @return A map key and value with the configs
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  Map<String, String> getMemberConfig(long communityId, long userId)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException;

  /**
   * Get user details form SMU.
   *
   * @param membersIds ids of members.
   * @return list of members.
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  List<SmuMemberDetailDto> getMembersDetail(String membersIds)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException;

  /**
   * Enable or disable member.
   *
   * @param communityId community.
   * @param memberId member.
   * @param value enable or disable member.
   * @return member object. {@link Optional<Member>}
   */
  Member enabledOrDisabled(Community community, long memberId, boolean value);

  /**
   * Update properties of member
   * @param community
   * @param userId
   * @param cmd
   * @return List of properties were updated
   */
  List<PropertyValue> updateMemberProperties(Community community, long userId, MemberUpdatePropertyCmd cmd);

  /**
   * Retrieves a specific Member by loginId.
   *
   * @param community Community of Member.
   * @param loginId LoginId of Member.
   * @return a {@link Member} object representing the Member.
   */
  Optional<Member> getMemberByLoginId(Community community, String loginId)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException;

  Map<String, Long> findCommunityMembersNotContentInTheLoginIdsList(long communityId, List<String> loginIds);
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/io/gateway/SmuCommunityClientGatewayImpl.java,"package com.globant.os.accounts.external.smu.io.gateway;

import static com.globant.os.accounts.external.smu.io.gateway.pagination.Pagination.getData;
import static com.globant.os.accounts.external.smu.io.gateway.pagination.SmuPaginationUtil.createFilter;
import static com.globant.os.accounts.external.smu.io.gateway.pagination.SmuPaginationUtil.createParameters;
import static com.globant.os.accounts.external.smu.io.gateway.pagination.SmuPaginationUtil.makeFindResult;
import static java.lang.String.format;
import static java.util.Objects.isNull;
import static java.util.Objects.nonNull;
import static java.util.Optional.ofNullable;
import static java.util.stream.Collectors.toSet;
import static org.springframework.util.StringUtils.isEmpty;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityConfig;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigUpdateCmd;
import com.globant.os.accounts.component.community.service.CommunityConfigService.SmuCommunityConfigUpdateCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityCreationCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityFindCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityUpdateCmd;
import com.globant.os.accounts.component.community.service.CommunityService.SmuCommunityUpdateCmd;
import com.globant.os.accounts.external.shared.RequestDto;
import com.globant.os.accounts.external.shared.RestClient;
import com.globant.os.accounts.external.smu.config.SmuCommunityPropertiesConfig;
import com.globant.os.accounts.external.smu.io.gateway.pagination.Filter;
import com.globant.os.accounts.external.smu.io.gateway.pagination.Filter.Search;
import com.globant.os.accounts.external.smu.io.gateway.pagination.SmuPage;
import com.globant.os.accounts.external.smu.model.SmuCommunityDto;
import com.globant.os.accounts.external.smu.model.SmuDomainDto;
import com.globant.os.accounts.external.smu.model.SmuOrganizationDto;
import com.globant.os.accounts.external.smu.model.SmuOrganizationMetadataDto;
import com.globant.os.accounts.external.smu.model.SmuPageableDto;
import com.globant.os.accounts.external.smu.model.SmuResponseBodyDto;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.FindResult;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import okhttp3.Request;
import okhttp3.RequestBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

@Repository
public class SmuCommunityClientGatewayImpl implements SmuCommunityClientGateway {

  private static final String PROPERTY_NAME_COMMUNITY = ""name"";
  private static final String PROPERTY_ENABLED_COMMUNITY = ""enabled"";
  private static final String ORDER_BY_DEFAULT_COMMUNITY = ""name"";
  private static final String DIRECTION_DEFAULT = ""ASC"";
  private static final String COMMUNITY_ID_IS_NULL = ""Community ID is null."";
  private static final String STATUS_OK = ""OK"";
  private static final String BEARER_FORMAT = ""Bearer %s"";
  private static final String PROBLEM_UPDATING_THE_COMMUNITY_CONFIGS = ""There was a problem updating the ""
      + ""community configs"";
  private static final String NOT_CONFIGS_FOR_UPDATING = ""There is not configs for updating"";

  @Autowired
  private RestClient restClient;

  @Autowired
  private SmuCommunityPropertiesConfig smuProperties;

  @Value(""${starmeup-api.token}"")
  private String accountsToken;

  @Override
  public Optional<Community> getCommunity(long communityId) {
    RequestDto<Void> requestDto = new RequestDto<>(
        format(smuProperties.getPathGetCommunity(), communityId), getTokenAuthentication());
    Request request = restClient.doGetRequest(requestDto);

    Optional<Community> community = ofNullable(
        SmuOrganizationDto.toModel(restClient.doRequest(request, SmuOrganizationDto.TYPE_REF).getResult()));

    community.ifPresent(valueCommunity -> {
      Optional<SmuOrganizationMetadataDto> metadata = getCommunityConfig(communityId);
      metadata.ifPresent(valueMetadata -> {
        if (nonNull(valueMetadata.getOrganizationDomains()) && !valueMetadata.getOrganizationDomains().isEmpty()) {
          String domain = valueCommunity.getDomains().stream().findFirst().orElse("""");
          valueCommunity.getDomains()
              .addAll(valueMetadata.getOrganizationDomains().stream()
                  .filter(domainDto -> !domainDto.getDomain().equals(domain)).map(SmuDomainDto::getDomain)
                  .collect(toSet()));
        }

        if (nonNull(valueCommunity.getLocale())) {
          valueCommunity.getLocales().addAll(
              valueMetadata.getOrganizationLanguages().stream()
                  .filter(languageDto -> !languageDto.getLanguage().getCode()
                      .equals(valueCommunity.getLocale().getLanguage()))
                  .map(languageDto -> new Locale(languageDto.getLanguage().getCode()))
                  .collect(toSet()));
        }
      });
    });

    return community;
  }

  @Override
  public FindResult<Community> getCommunities(CommunityFindCmd cmd) {
    Filter filter = createFilter(cmd, createListSearch(cmd));
    return makeFindResult(getData(filter, this::getSmuCommunities));
  }

  @Override
  public Optional<Community> updateCommunity(CommunityUpdateCmd cmd) {
    if (isNull(cmd.getId())) {
      throw new BadRequestException(COMMUNITY_ID_IS_NULL);
    }

    SmuCommunityUpdateCmd communityUpdate = SmuCommunityUpdateCmd.toModel(cmd);

    RequestDto<SmuCommunityUpdateCmd> requestDto = new RequestDto<>(
        format(smuProperties.getPathUpdateCommunity(), cmd.getId()), getTokenAuthentication(), communityUpdate);

    Request request = restClient.doPutRequest(requestDto);
    SmuResponseBodyDto<SmuCommunityDto> result = (SmuResponseBodyDto<SmuCommunityDto>) restClient.doRequest(request,
        SmuCommunityDto.typeRefCommunityDto());

    Community community = SmuCommunityDto.toModel(result.getResult(), cmd);
    return Optional.ofNullable(community);
  }

  @Override
  public Community createCommunity(CommunityCreationCmd cmd) {
    SmuCommunityDto smuCommunityDto = SmuCommunityDto.createCommunityDto(cmd);

    RequestDto<SmuCommunityDto> requestDto = new RequestDto<>(
        format(smuProperties.getPathSaveCommunity(), cmd.getAdmin().getFirstName(), cmd.getAdmin().getLastName(),
            cmd.getAdmin().getIdentification()),
        getTokenAuthentication(), smuCommunityDto);

    Request request = restClient.doPostRequest(requestDto);
    SmuResponseBodyDto<SmuCommunityDto> result = (SmuResponseBodyDto<SmuCommunityDto>) restClient.doRequest(request,
        SmuCommunityDto.typeRefCommunityDto());

    Request requestComplete = restClient.createRequestBuilderTokenAuthorization(
            format(smuProperties.getPathSaveCommunityComplete(), result.getResult().getId()), result.getToken())
        .post(RequestBody.create(null, new byte[0]))
        .build();

    restClient.doRequest(requestComplete, SmuResponseBodyDto.typeRefVoid());

    return SmuCommunityDto.toModel(result.getResult());
  }

  @Override
  public Community updateEnabledFlag(long communityId, boolean value) {
    RequestDto<Void> requestDto = new RequestDto<>(
        format(smuProperties.getPathEnableCommunity(), communityId, value), getTokenAuthentication(), null);
    Request request = restClient.doPostRequest(requestDto);
    SmuResponseBodyDto<SmuOrganizationDto> response =
        (SmuResponseBodyDto<SmuOrganizationDto>) restClient.doRequest(request, SmuOrganizationDto.TYPE_REF);

    SmuOrganizationDto result = response.getResult();
    return SmuOrganizationDto.toModel(result);
  }

  @Override
  public List<CommunityConfig>  updateCommunityConfigs(long communityId,
                                                       List<CommunityConfigUpdateCmd> communityConfigUpdateList) {
    SmuCommunityConfigUpdateCmd communityConfigUpdate = SmuCommunityConfigUpdateCmd.toModel(communityConfigUpdateList);
    if (isNull(communityConfigUpdate)) {
      throw new BadRequestException(NOT_CONFIGS_FOR_UPDATING);
    }

    RequestDto<SmuCommunityConfigUpdateCmd> requestDto = new RequestDto<>(
        format(smuProperties.getPathUpdateCommunity(), communityId), getTokenAuthentication(), communityConfigUpdate);

    Request request = restClient.doPutRequest(requestDto);
    SmuResponseBodyDto<SmuCommunityDto> response = (SmuResponseBodyDto<SmuCommunityDto>) restClient.doRequest(request,
        SmuCommunityDto.typeRefCommunityDto());

    if (!STATUS_OK.equals(response.getStatus())) {
      throw new BadRequestException(PROBLEM_UPDATING_THE_COMMUNITY_CONFIGS);
    }

    SmuCommunityDto result = response.getResult();

    return buildConfigs(result, communityId);
  }

  private SmuPage<Community> getSmuCommunities(Filter filter) {
    RequestDto<Void> requestDto = new RequestDto<>(
        format(smuProperties.getPathGetCommunities())
            + createParameters(filter, ORDER_BY_DEFAULT_COMMUNITY, DIRECTION_DEFAULT),
        getTokenAuthentication());
    Request request = restClient.doGetRequest(requestDto);

    SmuResponseBodyDto<SmuPageableDto<SmuOrganizationDto>> response =
        (SmuResponseBodyDto<SmuPageableDto<SmuOrganizationDto>>) restClient.doRequest(request,
            SmuOrganizationDto.PAGEABLE_TYPE);

    SmuPageableDto<SmuOrganizationDto> result = response.getResult();

    return new SmuPage<>(result.getPageable().getPage(), result.getPageable().getSize(), result.getTotal(),
        SmuOrganizationDto.toModel(result.getContent()));
  }

  private Optional<SmuOrganizationMetadataDto> getCommunityConfig(long communityId) {
    RequestDto<Void> requestDto = new RequestDto<>(
        format(smuProperties.getPathGetCommunityConfig(), communityId), getTokenAuthentication());
    Request request = restClient.doGetRequest(requestDto);
    SmuResponseBodyDto<SmuOrganizationMetadataDto> result = (SmuResponseBodyDto<SmuOrganizationMetadataDto>) restClient
        .doRequest(request, SmuOrganizationMetadataDto.typeRef);
    return ofNullable(result.getResult());
  }

  private String getTokenAuthentication() {
    return String.format(BEARER_FORMAT, accountsToken);
  }

  private List<CommunityConfig> buildConfigs(SmuCommunityDto result, long communityId) {
    List<CommunityConfig> configs = new ArrayList<>();
    configs.add(new CommunityConfig(""internalType"", Integer.toString(result.getInternalType()),
        new Community(communityId)));
    configs.add(new CommunityConfig(""category"", Integer.toString(result.getCategory()), new Community(communityId)));
    return configs;
  }

  private List<Search> createListSearch(CommunityFindCmd cmd) {
    List<Search> searches = new ArrayList<>();
    addSearch(searches, cmd.getName(), PROPERTY_NAME_COMMUNITY);
    addSearch(searches, cmd.getEnabled(), PROPERTY_ENABLED_COMMUNITY);
    return searches;
  }

  private void addSearch(List<Search> searches, Optional<String> fieldSearch, String property) {
    String search = getOptionalSearchValue(fieldSearch);
    if (!isEmpty(search)) {
      searches.add(new Search(property, search));
    }
  }

  private String getOptionalSearchValue(Optional<String> search) {
    return search.orElse("""");
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/io/gateway/SmuCommunityClientGateway.java,"package com.globant.os.accounts.external.smu.io.gateway;

import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityConfig;
import com.globant.os.accounts.component.community.service.CommunityConfigService.CommunityConfigUpdateCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityCreationCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityFindCmd;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityUpdateCmd;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.NotAuthorizedException;
import com.globant.os.accounts.support.web.ResourceNotFoundException;
import java.util.List;
import java.util.Optional;

public interface SmuCommunityClientGateway {

  /**
   * Retrieves a Community object by id
   *
   * @param long communityId
   * @return A SmuPage of {@link Community} object representing the Community
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  Optional<Community> getCommunity(long communityId);

  /**
   * Retrieves a paginated list of communities.
   *
   * @param cmd payload to find communities
   * @return A page of {@link Community} object representing the Community
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  FindResult<Community> getCommunities(CommunityFindCmd cmd);

  /**
   * Update a community.
   * @param communityInfo payload with community information.
   * @return community.
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  Optional<Community> updateCommunity(CommunityUpdateCmd communityInfo);

  /**
   * Create a community.
   * @param cmd payload with communty information.
   * @return Community was created
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  Community createCommunity(CommunityCreationCmd cmd);

  /**
   * Update enable flag from community
   * @param communityId community identifier
   * @param value value to set enabled flag
   * @return community updated
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  Community updateEnabledFlag(long communityId, boolean value);

  /**
   * Update a community config.
   * @param communityId community identifier
   * @param cmds payload with community config information
   * @return list of community configs
   * @throws ResourceNotFoundException
   * @throws NotAuthorizedException
   * @throws BadRequestException
   */
  List<CommunityConfig> updateCommunityConfigs(long communityId, List<CommunityConfigUpdateCmd> cmds);
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/io/gateway/SmuMemberClientGatewayImpl.java,"package com.globant.os.accounts.external.smu.io.gateway;

import static com.globant.os.accounts.external.smu.io.gateway.pagination.Pagination.getData;
import static com.globant.os.accounts.external.smu.io.gateway.pagination.SmuPaginationUtil.createFilter;
import static com.globant.os.accounts.external.smu.io.gateway.pagination.SmuPaginationUtil.createParameters;
import static com.globant.os.accounts.external.smu.io.gateway.pagination.SmuPaginationUtil.makeFindResult;
import static java.lang.String.format;
import static java.lang.String.valueOf;
import static java.util.Arrays.asList;
import static java.util.Arrays.stream;
import static java.util.Objects.isNull;
import static java.util.Optional.ofNullable;
import static java.util.stream.Collectors.toList;
import static org.springframework.util.StringUtils.collectionToCommaDelimitedString;
import static org.springframework.util.StringUtils.isEmpty;

import com.fasterxml.jackson.core.type.TypeReference;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import com.globant.os.accounts.component.community.service.MemberService;
import com.globant.os.accounts.component.community.service.MemberService.CustomFieldCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberBaseFindCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberCreationCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberEnabledDisabledCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberUpdateCmd;
import com.globant.os.accounts.component.community.service.MemberService.MemberUpdatePropertyCmd;
import com.globant.os.accounts.external.shared.RequestDto;
import com.globant.os.accounts.external.shared.RestClient;
import com.globant.os.accounts.external.smu.config.SmuMemberPropertiesConfig;
import com.globant.os.accounts.external.smu.io.gateway.pagination.Filter;
import com.globant.os.accounts.external.smu.io.gateway.pagination.Filter.Search;
import com.globant.os.accounts.external.smu.io.gateway.pagination.SmuPage;
import com.globant.os.accounts.external.smu.model.SmuMemberDetailDto;
import com.globant.os.accounts.external.smu.model.SmuMemberDto;
import com.globant.os.accounts.external.smu.model.SmuMetadataDto;
import com.globant.os.accounts.external.smu.model.SmuPageableDto;
import com.globant.os.accounts.external.smu.model.SmuResponseBodyDto;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.BusinessException;
import com.globant.os.accounts.support.web.FindResult;
import com.globant.os.accounts.support.web.NotAuthorizedException;
import com.globant.os.accounts.support.web.ResourceNotFoundException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import okhttp3.Request;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

@Repository
public class SmuMemberClientGatewayImpl implements SmuMemberClientGateway {

  private static Logger logger = LoggerFactory.getLogger(SmuMemberClientGatewayImpl.class);

  private static final String ORDER_BY_DEFAULT_MEMBER = ""identification"";
  private static final String MEMBER_WAS_NOT_UPDATED_STATUS = ""Member was not updated"";
  private static final String MESSAGE_MEMBER_WAS_NOT_UPDATED_STATUS = ""Member was not updated %s %s"";
  private static final String DEFAULT_DIRECTION_SORTING = ""ASC"";
  private static final String PROPERTY_SEARCH_MEMBERS = ""searchString"";
  private static final String USER_ID_IS_NULL = ""User ID is null."";
  private static final String BEARER_FORMAT = ""Bearer %s"";
  private static final String OK_RESPONSE = ""OK"";
  private static final String MEMBER_NOT_EXIST_MESSAGE = ""Member does not exist"";
  private static final String ERROR_ENCODING_URL = ""Error encoding url"";

  @Autowired
  private RestClient restClient;

  @Autowired
  private SmuMemberPropertiesConfig smuProperties;

  @Value(""${starmeup-api.token}"")
  private String accountsToken;

  @Override
  public Member createMember(MemberCreationCmd memberCmd, Community community)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException {
    memberCmd.setCommunityId(community.getId());
    memberCmd.setIdentification(memberCmd.getLoginId());
    SmuResponseBodyDto<SmuMemberDto> response = saveSmuMember(memberCmd, memberCmd.getCommunityId());
    return SmuMemberDto.toModel(response.getResult(), community);
  }

  @Override
  public Member updateMember(MemberUpdateCmd memberCmd, Community community)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException {

    if (isNull(memberCmd.getUserId())) {
      throw new BadRequestException(USER_ID_IS_NULL);
    }

    memberCmd.setCommunityId(community.getId());
    memberCmd.setIdentification(memberCmd.getLoginId());
    SmuResponseBodyDto<SmuMemberDto> response = saveSmuMember(memberCmd, memberCmd.getCommunityId());
    return SmuMemberDto.toModel(response.getResult(), community);
  }

  @Override
  public Optional<Member> getMember(Community community, long userId) {
    RequestDto<Void> requestDto = new RequestDto<>(format(smuProperties.getPathGetMember(), userId, community.getId()),
        getTokenAuthentication());
    Request request = restClient.doGetRequest(requestDto);
    SmuResponseBodyDto<SmuMemberDto> response = (SmuResponseBodyDto<SmuMemberDto>) restClient.doRequest(request,
        SmuMemberDto.typeRef());
    return ofNullable(SmuMemberDto.toModel(response.getResult(), community));
  }

  @Override
  public FindResult<Member> getMembers(Community community, MemberBaseFindCmd cmd) {
    List<Search> searchs = null;
    if (!isEmpty(cmd.getSearchString())) {
      searchs = new ArrayList<>();
      searchs.add(new Search(PROPERTY_SEARCH_MEMBERS, cmd.getSearchString()));
    }
    Filter filter = createFilter(cmd, searchs);
    return makeFindResult(getData(filter, f -> getSmuMembers(community, f)));
  }

  @Override
  public List<Member> getMembersByIds(final Community community, long... usersIds) {
    RequestDto<Void> requestDto = new RequestDto<>(
        format(smuProperties.getPathGetMembersByIds(), community.getId(),
            createParametersMembersIds(stream(usersIds).boxed().collect(toList()))),
        getTokenAuthentication());
    Request request = restClient.doGetRequest(requestDto);

    SmuResponseBodyDto<List<SmuMemberDto>> response = (SmuResponseBodyDto<List<SmuMemberDto>>) restClient
        .doRequest(request, SmuMemberDto.listTypeRef());

    return SmuMemberDto.toModel(response.getResult(), community);
  }

  @Override
  public Map<String, String> getMemberConfig(long communityId, long userId)
      throws ResourceNotFoundException, NotAuthorizedException, BadRequestException {
    RequestDto<Void> requestDto = new RequestDto<>(format(smuProperties.getPathGetMemberConfig(), userId, communityId),
        getTokenAuthentication());
    Request request = restClient.doGetRequest(requestDto);

    SmuResponseBodyDto<SmuMetadataDto> result = (SmuResponseBodyDto<SmuMetadataDto>) restClient.doRequest(request,
        SmuMetadataDto.typeRef);

    return result.getResult().getContent();
  }

  @Override
  public Member enabledOrDisabled(Community community, long memberId, boolean value) {
    MemberService.MemberEnabledDisabledCmd cmd = new MemberService.MemberEnabledDisabledCmd(memberId, value);
    RequestDto<List<MemberEnabledDisabledCmd>> requestDto =
        new RequestDto<>(smuProperties.getPathEnabledOrDisabled(), getTokenAuthentication(), asList(cmd));
    Request request = restClient.doPostRequest(requestDto);
    SmuResponseBodyDto<String> result = (SmuResponseBodyDto<String>) restClient.doRequest(request,
        SmuResponseBodyDto.typeRefString());

    if (!result.getStatus().equals(OK_RESPONSE)) {
      String message = String.format(MESSAGE_MEMBER_WAS_NOT_UPDATED_STATUS, result.getStatus(), result.getMessage());
      logger.info(message);
      throw new BadRequestException(MEMBER_WAS_NOT_UPDATED_STATUS);
    }

    return getMember(community, memberId).orElseThrow(() -> new BusinessException(MEMBER_NOT_EXIST_MESSAGE));
  }

  @Override
  public List<SmuMemberDetailDto> getMembersDetail(String usersIds) {
    if (!isEmpty(usersIds)) {
      RequestDto<Void> requestDto = new RequestDto<>(format(smuProperties.getPathGetMemberDetail(), usersIds),
          getTokenAuthentication());
      Request request = restClient.doGetRequest(requestDto);
      SmuResponseBodyDto<List<SmuMemberDetailDto>> response = (SmuResponseBodyDto<List<SmuMemberDetailDto>>) restClient
          .doRequest(request, SmuMemberDetailDto.listTypeRef());

      return response.getResult();
    }
    return new ArrayList<>();
  }

  @Override
  public List<PropertyValue> updateMemberProperties(Community community, long userId, MemberUpdatePropertyCmd cmd) {
    Optional<Member> member = getMember(community, userId);
    List<PropertyValue> properties = new ArrayList<>();
    if (member.isPresent()) {
      Member memberUpdated = updateMember(createMemberUpdateCmd(member.get(), cmd), community);
      properties = memberUpdated.getProperties().stream().collect(toList());
    }

    return properties;
  }

  @Override
  public Optional<Member> getMemberByLoginId(Community community, String loginId) {
    RequestDto<Void> requestDto = new RequestDto<>(format(smuProperties.getPathGetMemberByLoginId(), community.getId(),
        loginId), getTokenAuthentication());
    Request request = restClient.doGetRequest(requestDto);
    SmuResponseBodyDto<SmuMemberDto> response = (SmuResponseBodyDto<SmuMemberDto>) restClient.doRequest(request,
        SmuMemberDto.typeRef());
    return ofNullable(SmuMemberDto.toModel(response.getResult(), community));
  }

  @Override
  public Map<String, Long> findCommunityMembersNotContentInTheLoginIdsList(long communityId, List<String> loginIds) {
    RequestDto<List<String>> requestDto = new RequestDto<>(
        format(smuProperties.getPathGetRestCommunityMembers(), communityId), getTokenAuthentication(), loginIds);

    Request request = restClient.doPostRequest(requestDto);

    SmuResponseBodyDto<Map<String, Long>> result = (SmuResponseBodyDto<Map<String, Long>>) restClient
        .doRequest(request, new TypeReference<SmuResponseBodyDto<Map<String, Long>>>() {
        });

    return result.getResult();
  }

  private MemberUpdateCmd createMemberUpdateCmd(Member member, MemberUpdatePropertyCmd cmd) {
    MemberUpdateCmd memberCmd = new MemberUpdateCmd();
    memberCmd.setId(member.getId().getUser().getId());
    memberCmd.setFirstName(member.getFirstName());
    memberCmd.setLastName(member.getLastName());
    memberCmd.setEmail(member.getEmail());
    memberCmd.setCommunityId(member.getId().getCommunity().getId());
    memberCmd.setProfileImageCode(member.getImage());
    memberCmd.setEnabled(member.isEnabled());

    memberCmd.setOffice(cmd.getOfficeId());
    memberCmd.setPhoneNumber(cmd.getPhoneNumber());
    memberCmd.setProfileImageId(valueOf(cmd.getProfileImageId()));
    memberCmd.setJob(cmd.getJob());
    memberCmd.setSeniority(cmd.getSeniority());
    memberCmd.setArea(cmd.getArea());
    memberCmd.setAccount(cmd.getAccount());
    memberCmd.setProject(cmd.getProject());
    memberCmd.setOrgEntryDate(cmd.getOrgEntryDate());
    memberCmd.setLoginId(cmd.getLoginId());
    memberCmd.setExternalId(cmd.getExternalId());
    memberCmd.setCustomFields(getCustomFieldCmd(cmd));
    return memberCmd;
  }

  private CustomFieldCmd getCustomFieldCmd(MemberUpdatePropertyCmd cmd) {
    CustomFieldCmd customFields = new CustomFieldCmd();
    customFields.setCustomField1(cmd.getCustomField1());
    customFields.setCustomField2(cmd.getCustomField2());
    customFields.setCustomField3(cmd.getCustomField3());
    customFields.setCustomField4(cmd.getCustomField4());
    customFields.setCustomField5(cmd.getCustomField5());
    customFields.setCustomField6(cmd.getCustomField6());
    customFields.setCustomField7(cmd.getCustomField7());
    customFields.setCustomField8(cmd.getCustomField8());
    customFields.setCustomField9(cmd.getCustomField9());
    customFields.setCustomField10(cmd.getCustomField10());
    customFields.setCustomField11(cmd.getCustomField11());
    return customFields;
  }

  private SmuPage<Member> getSmuMembers(Community community, Filter filter) {
    RequestDto<Void> requestDto = new RequestDto<>(
        format(smuProperties.getPathGetMembers(), community.getId())
            + createParameters(filter, ORDER_BY_DEFAULT_MEMBER, DEFAULT_DIRECTION_SORTING),
        getTokenAuthentication());
    Request request = restClient.doGetRequest(requestDto);

    SmuResponseBodyDto<SmuPageableDto<SmuMemberDto>> response =
        (SmuResponseBodyDto<SmuPageableDto<SmuMemberDto>>) restClient
        .doRequest(request, SmuMemberDto.PAGEABLE_TYPE);

    SmuPageableDto<SmuMemberDto> result = response.getResult();

    return new SmuPage<>(result.getPageable().getPage(), result.getPageable().getSize(), result.getTotal(),
        SmuMemberDto.toModel(result.getContent(), community));
  }

  private <T> SmuResponseBodyDto<SmuMemberDto> saveSmuMember(T cmd, Long communityId) {
    Request request;
    String token = getTokenAuthentication();

    RequestDto<T> requestDto = new RequestDto<>(format(smuProperties.getPathSaveMember(), communityId), token, cmd);
    request = restClient.doPostRequest(requestDto);

    return (SmuResponseBodyDto<SmuMemberDto>) restClient.doRequest(request, SmuMemberDto.typeRef());
  }

  private String createParametersMembersIds(List<Long> usersIds) {
    StringBuilder stb = new StringBuilder(""["");
    stb.append(collectionToCommaDelimitedString(usersIds));
    stb.append(""]"");
    try {
      return URLEncoder.encode(stb.toString(), ""UTF-8"");
    } catch (UnsupportedEncodingException e) {
      logger.error(ERROR_ENCODING_URL, e);
      return stb.toString();
    }
  }

  private String getTokenAuthentication() {
    return String.format(BEARER_FORMAT, accountsToken);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/io/gateway/pagination/Pagination.java,"package com.globant.os.accounts.external.smu.io.gateway.pagination;

public final class Pagination {

  private Pagination() { }

  public static <T> SmuPage<T> getData(Filter filter, FunctionPaginator<T> function) {
    return function.execute(filter == null ? new Filter() : filter);
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/io/gateway/pagination/FunctionPaginator.java,"package com.globant.os.accounts.external.smu.io.gateway.pagination;

public interface FunctionPaginator<T> {

  SmuPage<T> execute(Filter filter);

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/io/gateway/pagination/SmuPage.java,"package com.globant.os.accounts.external.smu.io.gateway.pagination;

import java.util.List;

public class SmuPage<T> {

  private int current;
  private int size;
  private int total;
  private List<T> data;

  public SmuPage(int current, int size, int total, List<T> data) {
    this.current = current;
    this.size = size;
    this.total = total;
    this.data = data;
  }

  public int getCurrent() {
    return current;
  }

  public int getSize() {
    return size;
  }

  public int getTotal() {
    return total;
  }

  public List<T> getData() {
    return data;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/io/gateway/pagination/SmuPaginationUtil.java,"package com.globant.os.accounts.external.smu.io.gateway.pagination;

import static java.util.Objects.nonNull;

import com.globant.os.accounts.external.smu.io.gateway.pagination.Filter.Search;
import com.globant.os.accounts.support.web.BaseFindCmd;
import com.globant.os.accounts.support.web.FindResult;
import java.util.List;

public final class SmuPaginationUtil {

  private SmuPaginationUtil() { }

  public static String createParameters(Filter filter, String orderByDefault, String orderDirectionByDefault) {
    StringBuilder stb = new StringBuilder();
    stb.append(""page="");
    stb.append(filter.getNumberPage() - 1);
    stb.append(""&size="");
    stb.append(filter.getSizePage());

    String orderBy = orderByDefault;
    String direction = orderDirectionByDefault;

    if (filter.getOrder() != null) {
      orderBy = filter.getOrder().getProperty();
      direction = filter.getOrder().getDirection();
    }

    stb.append(""&orderBy="");
    stb.append(orderBy);
    stb.append(""&direction="");
    stb.append(direction);

    if (filter.getSearch() != null) {
      stb.append(getDynamicQuery(filter.getSearch()));
    }

    return stb.toString();
  }

  public static Filter createFilter(BaseFindCmd baseFindCmd, List<Search> searchs) {
    Filter filter = new Filter(baseFindCmd.getPageNumber(), baseFindCmd.getPageSize());

    if (nonNull(baseFindCmd.getSort())) {
      baseFindCmd.getSort().stream().findFirst()
          .ifPresent(order -> filter.withOrder(order.getField(), order.getDirection().name()));
    }

    if (nonNull(searchs)) {
      searchs.forEach(search -> filter.withSearch(search.getField(), search.getValue()));
    }

    return filter;
  }

  public static <T> FindResult<T> makeFindResult(SmuPage<T> pageResult) {
    return new FindResult<>(pageResult.getData(), pageResult.getTotal());
  }

  private static String getDynamicQuery(List<Search> searchs) {
    StringBuilder query = new StringBuilder();
    searchs.forEach(search -> {
      query.append(""&"");
      query.append(search.getField());
      query.append(""="");
      query.append(search.getValue());
    });
    return query.toString();
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/io/gateway/pagination/Filter.java,"package com.globant.os.accounts.external.smu.io.gateway.pagination;

import java.util.ArrayList;
import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public final class Filter {

  private static final int SIZE_PAGE_DEFAULT = 10;
  private static final int PAGE_DEFAULT = 0;

  private int numberPage;
  private int sizePage;
  private Order order;
  private List<Search> search = new ArrayList<>();

  public Filter() {
    this(PAGE_DEFAULT, SIZE_PAGE_DEFAULT);
  }

  public Filter(int numberPage) {
    this(numberPage, SIZE_PAGE_DEFAULT);
  }

  public Filter(int numberPage, int sizePage) {
    this.numberPage = numberPage;
    this.sizePage = sizePage;
  }

  public int getNumberPage() {
    return numberPage;
  }

  public int getSizePage() {
    return sizePage;
  }

  public Order getOrder() {
    return order;
  }

  public List<Search> getSearch() {
    return search;
  }

  public Filter withOrder(String property, String direction) {
    order = new Order(property, direction);
    return this;
  }

  public Filter withSearch(String field, String value) {
    search.add(new Search(field, value));
    return this;
  }

  public static final class Order {

    private String property;
    private String direction;

    public Order(String property, String direction) {
      this.property = property;
      this.direction = direction;
    }

    public String getDirection() {
      return direction;
    }

    public String getProperty() {
      return property;
    }
  }

  public static final class Search {

    private String field;
    private String value;

    public Search(String field, String value) {
      this.field = field;
      this.value = value;
    }

    public String getField() {
      return field;
    }

    public String getValue() {
      return value;
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuCommunityDto.java,"package com.globant.os.accounts.external.smu.model;

import static java.util.Objects.nonNull;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.type.TypeReference;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityConfig;
import com.globant.os.accounts.component.community.service.CommunityService;
import com.globant.os.accounts.component.community.service.CommunityService.CommunityCreationCmd;
import com.globant.os.accounts.external.smu.constants.Language;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SmuCommunityDto {

  private static final long LANGUAGE_DEFAULT = 1L;

  private Long id;
  private SmuLanguageDto language;
  private String name;
  private String address;
  private String city;
  private String domain;
  private Long login;
  private String loginType;
  private String socialType;
  private boolean enabled;
  private boolean trial;
  private boolean pendingDefinition;
  private boolean privateModeEnabled;
  private boolean webOn;
  private boolean messageWebOff;
  private boolean activateUserOn;
  private boolean eulaEnabled;
  private Integer internalType;
  private Integer category;
  private Long numberOfEmployees;
  private String imageId;
  private String negativeImageCode;

  public static Community toModel(SmuCommunityDto dto) {
    Community community = null;
    if (dto != null) {
      community = new Community();
      community.setId(dto.getId());
      community.setName(dto.getName());
    }
    return community;
  }

  public static Community toModel(SmuCommunityDto dto, CommunityService.CommunityUpdateCmd communityInfo) {
    Community community = null;
    if (nonNull(dto)) {
      community = new Community();
      community.setId(dto.getId());
      community.setName(dto.getName());
      community.setEnabled(dto.isEnabled());
      community.setPrimaryImage(dto.getImageId());
      community.setSecondaryImage(dto.getNegativeImageCode());

      if (nonNull(dto.getLanguage())) {
        community.setLocale(new Locale(dto.getLanguage().getCode()));
      }

      community.setLocales(new HashSet<>());
      mapLocaleArray(community, communityInfo);

      community.setDomains(new HashSet<>(Arrays.asList(dto.getDomain())));
      community.setTimeZone(TimeZone.getDefault());
      community.setTotalMembers(dto.getNumberOfEmployees());
      Set<CommunityConfig> configs = getCommunityConfigs(dto);
      community.setConfigs(configs);
    }
    return community;
  }

  public static SmuCommunityDto createCommunityDto(CommunityCreationCmd cmd) {
    SmuCommunityDto smuCommunityDto = new SmuCommunityDto();
    smuCommunityDto.setName(cmd.getName());
    smuCommunityDto.setDomain(cmd.getDomains().stream().findFirst().orElse(""""));
    SmuLanguageDto language = new SmuLanguageDto();
    language.setId(LANGUAGE_DEFAULT);
    smuCommunityDto.setLanguage(language);
    smuCommunityDto.setWebOn(true);
    smuCommunityDto.setActivateUserOn(false);
    if (nonNull(cmd.getImages())) {
      smuCommunityDto.setImageId(cmd.getImages().getPrimary());
      smuCommunityDto.setNegativeImageCode(cmd.getImages().getSecondary());
    }
    return smuCommunityDto;
  }

  private static Set<CommunityConfig> getCommunityConfigs(SmuCommunityDto dto) {
    Set<CommunityConfig> configs = new HashSet<>();
    if (nonNull(dto.getInternalType())) {
      CommunityConfig configInternalType = new CommunityConfig();
      configInternalType.setConfKey(""internalType"");
      configInternalType.setConfValue(String.valueOf(dto.getInternalType()));
      configs.add(configInternalType);
    }
    if (nonNull(dto.getCategory())) {
      CommunityConfig configCategory = new CommunityConfig();
      configCategory.setConfKey(""category"");
      configCategory.setConfValue(String.valueOf(dto.getCategory()));
      configs.add(configCategory);
    }
    return configs;
  }

  private static void mapLocaleArray(Community community, CommunityService.CommunityUpdateCmd cmd) {
    if (nonNull(community.getLocale()) && nonNull(cmd.getLocales())) {
      cmd.getLocales().forEach(locale -> community.getLocales().add(Language.getByLocale(locale).getLocale()));

      cmd.getLocales().add(cmd.getLocale());
      community.getLocales().add(community.getLocale());
    }
  }

  private static final TypeReference<SmuResponseBodyDto<SmuCommunityDto>> typeRefCommunityDto =
      new TypeReference<SmuResponseBodyDto<SmuCommunityDto>>() {
      };

  public static TypeReference<SmuResponseBodyDto<SmuCommunityDto>> typeRefCommunityDto() {
    return typeRefCommunityDto;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuMetadataDto.java,"package com.globant.os.accounts.external.smu.model;

import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Map;

public class SmuMetadataDto {

  private Map<String, String> content;

  public Map<String, String> getContent() {
    return content;
  }

  public void setContent(Map<String, String> content) {
    this.content = content;
  }

  public static TypeReference<SmuResponseBodyDto<SmuMetadataDto>> typeRef =
      new TypeReference<SmuResponseBodyDto<SmuMetadataDto>>() {
  };
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/OsResponseAbstractBodyDto.java,"package com.globant.os.accounts.external.smu.model;

public class OsResponseAbstractBodyDto<T> {

  private T result;

  public T getResult() {
    return result;
  }

  public void setResult(T result) {
    this.result = result;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuMemberCommunityDto.java,"package com.globant.os.accounts.external.smu.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class SmuMemberCommunityDto {

  private long communityId;
  private long userId;
  private String firstName;
  private String lastName;
  private String email;
  private String image;
  private Locale locale;
  private boolean enabled;
  private SmuPropertyMemberCommunityDto properties;

  public static SmuMemberCommunityDto toModel(SmuMemberDto dto, long communityId) {

    SmuMemberCommunityDto member = null;
    SmuPropertyMemberCommunityDto properties;
    if (dto != null) {

      properties = new SmuPropertyMemberCommunityDto();
      properties.setLoginId(dto.getEmail());
      properties.setExternalId(communityId + String.valueOf(dto.getId()));
      properties.setProfileImageId(Long.valueOf(dto.getProfileImageId()));
      properties.setJob(dto.getJob());
      properties.setSeniority(dto.getSeniority());
      properties.setArea(dto.getArea());
      properties.setAccount(dto.getAccount());
      properties.setProject(dto.getProject());
      properties.setOrganizationName(dto.getOrganizationName());
      properties.setUid(dto.getUid());

      member = new SmuMemberCommunityDto();
      member.setFirstName(dto.getFirstName());
      member.setLastName(dto.getLastName());
      member.setEmail(dto.getEmail());
      member.setCommunityId(communityId);
      member.setEnabled(dto.isEnabled());
      member.setImage(dto.getProfileImageCode());
      member.setLocale(new Locale(dto.getLanguage().getCode()));
      member.setUserId(dto.getId());

      member.setProperties(properties);
    }
    return member;
  }

  public static List<SmuMemberCommunityDto> toModel(List<SmuMemberDto> list, long communityId) {
    List<SmuMemberCommunityDto> listMembers = new ArrayList<>();
    for (SmuMemberDto memberDto : list) {
      listMembers.add(toModel(memberDto, communityId));
    }
    return listMembers;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuVotesDto.java,"package com.globant.os.accounts.external.smu.model;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class SmuVotesDto {

  private boolean allowed;
  private Long id;
  private String message;

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuOrganizationDto.java,"package com.globant.os.accounts.external.smu.model;

import static java.lang.String.valueOf;
import static java.util.Objects.nonNull;
import static java.util.stream.Collectors.toSet;
import static org.springframework.util.StringUtils.isEmpty;

import com.fasterxml.jackson.core.type.TypeReference;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.CommunityConfig;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class SmuOrganizationDto {

  public static final String INTERNAL_TYPE_CONFIG = ""internalType"";
  public static final String CATEGORY_CONFIG = ""category"";

  private long id;
  private String name;
  private String domain;
  private String imageId;
  private String negativeImageCode;
  private long numberOfEmployees;

  private SmuLanguageDto language;
  private List<SmuLanguageMetadataDto> languages;
  private boolean enabled;
  private Long internalType;
  private Long category;

  public static Community toModel(SmuOrganizationDto dto) {
    Community community = null;
    if (dto != null) {
      community = new Community();
      community.setId(dto.getId());
      community.setName(dto.getName());
      community.setEnabled(dto.isEnabled());
      community.setPrimaryImage(dto.getImageId());
      community.setSecondaryImage(dto.getNegativeImageCode());
      community.setLocale(new Locale(dto.getLanguage().getCode()));
      addLocales(dto, community);
      if (!isEmpty(dto.getDomain())) {
        community.setDomains(new LinkedHashSet<>(Arrays.asList(dto.getDomain())));
      }

      community.setTimeZone(TimeZone.getDefault());
      community.setTotalMembers(dto.getNumberOfEmployees());
      community.setProperties(new HashSet<>());
      community.getProperties().add(new MemberPropertyDefinition(community, Community.LOGIN_ID_PROPERTY, Type.TEXT));
      community.getProperties().add(new MemberPropertyDefinition(community, Community.EXTERNAL_ID_PROPERTY, Type.TEXT));

      Set<CommunityConfig> configs = new HashSet<>();
      if (nonNull(dto.getInternalType())) {
        configs.add(new CommunityConfig(INTERNAL_TYPE_CONFIG, valueOf(dto.getInternalType())));
      }
      if (nonNull(dto.getCategory())) {
        configs.add(new CommunityConfig(CATEGORY_CONFIG, valueOf(dto.getCategory())));
      }
      community.setConfigs(configs);
    }
    return community;
  }

  public static List<Community> toModel(List<SmuOrganizationDto> list) {
    List<Community> listCommunities = new ArrayList<>();
    if (list != null) {
      for (SmuOrganizationDto dto : list) {
        listCommunities.add(toModel(dto));
      }
    }
    return listCommunities;
  }

  public static final TypeReference<SmuResponseBodyDto<SmuOrganizationDto>> TYPE_REF =
      new TypeReference<SmuResponseBodyDto<SmuOrganizationDto>>() {
  };

  public static final TypeReference<SmuResponseBodyDto<SmuPageableDto<SmuOrganizationDto>>> PAGEABLE_TYPE =
      new TypeReference<SmuResponseBodyDto<SmuPageableDto<SmuOrganizationDto>>>() {
  };

  private static void addLocales(SmuOrganizationDto organization, Community community) {
    if (nonNull(community.getLocale())) {
      community.setLocales(new HashSet<>());
      community.getLocales().add(community.getLocale());
      if (nonNull(organization.getLanguages())) {
        community.getLocales()
            .addAll(organization.getLanguages().stream().filter(
                languageDto -> !languageDto.getLanguage().getCode().equals(community.getLocale().getLanguage()))
                .map(languageDto -> new Locale(languageDto.getLanguage().getCode())).collect(toSet()));
      }
    }
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuDomainDto.java,"package com.globant.os.accounts.external.smu.model;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class SmuDomainDto {

  private long id;
  private String domain;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuOrganizationMetadataDto.java,"package com.globant.os.accounts.external.smu.model;

import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Set;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class SmuOrganizationMetadataDto {

  private Set<SmuLanguageMetadataDto> organizationLanguages;
  private Set<SmuDomainDto> organizationDomains;

  public static TypeReference<SmuResponseBodyDto<SmuOrganizationMetadataDto>> typeRef =
      new TypeReference<SmuResponseBodyDto<SmuOrganizationMetadataDto>>() {
  };
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuMemberDto.java,"package com.globant.os.accounts.external.smu.model;

import static java.lang.String.valueOf;
import static java.util.Objects.nonNull;
import static java.util.stream.Collectors.toSet;

import com.fasterxml.jackson.core.type.TypeReference;
import com.globant.os.accounts.component.community.model.Community;
import com.globant.os.accounts.component.community.model.Member;
import com.globant.os.accounts.component.community.model.Member.PropertyValue;
import com.globant.os.accounts.component.community.model.MemberConfig;
import com.globant.os.accounts.component.community.model.MemberPropertyDefinition;
import com.globant.os.accounts.component.user.model.OsUser;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class SmuMemberDto {

  private long id;
  private String firstName;
  private String lastName;
  private String email;
  private String profileImageId;
  private String profileImageCode;
  private boolean enabled;

  private String job;
  private String seniority;
  private String area;
  private String account;
  private String project;
  private boolean tosRead;
  private boolean customerMode;
  private String phoneNumber;
  private String birthDate;
  private String tosDateRead;
  private boolean tcppAccept;
  private String orgEntryDate;

  private String organizationName;
  private String identification;
  private String uid;
  private String phone;
  private String image;
  private Long communityId;
  private Long userId;
  private String externalId;
  private Locale locale;
  private Map<String, Object> properties;
  private Map<String, Object> configs;

  private SmuLanguageDto language;
  private SmuMemberOfficeDto office;
  private SmuMemberCustomFieldsDto customFields;

  public static Member toModel(SmuMemberDto dto, Community community) {
    Member member = null;
    if (dto != null) {
      OsUser user = new OsUser(dto.getFirstName(), dto.getLastName());
      user.setId(dto.getId());
      user.setImage(dto.getProfileImageCode());
      user.setEnabled(dto.isEnabled());

      member = new Member(community, user, community.getId().toString() + dto.getId(), dto.getIdentification());
      member.setFirstName(dto.getFirstName());
      member.setLastName(dto.getLastName());
      member.setImage(dto.getProfileImageCode());
      member.setEmail(dto.getEmail());
      member.setLocale(new Locale(dto.getLanguage().getCode()));
      member.setEnabled(dto.isEnabled());

      member.getProperties().addAll(getProperties(dto).entrySet().stream()
          .map(e -> new PropertyValue(valueOf(e.getValue()), new MemberPropertyDefinition(community, e.getKey(), null)))
          .collect(toSet()));

      member.setConfigs(new HashSet<>());
      member.getConfigs().add(new MemberConfig(""tosRead"", String.valueOf(dto.isTosRead()), member));
      member.getConfigs().add(new MemberConfig(""customerMode"", String.valueOf(dto.isCustomerMode()), member));
      member.getConfigs().add(new MemberConfig(""tosDateRead"", String.valueOf(dto.getTosDateRead()), member));
      member.getConfigs().add(new MemberConfig(""tcppAccept"", String.valueOf(dto.isTcppAccept()), member));
    }
    return member;
  }

  public static List<Member> toModel(List<SmuMemberDto> list, Community community) {
    List<Member> listMembers = new ArrayList<>();
    for (SmuMemberDto memberDto : list) {
      listMembers.add(toModel(memberDto, community));
    }
    return listMembers;
  }

  private static Map<String, Object> getProperties(SmuMemberDto dto) {
    Map<String, Object> properties = new HashMap<>();
    if (nonNull(dto.getProfileImageId())) {
      properties.put(Community.PROFILE_IMAGE_ID_PROPERTY, dto.getProfileImageId());
    }
    if (nonNull(dto.getUid())) {
      properties.put(""uid"", dto.getUid());
    }
    if (nonNull(dto.getPhoneNumber())) {
      properties.put(Community.PHONE_NUMBER_PROPERTY, dto.getPhoneNumber());
    }
    if (nonNull(dto.getBirthDate())) {
      properties.put(Community.BIRTH_DATE_PROPERTY, dto.getBirthDate());
    }
    if (nonNull(dto.getLanguage()) && nonNull(dto.getLanguage().getId())) {
      properties.put(""languageId"", dto.getLanguage().getId());
    }
    if (nonNull(dto.getOrgEntryDate())) {
      properties.put(Community.ORG_ENTRY_DATE_PROPERTY, dto.getOrgEntryDate());
    }

    jobInformationProperties(properties, dto);

    if (dto.getOffice() != null) {
      properties.put(""officeId"", dto.getOffice().getId());
      properties.put(""officeName"", dto.getOffice().getName());
      properties.put(""officeEnabled"", dto.getOffice().isEnabled());
    }

    properties.putAll(SmuMemberCustomFieldsDto.toModel(dto.getCustomFields()));

    return properties;
  }

  private static void jobInformationProperties(Map<String, Object> properties, SmuMemberDto dto) {
    if (nonNull(dto.getJob())) {
      properties.put(Community.JOB_PROPERTY, dto.getJob());
    }
    if (nonNull(dto.getSeniority())) {
      properties.put(Community.SENIORITY_PROPERTY, dto.getSeniority());
    }
    if (nonNull(dto.getArea())) {
      properties.put(Community.AREA_PROPERTY, dto.getArea());
    }
    if (nonNull(dto.getAccount())) {
      properties.put(Community.ACCOUNT_PROPERTY, dto.getAccount());
    }
    if (nonNull(dto.getProject())) {
      properties.put(Community.PROJECT_PROPERTY, dto.getProject());
    }
    if (nonNull(dto.getOrganizationName())) {
      properties.put(""organizationName"", dto.getOrganizationName());
    }
  }

  private static final TypeReference<SmuResponseBodyDto<SmuMemberDto>> typeRef =
      new TypeReference<SmuResponseBodyDto<SmuMemberDto>>() {
      };
  private static final TypeReference<SmuResponseBodyDto<List<SmuMemberDto>>> listTypeRef =
      new TypeReference<SmuResponseBodyDto<List<SmuMemberDto>>>() {
      };

  public static TypeReference<SmuResponseBodyDto<SmuMemberDto>> typeRef() {
    return typeRef;
  }

  public static TypeReference<SmuResponseBodyDto<List<SmuMemberDto>>> listTypeRef() {
    return listTypeRef;
  }

  public static final TypeReference<SmuResponseBodyDto<SmuPageableDto<SmuMemberDto>>> PAGEABLE_TYPE =
      new TypeReference<SmuResponseBodyDto<SmuPageableDto<SmuMemberDto>>>() {
      };
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuLanguageDto.java,"package com.globant.os.accounts.external.smu.model;

import com.globant.os.accounts.external.smu.constants.Language;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
public class SmuLanguageDto {

  private long id;
  private String code;
  private String name;
  private String nameShowed;

  public SmuLanguageDto(Language language) {
    id = language.getId();
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuLanguageMetadataDto.java,"package com.globant.os.accounts.external.smu.model;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class SmuLanguageMetadataDto {

  private long id;
  private SmuLanguageDto language;

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/OsResponseError.java,"package com.globant.os.accounts.external.smu.model;

import java.sql.Timestamp;

/**
 * Represent Accounts response error.
 *
 */
public class OsResponseError {

  /** The timestamp. */
  private Timestamp timestamp;

  /** The http status code. */
  private int status;

  /** The http error. */
  private String error;

  /** The message. */
  private String message;

  /** The request path. */
  private String path;

  /**
   * Gets the timestamp.
   *
   * @return the timestamp
   */
  public Timestamp getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the timestamp.
   *
   * @param timestamp
   *          the new timestamp
   */
  public void setTimestamp(Timestamp timestamp) {
    this.timestamp = timestamp;
  }

  /**
   * Gets the status.
   *
   * @return the status
   */
  public int getStatus() {
    return status;
  }

  /**
   * Sets the status.
   *
   * @param status
   *          the new status
   */
  public void setStatus(int status) {
    this.status = status;
  }

  /**
   * Gets the error.
   *
   * @return the error
   */
  public String getError() {
    return error;
  }

  /**
   * Sets the error.
   *
   * @param error
   *          the new error
   */
  public void setError(String error) {
    this.error = error;
  }

  /**
   * Gets the message.
   *
   * @return the message
   */
  public String getMessage() {
    return message;
  }

  /**
   * Sets the message.
   *
   * @param message
   *          the new message
   */
  public void setMessage(String message) {
    this.message = message;
  }

  /**
   * Gets the request path.
   *
   * @return the request path
   */
  public String getPath() {
    return path;
  }

  /**
   * Sets the request path.
   *
   * @param path
   *          the new request path
   */
  public void setPath(String path) {
    this.path = path;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuPageableDto.java,"package com.globant.os.accounts.external.smu.model;

import java.util.List;

public class SmuPageableDto<T> {

  private List<T> content;
  private SmuResponseBodyPageableDto pageable;
  private int total;

  public List<T> getContent() {
    return content;
  }

  public void setContent(List<T> content) {
    this.content = content;
  }

  public SmuResponseBodyPageableDto getPageable() {
    return pageable;
  }

  public void setPageable(SmuResponseBodyPageableDto pageable) {
    this.pageable = pageable;
  }

  public int getTotal() {
    return total;
  }

  public void setTotal(int total) {
    this.total = total;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuMemberDetailDto.java,"package com.globant.os.accounts.external.smu.model;

import com.fasterxml.jackson.core.type.TypeReference;
import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class SmuMemberDetailDto {

  private long id;
  private String firstName;
  private String lastName;
  private String email;
  private String profileImageId;
  private String profileImageCode;
  private boolean enabled;
  private String job;
  private String identification;

  private static final TypeReference<SmuResponseBodyDto<List<SmuMemberDetailDto>>> listTypeRef =
      new TypeReference<SmuResponseBodyDto<List<SmuMemberDetailDto>>>() {
      };

  public static TypeReference<SmuResponseBodyDto<List<SmuMemberDetailDto>>> listTypeRef() {
    return listTypeRef;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuResponseBodyDto.java,"package com.globant.os.accounts.external.smu.model;

import com.fasterxml.jackson.core.type.TypeReference;

public class SmuResponseBodyDto<T> extends OsResponseAbstractBodyDto<T> {

  private String message;
  private String status;
  private String serverId;
  private String token;

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public String getServerId() {
    return serverId;
  }

  public void setServerId(String serverId) {
    this.serverId = serverId;
  }

  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public static TypeReference<SmuResponseBodyDto<String>> typeRefString() {
    return new TypeReference<SmuResponseBodyDto<String>>() {
    };
  }

  public static TypeReference<SmuResponseBodyDto<Void>> typeRefVoid() {
    return new TypeReference<SmuResponseBodyDto<Void>>() {
    };
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuResponseBodyPageableDto.java,"package com.globant.os.accounts.external.smu.model;

public class SmuResponseBodyPageableDto {

  private int page;
  private int size;

  public int getPage() {
    return page;
  }

  public void setPage(int page) {
    this.page = page;
  }

  public int getSize() {
    return size;
  }

  public void setSize(int size) {
    this.size = size;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuResponseDto.java,"package com.globant.os.accounts.external.smu.model;

import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class SmuResponseDto<T> extends OsResponseAbstractBodyDto<T> {

  private String message;
  private String status;
  private String serverId;
  private String token;
  private T result;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuMemberCustomFieldsDto.java,"package com.globant.os.accounts.external.smu.model;

import com.globant.os.accounts.component.community.model.Community;
import java.util.HashMap;
import java.util.Map;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class SmuMemberCustomFieldsDto {

  private String customField1;
  private String customField2;
  private String customField3;
  private String customField4;
  private String customField5;
  private String customField6;
  private String customField7;
  private String customField8;
  private String customField9;
  private String customField10;
  private String customField11;

  public static Map<String, String> toModel(SmuMemberCustomFieldsDto dto) {
    Map<String, String> map = new HashMap<>();
    if (dto != null) {
      map.put(Community.CUSTOM_FIELD_1_PROPERTY, dto.getCustomField1());
      map.put(Community.CUSTOM_FIELD_2_PROPERTY, dto.getCustomField2());
      map.put(Community.CUSTOM_FIELD_3_PROPERTY, dto.getCustomField3());
      map.put(Community.CUSTOM_FIELD_4_PROPERTY, dto.getCustomField4());
      map.put(Community.CUSTOM_FIELD_5_PROPERTY, dto.getCustomField5());
      map.put(Community.CUSTOM_FIELD_6_PROPERTY, dto.getCustomField6());
      map.put(Community.CUSTOM_FIELD_7_PROPERTY, dto.getCustomField7());
      map.put(Community.CUSTOM_FIELD_8_PROPERTY, dto.getCustomField8());
      map.put(Community.CUSTOM_FIELD_9_PROPERTY, dto.getCustomField9());
      map.put(Community.CUSTOM_FIELD_10_PROPERTY, dto.getCustomField10());
      map.put(Community.CUSTOM_FIELD_11_PROPERTY, dto.getCustomField11());
    }
    return map;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuPropertyMemberCommunityDto.java,"package com.globant.os.accounts.external.smu.model;

import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class SmuPropertyMemberCommunityDto {

  private String loginId;
  private String externalId;
  private long profileImageId;
  private String job;
  private String seniority;
  private String area;
  private String account;
  private String project;
  private String organizationName;
  private String uid;
  private String officeId;
  private String officeName;
  private String officeEnabled;
  private String phoneNumber;
  private String birthDate;
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/smu/model/SmuMemberOfficeDto.java,"package com.globant.os.accounts.external.smu.model;

public class SmuMemberOfficeDto {

  private long id;
  private String name;
  private boolean enabled;

  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(boolean enabled) {
    this.enabled = enabled;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/shared/Credentials.java,"package com.globant.os.accounts.external.shared;

/**
 * Basic implementation of Credentials that allows pass access key and secret access in the constructor or apiToken in
 * the constructor.
 */
public class Credentials {

  /** The access key. */
  private final String accessKey;

  /** The secret key. */
  private final String secretKey;

  /** The api token. */
  private final String apiToken;

  /**
   * Constructs a new Credentials object, with the specified access key and secret key.
   *
   * @param accessKey
   *          The access key.
   * @param secretKey
   *          The secret access key.
   */
  public Credentials(String accessKey, String secretKey) {
    if (accessKey == null) {
      throw new IllegalArgumentException(""Access key cannot be null."");
    }
    if (secretKey == null) {
      throw new IllegalArgumentException(""Secret key cannot be null."");
    }

    this.accessKey = accessKey;
    this.secretKey = secretKey;
    this.apiToken = null;
  }

  /**
   * Constructs a new Credentials object, with the specified apiToken.
   *
   * @param apiToken
   *          The api token of service.
   */
  public Credentials(String apiToken) {
    if (apiToken == null) {
      throw new IllegalArgumentException(""Access key cannot be null."");
    }

    this.apiToken = apiToken;
    this.accessKey = null;
    this.secretKey = null;
  }

  /**
   * Gets the access key id.
   *
   * @return the access key id
   */
  public String getAccessKeyId() {
    return accessKey;
  }

  /**
   * Gets the secret key.
   *
   * @return the secret key
   */
  public String getSecretKey() {
    return secretKey;
  }

  /**
   * Gets the api token.
   *
   * @return the api token
   */
  public String getApiToken() {
    return apiToken;
  }

}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/shared/ClientConfiguration.java,"package com.globant.os.accounts.external.shared;

/**
 * A configuration required to submit requests to a service.
 *
 */
public class ClientConfiguration {

  /** The default timeout for creating new connections. */
  public static final int DEFAULT_CONNECTION_TIMEOUT = 10;

  /** The default timeout for reading from a connected socket. */
  public static final int DEFAULT_SOCKET_TIMEOUT = 50;

  /** The service endpoint. */
  private String serviceEndpoint;

  /**
   * The amount of time to wait (in seconds) for data to be transfered over an established, open connection before the
   * connection is timed out. A value of 0 means infinity, and is not recommended.
   */
  private int socketTimeout = DEFAULT_SOCKET_TIMEOUT;

  /**
   * The amount of time to wait (in seconds) when initially establishing a connection before giving up and timing out. A
   * value of 0 means infinity, and is not recommended.
   */
  private int connectionTimeout = DEFAULT_CONNECTION_TIMEOUT;

  /**
   * Instantiates a new client configuration.
   */
  public ClientConfiguration() {
    super();
  }

  /**
   * Instantiates a new client configuration.
   *
   * @param serviceEndpoint
   *          the service endpoint
   */
  public ClientConfiguration(String serviceEndpoint) {
    super();
    this.serviceEndpoint = serviceEndpoint;
  }

  /**
   * Instantiates a new client configuration.
   *
   * @param serviceEndpoint
   *          the service endpoint
   *
   * @param type
   *          Type of service endpoint
   * @param connectionTimeout
   *          the connection timeout
   * @param socketTimeout
   *          the socket timeout
   */
  public ClientConfiguration(String serviceEndpoint, int connectionTimeout, int socketTimeout) {
    super();
    this.serviceEndpoint = serviceEndpoint;
    this.connectionTimeout = connectionTimeout;
    this.socketTimeout = socketTimeout;
  }

  /**
   * Gets the service endpoint.
   *
   * @return the service endpoint
   */
  public String getServiceEndpoint() {
    return serviceEndpoint;
  }

  /**
   * Sets the service endpoint.
   *
   * @param serviceEndpoint
   *          the new service endpoint
   */
  public void setServiceEndpoint(String serviceEndpoint) {
    this.serviceEndpoint = serviceEndpoint;
  }

  /**
   * Gets the socket timeout.
   *
   * @return the socket timeout
   */
  public int getSocketTimeout() {
    return socketTimeout;
  }

  /**
   * Sets the socket timeout.
   *
   * @param socketTimeout
   *          the new socket timeout
   */
  public void setSocketTimeout(int socketTimeout) {
    this.socketTimeout = socketTimeout;
  }

  /**
   * Gets the connection timeout.
   *
   * @return the connection timeout
   */
  public int getConnectionTimeout() {
    return connectionTimeout;
  }

  /**
   * Sets the connection timeout.
   *
   * @param connectionTimeout
   *          the new connection timeout
   */
  public void setConnectionTimeout(int connectionTimeout) {
    this.connectionTimeout = connectionTimeout;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/shared/RestClientHistrixCommandHandler.java,"package com.globant.os.accounts.external.shared;

import com.globant.os.accounts.support.web.BadRequestException;
import com.netflix.hystrix.HystrixCommand;
import com.netflix.hystrix.exception.HystrixBadRequestException;
import java.util.function.Function;
import okhttp3.Protocol;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;

@Component
public class RestClientHistrixCommandHandler {

  @Autowired
  private HystrixCommand.Setter histrixCommandSetter;

  public Response executeHystrixCmd(final Request arg, final Function<Request, Response> func) {
    return toHystrixCmd(arg, func).execute();
  }

  private HystrixCommand<Response> toHystrixCmd(final Request arg, final Function<Request, Response> func) {
    return new HystrixCommand<Response>(histrixCommandSetter) {
      @Override
      protected Response run() {
        try {
          return func.apply(arg);
        } catch (BadRequestException e) {
          throw new HystrixBadRequestException(e.getMessage(), e);
        }
      }

      @Override
      protected Response getFallback() {
        Response.Builder responseBuilder = new Response.Builder().code(HttpStatus.SERVICE_UNAVAILABLE.value())
            .message(HttpStatus.SERVICE_UNAVAILABLE.getReasonPhrase()).protocol(Protocol.HTTP_1_1).request(arg);
        if (isResponseTimedOut()) {
          responseBuilder.code(HttpStatus.GATEWAY_TIMEOUT.value())
              .message(HttpStatus.GATEWAY_TIMEOUT.getReasonPhrase());
        }
        return responseBuilder.build();
      }
    };
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/shared/RequestDto.java,"package com.globant.os.accounts.external.shared;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class RequestDto<T> {

  private String path;
  private String token;
  private T body;

  public RequestDto(String path, String token) {
    this.path = path;
    this.token = token;
  }
}
",os-account-service.git
FutureOfOrganizations/os-account-service.git /src/main/java/com/globant/os/accounts/external/shared/RestClient.java,"package com.globant.os.accounts.external.shared;

import static java.lang.String.format;
import static java.util.Objects.nonNull;
import static org.springframework.util.StringUtils.isEmpty;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.globant.os.accounts.external.smu.model.OsResponseAbstractBodyDto;
import com.globant.os.accounts.external.smu.model.OsResponseError;
import com.globant.os.accounts.external.smu.model.SmuResponseBodyDto;
import com.globant.os.accounts.support.web.BadRequestException;
import com.globant.os.accounts.support.web.GatewayTimeoutException;
import com.globant.os.accounts.support.web.NotAuthorizedException;
import com.globant.os.accounts.support.web.ResourceNotFoundException;
import java.io.IOException;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class RestClient {

  private static final String CONNECTION_ERROR_ON_REQUEST = ""Connection error on request: %s"";
  private static final String GATEWAY_TIMEOUT_MESSAGE = ""The service gateway was delayed long time."";
  private static final String ERROR_ON_REQUEST = ""Error on request: %s"";
  private static final String ERROR_MAPPING = ""Error mapping the response: %s"";
  private static final String ERROR_NOT_FOUND_RESOURCE = ""The resource might not be specified correctly. %s"";
  private static final MediaType JSON = MediaType.parse(""application/json; charset=utf-8"");
  private static final String STATUS_FAIL = ""FAIL"";

  private final boolean isAuthorized;

  private ClientConfiguration clientConfig;
  private RestClientHistrixCommandHandler hystrixCommandHandler;

  protected OkHttpClient httpClient;
  protected ObjectMapper mapper;

  public RestClient(ClientConfiguration clientConfig, OkHttpClient httpClient,
      ObjectMapper mapper, RestClientHistrixCommandHandler hystrixCommandHandler) {
    this.isAuthorized = true;
    this.clientConfig = clientConfig;
    this.httpClient = httpClient;
    this.mapper = mapper;
    this.hystrixCommandHandler = hystrixCommandHandler;
  }

  protected void requireAuthorization() {
    if (!isAuthorized) {
      throw new NotAuthorizedException(
          ""Client did not send the required authorization credentials to access the requested resource"");
    }
  }

  public <T> OsResponseAbstractBodyDto<T> doRequest(Request request,
                                                    TypeReference<? extends OsResponseAbstractBodyDto<T>> ref) {
    requireAuthorization();
    mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);

    try (Response response = doHystrixRequest(request)) {
      if (response.isSuccessful()) {
        OsResponseAbstractBodyDto<T> result = mapper.readValue(response.body().bytes(), ref);

        verifySmuStatus(result);

        return result;
      } else if (504 == response.code() || 503 == response.code()) {
        throw new GatewayTimeoutException(GATEWAY_TIMEOUT_MESSAGE);
      } else if (401 == response.code() || 405 == response.code()) {
        throw new NotAuthorizedException(
            ""The authorization has been refused for the credentials contained in the request header."");
      } else {
        OsResponseError error = mapper.readValue(response.body().bytes(), OsResponseError.class);
        if (404 == error.getStatus() || 406 == error.getStatus()) {
          throw new ResourceNotFoundException(format(ERROR_NOT_FOUND_RESOURCE, error.getMessage()));
        }
        throw new BadRequestException(format(ERROR_ON_REQUEST, error.getMessage()));
      }
    } catch (IOException ex) {
      throw new BadRequestException(format(ERROR_MAPPING, ex.getMessage()), ex);
    }
  }

  public <T> Request doGetRequest(RequestDto<T> requestDto) {
    return createRequestBuilder(requestDto.getPath(), requestDto.getToken()).get().build();
  }

  public <T> Request doPutRequest(RequestDto<T> requestDto) {
    return createRequestBuilder(requestDto.getPath(), requestDto.getToken())
        .put(createRequestBody(requestDto.getBody())).build();
  }

  public <T> Request doPostRequest(RequestDto<T> requestDto) {
    return createRequestBuilder(requestDto.getPath(), requestDto.getToken())
        .post(createRequestBody(requestDto.getBody())).build();
  }

  public Request doPutRequestBody(RequestDto<RequestBody> requestDto) {
    return createRequestBuilder(requestDto.getPath(), requestDto.getToken()).put(requestDto.getBody()).build();
  }

  public Request doPostRequestBody(RequestDto<RequestBody> requestDto) {
    return createRequestBuilder(requestDto.getPath(), requestDto.getToken())
        .post(requestDto.getBody()).build();
  }

  public Request.Builder createRequestBuilderTokenAuthorization(String path, String token) {
    return createRequestBuilder(path, null, token);
  }

  private Request.Builder createRequestBuilder(String path, String tokenBearer) {
    return createRequestBuilder(path, tokenBearer, null);
  }

  private Request.Builder createRequestBuilder(String path, String tokenBearer, String token) {
    Request.Builder builder = new Request.Builder().url(clientConfig.getServiceEndpoint() + path);

    String tokenToSent = token;
    if (!isEmpty(tokenBearer)) {
      tokenToSent = tokenBearer;
    }
    builder.addHeader(""Authorization"", tokenToSent);

    return builder;
  }

  private <T> RequestBody createRequestBody(T body) {
    try {
      RequestBody requestBody = null;
      if (nonNull(body)) {
        requestBody = RequestBody.create(JSON, mapper.writeValueAsString(body));
      } else {
        requestBody = RequestBody.create(JSON, new byte[]{});
      }
      return requestBody;
    } catch (JsonProcessingException e) {
      throw new BadRequestException(ERROR_ON_REQUEST + e.getMessage(), e);
    }
  }

  private <T> void verifySmuStatus(OsResponseAbstractBodyDto<T> result) {
    if (result instanceof SmuResponseBodyDto) {
      SmuResponseBodyDto<T> smuResult = (SmuResponseBodyDto<T>) result;
      if (STATUS_FAIL.equals(smuResult.getStatus())) {
        throw new BadRequestException(smuResult.getMessage());
      }
    }
  }

  private Response doHystrixRequest(Request request) {
    return hystrixCommandHandler.executeHystrixCmd(request, requestSent -> {
      try {
        return httpClient.newCall(request).execute();
      } catch (IOException ex) {
        throw new BadRequestException(format(CONNECTION_ERROR_ON_REQUEST, ex.getMessage()), ex);
      }
    });
  }
}
",os-account-service.git
